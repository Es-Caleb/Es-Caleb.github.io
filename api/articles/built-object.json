{"title":"基本类型对应的内置对象，以及他们之间的装箱拆箱操作","uid":"54ea49642993052fe31a24e3d7d4f0a2","slug":"built-object","date":"2023-02-16T02:12:23.000Z","updated":"2023-02-20T08:16:18.224Z","comments":true,"path":"api/articles/built-object.json","keywords":null,"cover":null,"content":"<h1 id=\"内置对象\"><a href=\"#内置对象\" class=\"headerlink\" title=\"内置对象\"></a>内置对象</h1><h2 id=\"内置对象-1\"><a href=\"#内置对象-1\" class=\"headerlink\" title=\"内置对象\"></a>内置对象</h2><ul>\n<li>Object是JS中所有对象的父对象</li>\n<li>数据封装类对象：Object Array Boolean Number String</li>\n<li>其他对象：Function Math Date RegExp Error<h2 id=\"特殊的基本包装类型\"><a href=\"#特殊的基本包装类型\" class=\"headerlink\" title=\"特殊的基本包装类型\"></a>特殊的基本包装类型</h2>String Number Boolean<h2 id=\"arguments\"><a href=\"#arguments\" class=\"headerlink\" title=\"arguments\"></a>arguments</h2>只存在函数内部的一个类数组对象<h1 id=\"装箱和拆箱\"><a href=\"#装箱和拆箱\" class=\"headerlink\" title=\"装箱和拆箱\"></a>装箱和拆箱</h1><h2 id=\"装箱\"><a href=\"#装箱\" class=\"headerlink\" title=\"装箱\"></a>装箱</h2>把基本数据类型转换为对应的引用数据类型的操作称为装箱，可以分为隐式装箱和显式装箱。</li>\n</ul>\n<p><em><strong>隐式装箱</strong></em></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>每当读取一个基本类型的时候，后台就会创建一个对应的基本包装类型对象，从而让我们能够调用一些方法来操作这些数据。             ——《JavaScript高级程序设计》</p></blockquote>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">let a</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">'<span class=\"token inner-value\">sun</span>'</span>\n<span class=\"token key attr-name\">let b</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">a.indexOf('s')</span>\n//上述代码在后台实际的步骤为\n<span class=\"token key attr-name\">let a</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">new String('sun')</span>\n<span class=\"token key attr-name\">let b</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">a.indexOf('s')</span>\n<span class=\"token key attr-name\">a</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">null</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上述代码中，a是基本数据类型，不是对象，不应该具有方法，JS内部进行了装箱操作，使得它能够调用方法。执行完相应的方法之后立即被销毁。</p>\n<h2 id=\"拆箱\"><a href=\"#拆箱\" class=\"headerlink\" title=\"拆箱\"></a>拆箱</h2><p>将引用数据类型转换为基本数据类型，通过<code>valueOf()</code>和<code>toString()</code>实现。</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">let a=new <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sun'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//object</span>\nlet b=new <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>12<span class=\"token punctuation\">)</span><span class=\"token comment\">//object</span>\na.<span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//'sun' string</span>\na.<span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//12 number</span>\nb.<span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//'sun'string</span>\nb.<span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//'12' string</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>参考：<a href=\"https://juejin.cn/post/7028925336809111566\">《基本类型对应的内置对象，以及他们之间的装箱拆箱操作》</a></p>\n<p><strong>ps：文末附上汇总文章链接<a href=\"https://kaleb.top/post/self-check-list\">《一名【合格】前端工程师的自检清单【自检ing】》</a></strong></p>\n","text":"内置对象内置对象 Object是JS中所有对象的父对象 数据封装类对象：Object Array Boolean Number String 其他对象：Function Math Date RegExp Error特殊的基本包装类型String Number Booleanarg...","link":"","photos":[],"count_time":{"symbolsCount":762,"symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":11,"path":"api/categories/前端.json"},{"name":"自检清单","slug":"前端/自检清单","count":11,"path":"api/categories/前端/自检清单.json"},{"name":"JS","slug":"前端/自检清单/JS","count":10,"path":"api/categories/前端/自检清单/JS.json"}],"tags":[{"name":"前端","slug":"前端","count":11,"path":"api/tags/前端.json"},{"name":"自检清单","slug":"自检清单","count":11,"path":"api/tags/自检清单.json"},{"name":"JS","slug":"JS","count":10,"path":"api/tags/JS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">内置对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1-1\"><span class=\"toc-text\">内置对象</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%89%B9%E6%AE%8A%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">特殊的基本包装类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#arguments\"><span class=\"toc-text\">arguments</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%A3%85%E7%AE%B1%E5%92%8C%E6%8B%86%E7%AE%B1\"><span class=\"toc-text\">装箱和拆箱</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A3%85%E7%AE%B1\"><span class=\"toc-text\">装箱</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8B%86%E7%AE%B1\"><span class=\"toc-text\">拆箱</span></a></li></ol></li></ol>","author":{"name":"手可摘星陈","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"人就是这样，喜欢什么，败给什么","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"null和undefined的区别","uid":"448cccd8063bd5883f40c05f4e533fff","slug":"null-undefined-diff","date":"2023-02-16T04:30:00.000Z","updated":"2023-02-20T08:16:39.194Z","comments":true,"path":"api/articles/null-undefined-diff.json","keywords":null,"cover":null,"text":"undefinedundefined 的字面意思就是：未定义的值 。这个值的语义是，希望表示一个变量最原始的状态，而非人为操作的结果 。 这种原始状态会在以下 4 种场景中出现： 声明一个变量，但是没有赋var foo; console.log(foo); // undefine...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":11,"path":"api/categories/前端.json"},{"name":"自检清单","slug":"前端/自检清单","count":11,"path":"api/categories/前端/自检清单.json"},{"name":"JS","slug":"前端/自检清单/JS","count":10,"path":"api/categories/前端/自检清单/JS.json"}],"tags":[{"name":"前端","slug":"前端","count":11,"path":"api/tags/前端.json"},{"name":"自检清单","slug":"自检清单","count":11,"path":"api/tags/自检清单.json"},{"name":"JS","slug":"JS","count":10,"path":"api/tags/JS.json"}],"author":{"name":"手可摘星陈","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"人就是这样，喜欢什么，败给什么","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"JavaScript中的变量在内存中的具体存储形式","uid":"205cdbee45bbacca672eccc7f03221f2","slug":"js-storageForm","date":"2023-02-15T09:27:34.000Z","updated":"2023-02-20T08:16:27.833Z","comments":true,"path":"api/articles/js-storageForm.json","keywords":null,"cover":[],"text":"栈内存和堆内存 JavaScript中的变量分为基本类型和引用类型 基本类型是保存在栈内存中的简单数据段，它们的值都有固定的大小，保存在栈空间，通过按值访问 引用类型是保存在堆内存中的对象，值大小不固定，栈内存中存放的该对象的访问地址指向堆内存中的对象，JavaScript不允许...","link":"","photos":[],"count_time":{"symbolsCount":218,"symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":11,"path":"api/categories/前端.json"},{"name":"自检清单","slug":"前端/自检清单","count":11,"path":"api/categories/前端/自检清单.json"},{"name":"JS","slug":"前端/自检清单/JS","count":10,"path":"api/categories/前端/自检清单/JS.json"}],"tags":[{"name":"前端","slug":"前端","count":11,"path":"api/tags/前端.json"},{"name":"自检清单","slug":"自检清单","count":11,"path":"api/tags/自检清单.json"},{"name":"JS","slug":"JS","count":10,"path":"api/tags/JS.json"}],"author":{"name":"手可摘星陈","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"人就是这样，喜欢什么，败给什么","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}