{"title":"可能发生隐式类型转换的场景以及转换原则，应如何避免或巧妙应用","uid":"8df75aa3038e84f242f016eb70dbbb6a","slug":"implicit-type","date":"2023-02-17T03:46:34.000Z","updated":"2023-02-20T08:16:21.710Z","comments":true,"path":"api/articles/implicit-type.json","keywords":null,"cover":null,"content":"<h1 id=\"数值转换\"><a href=\"#数值转换\" class=\"headerlink\" title=\"数值转换\"></a>数值转换</h1><p>有三个函数可以将非数值转换为数值：Number()、parseInt()、parseFloat()。Number()是转型函数，可用于任何数据类型。后两个函数主要用于将字符串转换为数值。</p>\n<h1 id=\"隐式类型转换\"><a href=\"#隐式类型转换\" class=\"headerlink\" title=\"隐式类型转换\"></a>隐式类型转换</h1><ol>\n<li>涉及类型转换最多的两个运算符是+和==。+可以是字符串相加，也可以是数字相加，在操作符中存在字符串时，优先转换为字符串。</li>\n<li>−∗/- * /−∗/ 只针对Number类型，所以转换的结果只能是Number类型。</li>\n</ol>\n<h1 id=\"三种转换\"><a href=\"#三种转换\" class=\"headerlink\" title=\"三种转换\"></a>三种转换</h1><h2 id=\"转换为数字\"><a href=\"#转换为数字\" class=\"headerlink\" title=\"转换为数字\"></a>转换为数字</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>ES定义所有对象都有<code>toString()</code>方法，无论它是伪对象还是对象。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>string</td>\n<td>解析为数字，含有除了数字之外的字符，则转换为NAN</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>true-&gt;1 false-&gt;0</td>\n</tr>\n<tr>\n<td>undefined</td>\n<td>NAN</td>\n</tr>\n<tr>\n<td>null</td>\n<td>+0</td>\n</tr>\n<tr>\n<td>[]</td>\n<td>+0</td>\n</tr>\n<tr>\n<td>[5]</td>\n<td>5</td>\n</tr>\n<tr>\n<td>{}</td>\n<td>NAN</td>\n</tr>\n<tr>\n<td>‘111’</td>\n<td>111 空字符串转为0 含有字符的字符串转为NaN</td>\n</tr>\n<tr>\n<td>Symbol</td>\n<td>报错</td>\n</tr>\n</tbody></table></blockquote>\n<h2 id=\"转换为字符串\"><a href=\"#转换为字符串\" class=\"headerlink\" title=\"转换为字符串\"></a>转换为字符串</h2><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>boolean</td>\n<td>true-&gt;’true’ false-&gt;’false’</td>\n</tr>\n<tr>\n<td>undefined</td>\n<td>‘undefined’</td>\n</tr>\n<tr>\n<td>null</td>\n<td>‘null’</td>\n</tr>\n<tr>\n<td>Number</td>\n<td>直接转换，例如123-&gt;’123’</td>\n</tr>\n<tr>\n<td>[]</td>\n<td>“”</td>\n</tr>\n<tr>\n<td>[5,2]</td>\n<td>“5.2”</td>\n</tr>\n<tr>\n<td>{}</td>\n<td>‘[Object Object]’</td>\n</tr>\n<tr>\n<td>Symbol</td>\n<td>‘Symbol()’</td>\n</tr>\n</tbody></table>\n<h2 id=\"转换为布尔值\"><a href=\"#转换为布尔值\" class=\"headerlink\" title=\"转换为布尔值\"></a>转换为布尔值</h2><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>string</td>\n<td>除了空串都是’true’</td>\n</tr>\n<tr>\n<td>undefined</td>\n<td>false</td>\n</tr>\n<tr>\n<td>null</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Number</td>\n<td>除了+0 -0 NaN之外其他都为true</td>\n</tr>\n<tr>\n<td>[]</td>\n<td>true</td>\n</tr>\n<tr>\n<td>{}</td>\n<td>true</td>\n</tr>\n<tr>\n<td>Symbol</td>\n<td>true</td>\n</tr>\n</tbody></table>\n<h1 id=\"的判断\"><a href=\"#的判断\" class=\"headerlink\" title=\"===的判断\"></a>===的判断</h1><ol>\n<li>===属于严格相等，直接判断两者的类型是否相同，不同则返回fals</li>\n<li>如果相同再比较大小，<code>不会进行任何隐式转换</code></li>\n<li>对于引用类型来说，比较的都是引用内存地址，所以===这种方式的比较，除非两者存储的内存地址相同才相等，反之false</li>\n</ol>\n<h1 id=\"涉及的类型转换规则\"><a href=\"#涉及的类型转换规则\" class=\"headerlink\" title=\"==涉及的类型转换规则\"></a>==涉及的类型转换规则</h1><ul>\n<li>两边的类型是否相同，相同的话就比较值的大小。</li>\n<li>判断是否是null和undefined，是的话就返回true。</li>\n<li>判断类型是否是String和Numner，是的话就把String类型转成Number，再比较。</li>\n<li>判断一方是否是Boolean，是的话就把Boolean转换成Number，再进行比较。</li>\n<li>如果其中一方是Object，且另一方为String、Number或者Symbol，会将Object转换成字符串，再进行比较。</li>\n</ul>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"[]==![]\"></a>[]==![]</h2><ol>\n<li>首先将![]转为布尔值，[]-&gt;true，!true-&gt;false，false-&gt;0</li>\n<li>[]-&gt;0 故0==0，返回true。</li>\n</ol>\n<h1 id=\"对象转原始类型是根据什么流程运行的？\"><a href=\"#对象转原始类型是根据什么流程运行的？\" class=\"headerlink\" title=\"对象转原始类型是根据什么流程运行的？\"></a>对象转原始类型是根据什么流程运行的？</h1><p>对象转原始类型，会调用内置的[ToPrimitive]函数，对于该函数，其逻辑如下：</p>\n<ol>\n<li>如果Symbol.toPrimitive()方法，优先调用再返回</li>\n<li>调用valueof()，如果转换为原始类型就返回</li>\n<li>调用toString()，如果转换为原始类型就返回</li>\n<li>如果都没有返回原始类型，会报错</li>\n</ol>\n<p>并非所有对象的隐式转换都会按照这个流程进行，<code>Date对象</code>会优先尝试toString方法来实现转换，非Date对象按照上述顺序。</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>valueOf</th>\n<th>toString</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Object</td>\n<td>对象本身，这是默认情况</td>\n<td>返回’[object ObjectName]’，其中ObjectName是对象类型的名称</td>\n</tr>\n<tr>\n<td>String</td>\n<td>字符串值</td>\n<td>返回String对象的值</td>\n</tr>\n<tr>\n<td>Number</td>\n<td>数字值</td>\n<td>返回数值的字符串表示、还可以返回指定进制表示的字符串</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>Boolean值</td>\n<td>为true，返回’true’；为false，返回’false’</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>数组本身</td>\n<td>将Array的每个元素转为字符串，并将他们依次连接起来，两个元素之间用英文逗号作为分隔符进行拼接</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>存储的时间是从1970年1月1月午夜开始计的毫秒数UTC</td>\n<td>返回日期的文本表示</td>\n</tr>\n<tr>\n<td>Function</td>\n<td>函数本身</td>\n<td>返回如下格式的字符串，其中functionname是一个函数的名称，此函数的toString()方法被调用：”function functionname(){[native code]}”</td>\n</tr>\n</tbody></table>\n<h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"({} + {})\"></a>({} + {})</h2><ol>\n<li>进行ToPrimitive转换，由于没有指定PreferredType类型，{}会使默认值为Number，进行ToPrimitive(input, Number)运算。</li>\n<li>执行valueOf方法，({}).valueOf(),返回的还是{}对象，不是原始值。</li>\n<li>继续执行toString方法，({}).toString(),返回”[object Object]”，是原始值。 故得到最终的结果，”[object Object]” + “[object Object]” = “[object Object] [object Object]”</li>\n</ol>\n<h2 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2 * {}\"></a>2 * {}</h2><p>首先*运算符只能对number类型进行运算，故第一步就是对{}进行ToNumber类型转换。</p>\n<ol>\n<li>由于{}是对象类型，故先进行原始类型转换，ToPrimitive(input, Number)运算。</li>\n<li>执行valueOf方法，({}).valueOf(),返回的还是{}对象，不是原始值。</li>\n<li>继续执行toString方法，({}).toString(),返回”[object Object]”，是原始值。</li>\n<li>转换为原始值后再进行ToNumber运算，”[object Object]”就转换为NaN。 故最终的结果为 2 * NaN =NAN</li>\n</ol>\n<p>参考：<a href=\"https://juejin.cn/post/7028951669488484359\">《可能发生隐式类型转换的场景以及转换原则，应如何避免或巧妙应用》</a></p>\n<p><strong>ps：文末附上汇总文章链接<a href=\"https://kaleb.top/post/self-check-list\">《一名【合格】前端工程师的自检清单【自检ing】》</a></strong></p>\n","text":"数值转换有三个函数可以将非数值转换为数值：Number()、parseInt()、parseFloat()。Number()是转型函数，可用于任何数据类型。后两个函数主要用于将字符串转换为数值。 隐式类型转换 涉及类型转换最多的两个运算符是+和==。+可以是字符串相加，也可以是数...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"前端","slug":"前端","count":13,"path":"api/categories/前端.json"},{"name":"自检清单","slug":"前端/自检清单","count":13,"path":"api/categories/前端/自检清单.json"},{"name":"JS","slug":"前端/自检清单/JS","count":10,"path":"api/categories/前端/自检清单/JS.json"}],"tags":[{"name":"前端","slug":"前端","count":13,"path":"api/tags/前端.json"},{"name":"自检清单","slug":"自检清单","count":13,"path":"api/tags/自检清单.json"},{"name":"JS","slug":"JS","count":10,"path":"api/tags/JS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%95%B0%E5%80%BC%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">数值转换</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%9A%90%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">隐式类型转换</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89%E7%A7%8D%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">三种转换</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%95%B0%E5%AD%97\"><span class=\"toc-text\">转换为数字</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">转换为字符串</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%B8%83%E5%B0%94%E5%80%BC\"><span class=\"toc-text\">转换为布尔值</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%9A%84%E5%88%A4%E6%96%AD\"><span class=\"toc-text\">&#x3D;&#x3D;&#x3D;的判断</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%B6%89%E5%8F%8A%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E8%A7%84%E5%88%99\"><span class=\"toc-text\">&#x3D;&#x3D;涉及的类型转换规则</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">[]&#x3D;&#x3D;![]</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E8%BD%AC%E5%8E%9F%E5%A7%8B%E7%B1%BB%E5%9E%8B%E6%98%AF%E6%A0%B9%E6%8D%AE%E4%BB%80%E4%B9%88%E6%B5%81%E7%A8%8B%E8%BF%90%E8%A1%8C%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\">对象转原始类型是根据什么流程运行的？</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">例子</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#-1\"><span class=\"toc-text\">({} + {})</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2\"><span class=\"toc-text\">2 * {}</span></a></li></ol></li></ol>","author":{"name":"手可摘星陈","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"人就是这样，喜欢什么，败给什么","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"出现小数精度丢失的原因，JavaScript可以存储的最大数字、最大安全数字，JavaScript处理大数字的方法、避免精度丢失的方法","uid":"97ef40e42114f03cdf27cd3432d76d80","slug":"loss-of-precision","date":"2023-02-17T09:17:28.000Z","updated":"2023-02-20T08:16:35.162Z","comments":true,"path":"api/articles/loss-of-precision.json","keywords":null,"cover":null,"text":"一个经典的面试题 0.1 + 0.2 === 0.3 // false 精度丢失原因计算机是通过二进制的方式存储数据的，所以计算机计算0.1+0.2的时候，实际上是计算的两个数的二进制的和。 0.1的二进制是0.0001100110011001100...（1100循环），0.2...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"前端","slug":"前端","count":13,"path":"api/categories/前端.json"},{"name":"自检清单","slug":"前端/自检清单","count":13,"path":"api/categories/前端/自检清单.json"},{"name":"JS","slug":"前端/自检清单/JS","count":10,"path":"api/categories/前端/自检清单/JS.json"}],"tags":[{"name":"前端","slug":"前端","count":13,"path":"api/tags/前端.json"},{"name":"自检清单","slug":"自检清单","count":13,"path":"api/tags/自检清单.json"},{"name":"JS","slug":"JS","count":10,"path":"api/tags/JS.json"}],"author":{"name":"手可摘星陈","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"人就是这样，喜欢什么，败给什么","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"至少可以说出三种判断JavaScript数据类型的方式，以及他们的优缺点，如何准确的判断数组类型","uid":"3aa48ecd1d5414b4b0af011d9171a628","slug":"judgment-type-method","date":"2023-02-16T08:53:16.000Z","updated":"2023-02-20T08:16:30.745Z","comments":true,"path":"api/articles/judgment-type-method.json","keywords":null,"cover":[],"text":"我们先复习一下js的数据类型。 JavaScript 的数据类型包括原始类型和对象类型： 原始类型：Null、Undefined、Number、String、Boolean、Symbol、BigInt 对象类型：Object 我们习惯把对象称为引用类型，当然还有很多特殊的引用类型...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"前端","slug":"前端","count":13,"path":"api/categories/前端.json"},{"name":"自检清单","slug":"前端/自检清单","count":13,"path":"api/categories/前端/自检清单.json"},{"name":"JS","slug":"前端/自检清单/JS","count":10,"path":"api/categories/前端/自检清单/JS.json"}],"tags":[{"name":"前端","slug":"前端","count":13,"path":"api/tags/前端.json"},{"name":"自检清单","slug":"自检清单","count":13,"path":"api/tags/自检清单.json"},{"name":"JS","slug":"JS","count":10,"path":"api/tags/JS.json"}],"author":{"name":"手可摘星陈","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"人就是这样，喜欢什么，败给什么","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}