{"title":"JavaScript对象的底层数据结构是什么","uid":"54ad94266d02aab420ff03426bccde3c","slug":"js-data-structure","date":"2023-02-15T05:21:00.000Z","updated":"2023-02-20T08:16:14.793Z","comments":true,"path":"api/articles/js-data-structure.json","keywords":null,"cover":null,"content":"<p>上一篇文章归纳了<code>javascript</code>的数据类型，归根到底数据类型就分为两类，一种是基本类型，一种是引用类型。文章链接《JavaScript规定了几种语言类型》</p>\n<h2 id=\"基本类型\"><a href=\"#基本类型\" class=\"headerlink\" title=\"基本类型\"></a>基本类型</h2><ul>\n<li>内容：<code>String</code>、<code>Number</code>、<code>Boolean</code>、<code>Undefined</code>、<code>Null</code>、<code>Symbol</code>、<code>BigInt</code></li>\n<li>特点：值不可变，无属性无方法，保存在栈内存中、值比较。</li>\n</ul>\n<h2 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h2><ul>\n<li>内容：引用类型统称为Object类型。细分的话有：<code>Object</code>、<code>Array</code>、<code>Date</code>、<code>RegExp</code>、<code>Function</code>  等特点：引用类型的值同时保存在栈内存和堆内存中的对象。栈区内存保存变量标识符，堆内存存储对象的地址</li>\n</ul>\n<h2 id=\"什么是数据结构？\"><a href=\"#什么是数据结构？\" class=\"headerlink\" title=\"什么是数据结构？\"></a>什么是数据结构？</h2><p>数据结构是<strong>一种组织、管理和存储数据的形式</strong>，这种形式<strong>方便数据访问和修改</strong>。</p>\n<h3 id=\"JavaScript使用的是-堆-Heap-和-栈-Stack\"><a href=\"#JavaScript使用的是-堆-Heap-和-栈-Stack\" class=\"headerlink\" title=\"JavaScript使用的是 堆(Heap) 和 栈( Stack)\"></a>JavaScript使用的是 堆(Heap) 和 栈( Stack)</h3><h4 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h4><ul>\n<li><p>是堆内存的简称，堆是动态分配内存，内存大小不固定，也不会自动释放</p>\n</li>\n<li><p>队列优先,先进先出，方便存储和开辟内存空间。</p>\n</li>\n</ul>\n<h4 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h4><ul>\n<li>栈内存的简称，自动分配相对固定大小的内存空间，并由系统自动释放。</li>\n<li>基本类型存储在栈内存的好处就是，内存可以及时得到回收，相对于堆来说，更加容易管理内存空间</li>\n<li>线性结构，后进先出，便于管理。</li>\n</ul>\n<h3 id=\"数据结构相关-—-浅拷贝、深拷贝\"><a href=\"#数据结构相关-—-浅拷贝、深拷贝\" class=\"headerlink\" title=\"数据结构相关 — 浅拷贝、深拷贝\"></a>数据结构相关 — 浅拷贝、深拷贝</h3><h4 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h4><p>创建新的数据，这个数据有着原始数据属性值的一份精确拷贝</p>\n<p>浅拷贝是拷贝一层，深层次的引用类型则共享内存地址</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>浅拷贝实现方法：</p>\n<ul>\n<li>Object.assign</li>\n<li>slice()</li>\n<li>concat()</li>\n<li>拓展运算符 …</li>\n</ul></blockquote>\n<h5 id=\"Object-assign\"><a href=\"#Object-assign\" class=\"headerlink\" title=\"Object.assign\"></a>Object.assign</h5><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    age<span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n    nature<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'smart'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'good'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    names<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        name1<span class=\"token operator\">:</span> <span class=\"token string\">'fx'</span><span class=\"token punctuation\">,</span>\n        name2<span class=\"token operator\">:</span> <span class=\"token string\">'xka'</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">love</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fx is a great girl'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> newObj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice()\"></a>slice()</h5><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fxArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"One\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Two\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Three\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> fxArrs <span class=\"token operator\">=</span> fxArr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nfxArrs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"love\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fxArr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"One\", \"Two\", \"Three\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fxArrs<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"One\", \"love\", \"Three\"]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat()\"></a>concat()</h5><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fxArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"One\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Two\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Three\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> fxArrs <span class=\"token operator\">=</span> fxArr<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfxArrs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"love\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fxArr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"One\", \"Two\", \"Three\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fxArrs<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"One\", \"love\", \"Three\"]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"拓展运算符-…\"><a href=\"#拓展运算符-…\" class=\"headerlink\" title=\"拓展运算符 …\"></a>拓展运算符 …</h5><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">onst fxArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"One\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Two\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Three\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> fxArrs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>fxArr<span class=\"token punctuation\">]</span>\nfxArrs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"love\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fxArr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"One\", \"Two\", \"Three\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fxArrs<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"One\", \"love\", \"Three\"]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h4><p>深拷贝开辟一个新的栈，两个对象属完成相同，但是对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>  实现方法：</p>\n<ul>\n<li>_.cloneDeep()</li>\n<li>jQuery.extend()</li>\n<li>JSON.stringify()</li>\n<li>手写循环递归</li>\n</ul></blockquote>\n<h5 id=\"cloneDeep\"><a href=\"#cloneDeep\" class=\"headerlink\" title=\"_.cloneDeep()\"></a>_.cloneDeep()</h5><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lodash'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    b<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> f<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> g<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    c<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">cloneDeep</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>f <span class=\"token operator\">===</span> obj2<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"jQuery-extend\"><a href=\"#jQuery-extend\" class=\"headerlink\" title=\"jQuery.extend()\"></a>jQuery.extend()</h5><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> $ <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jquery'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    b<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> f<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> g<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    c<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>f <span class=\"token operator\">===</span> obj2<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"JSON-stringify\"><a href=\"#JSON-stringify\" class=\"headerlink\" title=\"JSON.stringify()\"></a>JSON.stringify()</h5><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj2<span class=\"token operator\">=</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 但是这种方式存在弊端，会忽略undefined、symbol和函数</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h5 id=\"手写循环递归\"><a href=\"#手写循环递归\" class=\"headerlink\" title=\"手写循环递归\"></a>手写循环递归</h5><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">deepClone</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> hash <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果是null或者undefined我就不进行拷贝操作</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 可能是对象或者普通的值  如果是函数的话是不需要深拷贝</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> obj <span class=\"token operator\">!==</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 是对象的话就要进行深拷贝</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> cloneObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">obj<span class=\"token punctuation\">.</span>constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 找到的是所属类原型上的constructor,而原型上的 constructor指向的是当前类本身</span>\n  hash<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> cloneObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 实现一个递归拷贝</span>\n      cloneObj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">deepClone</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> cloneObj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>ps：文末附上汇总文章链接<a href=\"https://kaleb.top/post/self-check-list\">《一名【合格】前端工程师的自检清单【自检ing】》</a></strong></p>\n","text":"上一篇文章归纳了javascript的数据类型，归根到底数据类型就分为两类，一种是基本类型，一种是引用类型。文章链接《JavaScript规定了几种语言类型》 基本类型 内容：String、Number、Boolean、Undefined、Null、Symbol、BigInt 特...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"前端","slug":"前端","count":13,"path":"api/categories/前端.json"},{"name":"自检清单","slug":"前端/自检清单","count":13,"path":"api/categories/前端/自检清单.json"},{"name":"JS","slug":"前端/自检清单/JS","count":10,"path":"api/categories/前端/自检清单/JS.json"}],"tags":[{"name":"前端","slug":"前端","count":13,"path":"api/tags/前端.json"},{"name":"自检清单","slug":"自检清单","count":13,"path":"api/tags/自检清单.json"},{"name":"JS","slug":"JS","count":10,"path":"api/tags/JS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">基本类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">引用类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9F\"><span class=\"toc-text\">什么是数据结构？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JavaScript%E4%BD%BF%E7%94%A8%E7%9A%84%E6%98%AF-%E5%A0%86-Heap-%E5%92%8C-%E6%A0%88-Stack\"><span class=\"toc-text\">JavaScript使用的是 堆(Heap) 和 栈( Stack)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A0%86\"><span class=\"toc-text\">堆</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%88\"><span class=\"toc-text\">栈</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9B%B8%E5%85%B3-%E2%80%94-%E6%B5%85%E6%8B%B7%E8%B4%9D%E3%80%81%E6%B7%B1%E6%8B%B7%E8%B4%9D\"><span class=\"toc-text\">数据结构相关 — 浅拷贝、深拷贝</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B5%85%E6%8B%B7%E8%B4%9D\"><span class=\"toc-text\">浅拷贝</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Object-assign\"><span class=\"toc-text\">Object.assign</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#slice\"><span class=\"toc-text\">slice()</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#concat\"><span class=\"toc-text\">concat()</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%8B%93%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6-%E2%80%A6\"><span class=\"toc-text\">拓展运算符 …</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E6%8B%B7%E8%B4%9D\"><span class=\"toc-text\">深拷贝</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#cloneDeep\"><span class=\"toc-text\">_.cloneDeep()</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#jQuery-extend\"><span class=\"toc-text\">jQuery.extend()</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#JSON-stringify\"><span class=\"toc-text\">JSON.stringify()</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%89%8B%E5%86%99%E5%BE%AA%E7%8E%AF%E9%80%92%E5%BD%92\"><span class=\"toc-text\">手写循环递归</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"手可摘星陈","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"人就是这样，喜欢什么，败给什么","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Symbol类型在实际开发中的应用、可手动实现一个简单的Symbol","uid":"aea670576bd859851504cb5f27ad22f5","slug":"symbol-devAndapp","date":"2023-02-15T09:27:34.000Z","updated":"2023-02-20T08:16:46.097Z","comments":true,"path":"api/articles/symbol-devAndapp.json","keywords":null,"cover":null,"text":"前言在 Es6 中引入了一个新的基础数据类型:Symbol,对于其他基本数据类型(数字number,布尔boolean,null,undefined,字符串string)想必都比较熟悉,但是这个Symbol平时用得很少,甚至在实际开发中觉得没有什么卵用,能够涉及到的应用场景屈指可...","link":"","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"前端","slug":"前端","count":13,"path":"api/categories/前端.json"},{"name":"自检清单","slug":"前端/自检清单","count":13,"path":"api/categories/前端/自检清单.json"},{"name":"JS","slug":"前端/自检清单/JS","count":10,"path":"api/categories/前端/自检清单/JS.json"}],"tags":[{"name":"前端","slug":"前端","count":13,"path":"api/tags/前端.json"},{"name":"自检清单","slug":"自检清单","count":13,"path":"api/tags/自检清单.json"},{"name":"JS","slug":"JS","count":10,"path":"api/tags/JS.json"}],"author":{"name":"手可摘星陈","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"人就是这样，喜欢什么，败给什么","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"JavaScript规定了几种语言类型","uid":"be69bcf460f3a988c3f4f8fd1e3998bb","slug":"js-specThe-langType","date":"2023-02-15T03:34:00.000Z","updated":"2023-02-20T08:16:24.822Z","comments":true,"path":"api/articles/js-specThe-langType.json","keywords":null,"cover":null,"text":"前言JavaScript是什么？这里引用百度百科的说法 JavaScript（简称“JS”） 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。虽然它是作为开发Web页面的脚本语言而出名，但是它也被用到了很多非浏览器环境中，JavaScript 基于原型编程、多范式的动态...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":13,"path":"api/categories/前端.json"},{"name":"自检清单","slug":"前端/自检清单","count":13,"path":"api/categories/前端/自检清单.json"},{"name":"JS","slug":"前端/自检清单/JS","count":10,"path":"api/categories/前端/自检清单/JS.json"}],"tags":[{"name":"前端","slug":"前端","count":13,"path":"api/tags/前端.json"},{"name":"自检清单","slug":"自检清单","count":13,"path":"api/tags/自检清单.json"},{"name":"JS","slug":"JS","count":10,"path":"api/tags/JS.json"}],"author":{"name":"手可摘星陈","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"人就是这样，喜欢什么，败给什么","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}