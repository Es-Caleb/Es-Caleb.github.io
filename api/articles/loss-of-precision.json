{"title":"出现小数精度丢失的原因，JavaScript可以存储的最大数字、最大安全数字，JavaScript处理大数字的方法、避免精度丢失的方法","uid":"97ef40e42114f03cdf27cd3432d76d80","slug":"loss-of-precision","date":"2023-02-17T09:17:28.000Z","updated":"2023-02-20T08:09:12.425Z","comments":true,"path":"api/articles/loss-of-precision.json","keywords":null,"cover":null,"content":"<p>一个经典的面试题</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0.3</span> <span class=\"token comment\">// false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"精度丢失原因\"><a href=\"#精度丢失原因\" class=\"headerlink\" title=\"精度丢失原因\"></a>精度丢失原因</h2><p>计算机是通过二进制的方式存储数据的，所以计算机计算0.1+0.2的时候，实际上是计算的两个数的二进制的和。</p>\n<p>0.1的二进制是<code>0.0001100110011001100...</code>（1100循环），0.2的二进制是：<code>0.00110011001100...</code>（1100循环），这两个数的二进制都是无限循环的数。</p>\n<p><code>JavaScript</code> 中数字的存储遵循 <code>IEEE 754</code> 标准，是以 64 位双精度格式来存储数字的。</p>\n<p>一般我们认为数字包括整数和小数，但是在 JavaScript 中只有一种数字类型：Number，它的实现遵循IEEE 754标准，使用64位固定长度来表示，也就是标准的double双精度浮点数。在二进制科学表示法中，双精度浮点数的小数部分最多只能保留52位，再加上前面的1，其实就是保留53位有效数字，剩余的需要舍去，遵从“0舍1入”的原则。</p>\n<p>  根据这个原则，0.1和0.2的二进制数相加，再转化为十进制数就是：<code>0.30000000000000004</code>。</p>\n<h2 id=\"最大数字、最大安全数\"><a href=\"#最大数字、最大安全数\" class=\"headerlink\" title=\"最大数字、最大安全数\"></a>最大数字、最大安全数</h2><ul>\n<li><p>能够表示的最大数字<code>Number.MAX_VALUE</code>等于<code>1.7976931348623157e+308</code></p>\n</li>\n<li><p>最大安全数字<code>Number.MAX_SAFE_INTEGER</code>等于<code>9007199254740991</code></p>\n</li>\n</ul>\n<h2 id=\"JS处理最大数字的方法\"><a href=\"#JS处理最大数字的方法\" class=\"headerlink\" title=\"JS处理最大数字的方法\"></a>JS处理最大数字的方法</h2><h3 id=\"json-bigint\"><a href=\"#json-bigint\" class=\"headerlink\" title=\"json-bigint\"></a>json-bigint</h3><h4 id=\"官方示例\"><a href=\"#官方示例\" class=\"headerlink\" title=\"官方示例\"></a>官方示例</h4><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">\n<span class=\"token keyword\">var</span> JSONbig <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'json-bigint'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> JSONstrict <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'json-bigint'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> strict<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> dupkeys <span class=\"token operator\">=</span> <span class=\"token string\">'&#123; \"dupkey\": \"value 1\", \"dupkey\": \"value 2\"&#125;'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n\\nDuplicate Key test with both lenient and strict JSON parsing'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Input:'</span><span class=\"token punctuation\">,</span> dupkeys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> works <span class=\"token operator\">=</span> JSONbig<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>dupkeys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'JSON.parse(dupkeys).dupkey: %s'</span><span class=\"token punctuation\">,</span> works<span class=\"token punctuation\">.</span>dupkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> fails <span class=\"token operator\">=</span> <span class=\"token string\">'will stay like this'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n  fails <span class=\"token operator\">=</span> JSONstrict<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>dupkeys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ERROR!! Should never get here'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'Succesfully catched expected exception on duplicate keys: %j'</span><span class=\"token punctuation\">,</span>\n    e\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 这些事打印内容</span>\nDuplicate Key test <span class=\"token keyword\">with</span> big number <span class=\"token constant\">JSON</span>\nInput<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"dupkey\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"value 1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dupkey\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"value 2\"</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>dupkeys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>dupkey<span class=\"token operator\">:</span> value <span class=\"token number\">2</span>\nSuccesfully catched expected exception on duplicate keys<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"SyntaxError\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"message\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Duplicate key \\\"dupkey\\\"\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"at\"</span><span class=\"token operator\">:</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"text\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"&#123; \\\"dupkey\\\": \\\"value 1\\\", \\\"dupkey\\\": \\\"value 2\\\"&#125;\"</span><span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>参考：<a href=\"https://juejin.cn/post/7039249706735632420\">js大数字精度丢失问题</a></p>\n<h2 id=\"处理精度缺失的方法\"><a href=\"#处理精度缺失的方法\" class=\"headerlink\" title=\"处理精度缺失的方法\"></a>处理精度缺失的方法</h2><h3 id=\"toPrecision-s-parseFloat\"><a href=\"#toPrecision-s-parseFloat\" class=\"headerlink\" title=\"toPrecision +s parseFloat\"></a>toPrecision +s parseFloat</h3><p>使用 <code>toPrecision</code> 凑整并 <code>parseFloat</code>转成数字后再显示</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// 示例</span>\n<span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.4000000000000001</span><span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">1.4</span>  <span class=\"token comment\">// True</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>封装成方法就是：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">strip</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num<span class=\"token punctuation\">,</span> precision <span class=\"token operator\">=</span> <span class=\"token number\">12</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">+</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span>precision<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Number-EPSILON\"><a href=\"#Number-EPSILON\" class=\"headerlink\" title=\"Number.EPSILON\"></a>Number.EPSILON</h3><p>在ES6中，提供了<code>Number.EPSILON</code>属性，而它的值就是2-52，只要判断<code>0.1+0.2-0.3</code>是否小于<code>Number.EPSILON</code>，如果小于，就可以判断为0.1+0.2 ===0.3</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">numberepsilon</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1<span class=\"token punctuation\">,</span> arg2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \n    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>arg1 <span class=\"token operator\">-</span> arg2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">EPSILON</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">numberepsilon</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>ps：文末附上汇总文章链接<a href=\"https://kaleb.top/post/self-check-list\">《一名【合格】前端工程师的自检清单【自检ing】》</a></strong></p>\n","feature":true,"text":"一个经典的面试题 0.1 + 0.2 === 0.3 // false 精度丢失原因计算机是通过二进制的方式存储数据的，所以计算机计算0.1+0.2的时候，实际上是计算的两个数的二进制的和。 0.1的二进制是0.0001100110011001100...（1100循环），0.2...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"前端","slug":"前端","count":11,"path":"api/categories/前端.json"},{"name":"自检清单","slug":"前端/自检清单","count":11,"path":"api/categories/前端/自检清单.json"},{"name":"JS","slug":"前端/自检清单/JS","count":10,"path":"api/categories/前端/自检清单/JS.json"}],"tags":[{"name":"前端","slug":"前端","count":11,"path":"api/tags/前端.json"},{"name":"自检清单","slug":"自检清单","count":11,"path":"api/tags/自检清单.json"},{"name":"JS","slug":"JS","count":10,"path":"api/tags/JS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E5%8E%9F%E5%9B%A0\"><span class=\"toc-text\">精度丢失原因</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%80%E5%A4%A7%E6%95%B0%E5%AD%97%E3%80%81%E6%9C%80%E5%A4%A7%E5%AE%89%E5%85%A8%E6%95%B0\"><span class=\"toc-text\">最大数字、最大安全数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JS%E5%A4%84%E7%90%86%E6%9C%80%E5%A4%A7%E6%95%B0%E5%AD%97%E7%9A%84%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">JS处理最大数字的方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#json-bigint\"><span class=\"toc-text\">json-bigint</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%98%E6%96%B9%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">官方示例</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%84%E7%90%86%E7%B2%BE%E5%BA%A6%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">处理精度缺失的方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#toPrecision-s-parseFloat\"><span class=\"toc-text\">toPrecision +s parseFloat</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Number-EPSILON\"><span class=\"toc-text\">Number.EPSILON</span></a></li></ol></li></ol>","author":{"name":"手可摘星陈","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"人就是这样，喜欢什么，败给什么","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"理解原型设计模式以及JavaScript中的原型规则","uid":"9c0e46ac234b95fe1f1741ca7e4e7d0c","slug":"prototype-rules","date":"2023-02-20T08:10:45.000Z","updated":"2023-02-20T08:11:57.284Z","comments":true,"path":"api/articles/prototype-rules.json","keywords":null,"cover":[],"text":"原型规则原型规则所有的引用类型（数组、对象、函数），都具有对象特征，即可自由扩展属性； var arr = []; arr.a =1; 所有的引用类型都有对象的特性，即可自由扩展 所有的引用类型都有一个_proto_属性（隐式原型），属性的值是一个普通对象 所有函数，都具有一个p...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"前端","slug":"前端","count":11,"path":"api/categories/前端.json"},{"name":"自检清单","slug":"前端/自检清单","count":11,"path":"api/categories/前端/自检清单.json"},{"name":"JS","slug":"前端/自检清单/JS","count":10,"path":"api/categories/前端/自检清单/JS.json"}],"tags":[{"name":"前端","slug":"前端","count":11,"path":"api/tags/前端.json"},{"name":"自检清单","slug":"自检清单","count":11,"path":"api/tags/自检清单.json"},{"name":"JS","slug":"JS","count":10,"path":"api/tags/JS.json"}],"author":{"name":"手可摘星陈","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"人就是这样，喜欢什么，败给什么","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"可能发生隐式类型转换的场景以及转换原则，应如何避免或巧妙应用","uid":"8df75aa3038e84f242f016eb70dbbb6a","slug":"implicit-type","date":"2023-02-17T03:46:34.000Z","updated":"2023-02-20T08:07:23.475Z","comments":true,"path":"api/articles/implicit-type.json","keywords":null,"cover":null,"text":"数值转换有三个函数可以将非数值转换为数值：Number()、parseInt()、parseFloat()。Number()是转型函数，可用于任何数据类型。后两个函数主要用于将字符串转换为数值。 隐式类型转换 涉及类型转换最多的两个运算符是+和==。+可以是字符串相加，也可以是数...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"前端","slug":"前端","count":11,"path":"api/categories/前端.json"},{"name":"自检清单","slug":"前端/自检清单","count":11,"path":"api/categories/前端/自检清单.json"},{"name":"JS","slug":"前端/自检清单/JS","count":10,"path":"api/categories/前端/自检清单/JS.json"}],"tags":[{"name":"前端","slug":"前端","count":11,"path":"api/tags/前端.json"},{"name":"自检清单","slug":"自检清单","count":11,"path":"api/tags/自检清单.json"},{"name":"JS","slug":"JS","count":10,"path":"api/tags/JS.json"}],"author":{"name":"手可摘星陈","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"人就是这样，喜欢什么，败给什么","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}