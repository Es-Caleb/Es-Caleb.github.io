{"title":"null和undefined的区别","uid":"448cccd8063bd5883f40c05f4e533fff","slug":"null-undefined-diff","date":"2023-02-16T04:30:00.000Z","updated":"2023-02-20T08:16:39.194Z","comments":true,"path":"api/articles/null-undefined-diff.json","keywords":null,"cover":null,"content":"<h2 id=\"undefined\"><a href=\"#undefined\" class=\"headerlink\" title=\"undefined\"></a>undefined</h2><p>undefined 的字面意思就是：未定义的值 。这个值的语义是，希望表示一个变量最原始的状态，而非人为操作的结果 。 这种原始状态会在以下 4 种场景中出现：</p>\n<h3 id=\"声明一个变量，但是没有赋\"><a href=\"#声明一个变量，但是没有赋\" class=\"headerlink\" title=\"声明一个变量，但是没有赋\"></a>声明一个变量，但是没有赋</h3><pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> foo<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// undefined</span>\n</code></pre>\n<p>访问 foo，返回了 undefined，表示这个变量自从声明了以后，就从来没有使用过，也没有定义过任何有效的值。</p>\n<h3 id=\"访问对象上不存在的属性或者未定义的变量\"><a href=\"#访问对象上不存在的属性或者未定义的变量\" class=\"headerlink\" title=\"访问对象上不存在的属性或者未定义的变量\"></a>访问对象上不存在的属性或者未定义的变量</h3><pre class=\" language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> demo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// undefined</span>\n</code></pre>\n<p>访问 Object 对象上的 foo 属性，返回 undefined ， 表示Object 上不存在或者没有定义名为 foo 的属性；对未声明的变量执行typeof操作符返回了undefined值。</p>\n<h3 id=\"函数定义了形参，但没有传递实参\"><a href=\"#函数定义了形参，但没有传递实参\" class=\"headerlink\" title=\"函数定义了形参，但没有传递实参\"></a>函数定义了形参，但没有传递实参</h3><pre class=\" language-scss\"><code class=\"language-scss\"><span class=\"token comment\" spellcheck=\"true\">//函数定义了形参 a</span>\nfunction <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token number\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// undefined</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//未传递实参</span>\n</code></pre>\n<p>函数 fn 定义了形参 a，但 fn 被调用时没有传递参数，因此，fn 运行时的参数 a 就是一个原始的、未被赋值的变量。</p>\n<h3 id=\"使用void对表达式求值\"><a href=\"#使用void对表达式求值\" class=\"headerlink\" title=\"使用void对表达式求值\"></a>使用void对表达式求值</h3><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">void</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// undefined</span>\n<span class=\"token keyword\">void</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// undefined</span>\n<span class=\"token keyword\">void</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// undefined</span>\n<span class=\"token keyword\">void</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// undefined</span>\n<span class=\"token keyword\">void</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// undefined</span>\n</code></pre>\n<h2 id=\"null\"><a href=\"#null\" class=\"headerlink\" title=\"null\"></a>null</h2><p>null 的字面意思是：空值 。这个值的语义是，希望表示一个对象被人为的重置为空对象，而非一个变量最原始的状态 。 在内存里的表示就是，栈中的变量没有指向堆中的内存对象。</p>\n<h3 id=\"特殊的typeof-null\"><a href=\"#特殊的typeof-null\" class=\"headerlink\" title=\"特殊的typeof null\"></a>特殊的typeof null</h3><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// \"object\"</span>\n</code></pre>\n<h2 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h2><h4 id=\"值相同\"><a href=\"#值相同\" class=\"headerlink\" title=\"值相同\"></a>值相同</h4><pre class=\" language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> undefined <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//true</span>\n</code></pre>\n<h4 id=\"转换Boolean的都是false\"><a href=\"#转换Boolean的都是false\" class=\"headerlink\" title=\"转换Boolean的都是false\"></a>转换Boolean的都是false</h4><pre class=\" language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//false</span>\n</code></pre>\n<h2 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h2><h4 id=\"数据类型不同\"><a href=\"#数据类型不同\" class=\"headerlink\" title=\"数据类型不同\"></a>数据类型不同</h4><pre class=\" language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> undefined <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//false     </span>\n</code></pre>\n<h4 id=\"转换为Number类型的值不同\"><a href=\"#转换为Number类型的值不同\" class=\"headerlink\" title=\"转换为Number类型的值不同\"></a>转换为Number类型的值不同</h4><pre class=\" language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//NaN</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//0</span>\n</code></pre>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><p>undefined相当于期房。 买了房,但是房子还没建出来。(未定义)</p>\n</li>\n<li><p>null相当于毛坯房。买了房,但是房子没住人,里面是空的。(空值)</p>\n</li>\n<li><p>值是undefined的变量和未声明的变量，typeof运算结果都是“undefined”。运算符typeof运算null的类型时返回“object”。</p>\n</li>\n<li><p>通过禁止使用特殊值undefined，可以有效地确保只在一种情况下typeof才会返回“undefined”：当变量未声明时。这样就可以区别null和undefined。</p>\n</li>\n</ul>\n<p><strong>ps：文末附上汇总文章链接<a href=\"https://kaleb.top/post/self-check-list\">《一名【合格】前端工程师的自检清单【自检ing】》</a></strong></p>\n","text":"undefinedundefined 的字面意思就是：未定义的值 。这个值的语义是，希望表示一个变量最原始的状态，而非人为操作的结果 。 这种原始状态会在以下 4 种场景中出现： 声明一个变量，但是没有赋var foo; console.log(foo); // undefine...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":17,"path":"api/categories/前端.json"},{"name":"自检清单","slug":"前端/自检清单","count":17,"path":"api/categories/前端/自检清单.json"},{"name":"JS","slug":"前端/自检清单/JS","count":13,"path":"api/categories/前端/自检清单/JS.json"}],"tags":[{"name":"前端","slug":"前端","count":17,"path":"api/tags/前端.json"},{"name":"自检清单","slug":"自检清单","count":17,"path":"api/tags/自检清单.json"},{"name":"JS","slug":"JS","count":13,"path":"api/tags/JS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#undefined\"><span class=\"toc-text\">undefined</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A3%B0%E6%98%8E%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F%EF%BC%8C%E4%BD%86%E6%98%AF%E6%B2%A1%E6%9C%89%E8%B5%8B\"><span class=\"toc-text\">声明一个变量，但是没有赋</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%BF%E9%97%AE%E5%AF%B9%E8%B1%A1%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E5%B1%9E%E6%80%A7%E6%88%96%E8%80%85%E6%9C%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">访问对象上不存在的属性或者未定义的变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%BA%86%E5%BD%A2%E5%8F%82%EF%BC%8C%E4%BD%86%E6%B2%A1%E6%9C%89%E4%BC%A0%E9%80%92%E5%AE%9E%E5%8F%82\"><span class=\"toc-text\">函数定义了形参，但没有传递实参</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8void%E5%AF%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC\"><span class=\"toc-text\">使用void对表达式求值</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#null\"><span class=\"toc-text\">null</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%89%B9%E6%AE%8A%E7%9A%84typeof-null\"><span class=\"toc-text\">特殊的typeof null</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E5%90%8C%E7%82%B9\"><span class=\"toc-text\">相同点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%80%BC%E7%9B%B8%E5%90%8C\"><span class=\"toc-text\">值相同</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BD%AC%E6%8D%A2Boolean%E7%9A%84%E9%83%BD%E6%98%AFfalse\"><span class=\"toc-text\">转换Boolean的都是false</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E5%90%8C%E7%82%B9\"><span class=\"toc-text\">不同点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8D%E5%90%8C\"><span class=\"toc-text\">数据类型不同</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BD%AC%E6%8D%A2%E4%B8%BANumber%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%80%BC%E4%B8%8D%E5%90%8C\"><span class=\"toc-text\">转换为Number类型的值不同</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"手可摘星陈","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"人就是这样，喜欢什么，败给什么","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"至少可以说出三种判断JavaScript数据类型的方式，以及他们的优缺点，如何准确的判断数组类型","uid":"3aa48ecd1d5414b4b0af011d9171a628","slug":"judgment-type-method","date":"2023-02-16T08:53:16.000Z","updated":"2023-02-20T08:16:30.745Z","comments":true,"path":"api/articles/judgment-type-method.json","keywords":null,"cover":[],"text":"我们先复习一下js的数据类型。 JavaScript 的数据类型包括原始类型和对象类型： 原始类型：Null、Undefined、Number、String、Boolean、Symbol、BigInt 对象类型：Object 我们习惯把对象称为引用类型，当然还有很多特殊的引用类型...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"前端","slug":"前端","count":17,"path":"api/categories/前端.json"},{"name":"自检清单","slug":"前端/自检清单","count":17,"path":"api/categories/前端/自检清单.json"},{"name":"JS","slug":"前端/自检清单/JS","count":13,"path":"api/categories/前端/自检清单/JS.json"}],"tags":[{"name":"前端","slug":"前端","count":17,"path":"api/tags/前端.json"},{"name":"自检清单","slug":"自检清单","count":17,"path":"api/tags/自检清单.json"},{"name":"JS","slug":"JS","count":13,"path":"api/tags/JS.json"}],"author":{"name":"手可摘星陈","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"人就是这样，喜欢什么，败给什么","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"基本类型对应的内置对象，以及他们之间的装箱拆箱操作","uid":"54ea49642993052fe31a24e3d7d4f0a2","slug":"built-object","date":"2023-02-16T02:12:23.000Z","updated":"2023-02-20T08:16:18.224Z","comments":true,"path":"api/articles/built-object.json","keywords":null,"cover":null,"text":"内置对象内置对象 Object是JS中所有对象的父对象 数据封装类对象：Object Array Boolean Number String 其他对象：Function Math Date RegExp Error特殊的基本包装类型String Number Booleanarg...","link":"","photos":[],"count_time":{"symbolsCount":763,"symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":17,"path":"api/categories/前端.json"},{"name":"自检清单","slug":"前端/自检清单","count":17,"path":"api/categories/前端/自检清单.json"},{"name":"JS","slug":"前端/自检清单/JS","count":13,"path":"api/categories/前端/自检清单/JS.json"}],"tags":[{"name":"前端","slug":"前端","count":17,"path":"api/tags/前端.json"},{"name":"自检清单","slug":"自检清单","count":17,"path":"api/tags/自检清单.json"},{"name":"JS","slug":"JS","count":13,"path":"api/tags/JS.json"}],"author":{"name":"手可摘星陈","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"人就是这样，喜欢什么，败给什么","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}