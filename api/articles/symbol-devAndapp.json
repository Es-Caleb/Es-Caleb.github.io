{"title":"Symbol类型在实际开发中的应用、可手动实现一个简单的Symbol","uid":"aea670576bd859851504cb5f27ad22f5","slug":"symbol-devAndapp","date":"2023-02-15T09:27:34.000Z","updated":"2023-02-20T08:16:46.097Z","comments":true,"path":"api/articles/symbol-devAndapp.json","keywords":null,"cover":null,"content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在 Es6 中引入了一个新的基础数据类型:<code>Symbol</code>,对于其他基本数据类型(<code>数字number</code>,<code>布尔boolean</code>,<code>null</code>,<code>undefined</code>,<code>字符串string</code>)想必都比较熟悉,但是这个<code>Symbol</code>平时用得很少,甚至在实际开发中觉得没有什么卵用,能够涉及到的应用场景屈指可数.</p>\n<h1 id=\"解决的问题\"><a href=\"#解决的问题\" class=\"headerlink\" title=\"解决的问题\"></a>解决的问题</h1><p>在 Es5 的对象属性名中都是字符串,当一对象的属性名出现重复时,后者往往会覆盖前者.<br>若使用<code>Symbol</code>就能够保证每个属性的名字都是独一无二的,相当于生成一个唯一的标识 ID,这样就从根本上防止属性名的冲突</p>\n<h1 id=\"Symbol-应用场景\"><a href=\"#Symbol-应用场景\" class=\"headerlink\" title=\"Symbol 应用场景\"></a>Symbol 应用场景</h1><h3 id=\"应用场景-1-使用Symbol来作为对象属性名-key\"><a href=\"#应用场景-1-使用Symbol来作为对象属性名-key\" class=\"headerlink\" title=\"应用场景 1-使用Symbol来作为对象属性名(key)\"></a>应用场景 1-使用<code>Symbol</code>来作为对象属性名(key)</h3><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> PERSON_NAME <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> PERSON_AGE <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>PERSON_NAME<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"随笔川迹\"</span>\n<span class=\"token punctuation\">}</span>\nperson<span class=\"token punctuation\">[</span>PERSON_AGE<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>  <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">[</span>PERSON_NAME<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\">// 随笔川迹</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">[</span>PERSON_AGE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\" spellcheck=\"true\">// 20</span>\n</code></pre>\n<p>在上面的示例代码中,使用<code>Symbol</code>创建了<code>PERSON_NAME</code>,<code>PERSON_AGE</code>两个<code>Symbol</code>类型,但是在实际开发中却带来了一些问题。<code>Symbol</code>类型实例化出的<code>key</code>是不能通过<code>Object.keys()</code>,<code>for..in</code>,<code>for..of</code>,来枚举的。<br>ES6中提供了 <code>Object.getOwnPropertySymbols()</code>方法,可以获取指定对象的所有<code>Symbol</code>属性名,该方法会返回一个数组</p>\n<h3 id=\"应用场景-2：使用-Symbol-定义类的私有属性-方法\"><a href=\"#应用场景-2：使用-Symbol-定义类的私有属性-方法\" class=\"headerlink\" title=\"应用场景 2：使用 Symbol 定义类的私有属性/方法\"></a>应用场景 2：使用 Symbol 定义类的私有属性/方法</h3><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> size <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'size'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 声明定义了一个size变量,类型是Symbol(),类型描述内容是size</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Collection</span> <span class=\"token punctuation\">{</span>          <span class=\"token comment\" spellcheck=\"true\">// class关键字定义了一个Collection类</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>           <span class=\"token comment\" spellcheck=\"true\">// 构造器`constructor`函数</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\" spellcheck=\"true\">// 在当前类上私有化了一个size属性</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>              <span class=\"token comment\" spellcheck=\"true\">// Collection类下的一个方法</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> item<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">sizeOf</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 静态属性</span>\n    <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Collection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 实例化x对象</span>\nCollection<span class=\"token punctuation\">.</span><span class=\"token function\">sizeOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 0</span>\n\nx<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\" spellcheck=\"true\">// 调用方法</span>\nCollection<span class=\"token punctuation\">.</span><span class=\"token function\">sizeOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 1</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// ['0']</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// ['0']</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertySymbols</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// [Symbol(size)]</span>\n</code></pre>\n<p>上面代码中，对象 <code>x</code> 的 <code>size</code> 属性是一个 <code>Symbol</code> 值，所以 <code>Object.keys(x)</code>、<code>Object.getOwnPropertyNames(x)</code>都无法获取它。这就造成了一种非私有的内部方法的效果</p>\n<h3 id=\"应用场景-3-模块化机制\"><a href=\"#应用场景-3-模块化机制\" class=\"headerlink\" title=\"应用场景 3-模块化机制\"></a>应用场景 3-模块化机制</h3><p>结合<code>Symbol</code>与模块化机制,类的私有属性和方法完美实现,如下代码所示 在文件<code>a.js</code>中</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> PASSWORD <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 定义一个PASSWORD变量,类型是Symbol</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>      <span class=\"token comment\" spellcheck=\"true\">// class关键字声明一个Login类</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    <span class=\"token comment\" spellcheck=\"true\">// 构造器函数内初始化属性</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> username<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>PASSWORD<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> password<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">checkPassword</span><span class=\"token punctuation\">(</span>pwd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>PASSWORD<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> pwd<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Login<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>在文件<code>b.js</code>中</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Login <span class=\"token keyword\">from</span> <span class=\"token string\">'./a'</span>\n\n<span class=\"token keyword\">const</span> login <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Login</span><span class=\"token punctuation\">(</span><span class=\"token string\">'itclanCoder'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 实例化一个login对象</span>\n\nlogin<span class=\"token punctuation\">.</span><span class=\"token function\">checkPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// true</span>\nlogin<span class=\"token punctuation\">.</span>PASSWORD<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 访问不到</span>\nlogin<span class=\"token punctuation\">[</span>PASSWORD<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 访问不到</span>\nlogin<span class=\"token punctuation\">[</span><span class=\"token string\">'PASSWORD'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\" spellcheck=\"true\">// 访问不到</span>\n</code></pre>\n<p>因为通过<code>Symbol</code>定义的<code>PASSWORD</code>常量定义在<code>a.js</code>模块中,外面的模块是获取不到这个<code>Symbol</code>的,在外部无法引用这个值,也无法改写,也不可能在在创建一个一模一样的<code>Symbol</code>出来</p>\n<p>因为<code>Symbol</code>是唯一的</p>\n<p>在<code>a.js</code>模块中,这个<code>PASSWORD</code>的<code>Symbol</code>类型只能在当前模块文件(<code>a.js</code>)中内部使用,所以使用它来定义的类属性是没有办法被模块外访问到的</p>\n<p>这样就达到了一个私有化的效果</p>\n<h3 id=\"应用场景-4-使用Symbol来替代常量\"><a href=\"#应用场景-4-使用Symbol来替代常量\" class=\"headerlink\" title=\"应用场景 4-使用Symbol来替代常量\"></a>应用场景 4-使用<code>Symbol</code>来替代常量</h3><p>在使用<code>React</code>中,结合<code>Redux</code>做公共数据状态管理时,当想要改变组件中的某个状态时,<code>reducer</code>是一个纯函数,它会返回一个最新的状态给<code>store</code>,返回的结果是由<code>action</code>和<code>state</code>共同决定的</p>\n<p><code>action</code>是一个对象,有具体的类型<code>type</code>值,如果你写过几行<code>Redux</code>的代码,就会常常看到,进行<code>action</code>的拆分,将事件动作的类型定义成常量</p>\n<pre class=\" language-js\"><code class=\"language-js\">\n<span class=\"token keyword\">const</span> CHANGE_INPUT_VALUE <span class=\"token operator\">=</span> <span class=\"token string\">'CHANGE_INPUT_VALUE'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 监听input框输入值的常量</span>\n<span class=\"token keyword\">const</span> ADD_INPUT_CONTENT <span class=\"token operator\">=</span> <span class=\"token string\">'ADD_INPUT_CONTENT'</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// 添加列表</span>\n<span class=\"token keyword\">const</span> DELETE_LIST <span class=\"token operator\">=</span> <span class=\"token string\">'DELETE_LIST'</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\" spellcheck=\"true\">// 删除列表</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> newState <span class=\"token operator\">=</span>  JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>JSON<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> CHANGE_INPUT_VALUE<span class=\"token punctuation\">:</span>\n      <span class=\"token comment\" spellcheck=\"true\">// ...</span>\n    <span class=\"token keyword\">case</span> ADD_INPUT_CONTENT<span class=\"token punctuation\">:</span>\n      <span class=\"token comment\" spellcheck=\"true\">// ...</span>\n    <span class=\"token keyword\">case</span> DELETE_LIST<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\" spellcheck=\"true\">// ...</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>以上代码在<code>Redux</code>中很常见,将<code>action</code>对象中的<code>type</code>值,给抽离出来,定义一个常量存储,来代表一种业务逻辑,通常希望这些常量是唯一的,在<code>Redux</code>中定义成常量,是为了便于调试查错</p>\n<p>常常因为取<code>type</code>值时,非常苦恼.</p>\n<p>现在有了<code>Symbol</code>,改写一下,就可以这样</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> CHANGE_INPUT_VALUE <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> ADD_INPUT_CONTENT <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> DELETE_LIST <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> newState <span class=\"token operator\">=</span>  JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>JSON<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> CHANGE_INPUT_VALUE<span class=\"token punctuation\">:</span>\n      <span class=\"token comment\" spellcheck=\"true\">// ...</span>\n    <span class=\"token keyword\">case</span> ADD_INPUT_CONTENT<span class=\"token punctuation\">:</span>\n      <span class=\"token comment\" spellcheck=\"true\">// ...</span>\n    <span class=\"token keyword\">case</span> DELETE_LIST<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\" spellcheck=\"true\">// ...</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>通过<code>Symbol</code>定义字符串常量,就保证了三个常量的值唯一性</p>\n<p><strong>划重点</strong></p>\n<ul>\n<li>常量使用<code>Symbol</code>值最大的好处,就是其他任何值都不可能有相同的值了,可以保证常量的唯一性,因此,可以保证上面的<code>switch</code>语句按照你设计的方式条件去工作</li>\n<li>当<code>Symbol</code>值作为属性名时,该属性是公开属性,不是私有属性</li>\n</ul>\n<h3 id=\"应用场景-5-注册和获取全局的-Symbol\"><a href=\"#应用场景-5-注册和获取全局的-Symbol\" class=\"headerlink\" title=\"应用场景 5-注册和获取全局的 Symbol\"></a>应用场景 5-注册和获取全局的 Symbol</h3><p>在浏览器窗口(<code>window</code>)中,使用<code>Symbol()</code>函数来定义生成的<code>Symbol</code>实例是唯一的</p>\n<p>但是若应用涉及到多个<code>window</code>,最常见的就是在各个页面窗口中嵌入<code>iframe</code>了,并在各个<code>iframe</code>页面中取到来自同一份公共的数据源</p>\n<p>也就是在各个<code>window</code>中使用的某些<code>Symbol</code>希望是同一个,那么这个时候,使用<code>Symbol()</code>就不行不通了</p>\n<p>因为用它在不同<code>window</code>中创建的<code>Symbol实例</code>总是唯一的，而我们需要的是在所有这些<code>window环境下</code>保持一个共享的<code>Symbol</code>值。</p>\n<p>在这种情况下，我们就需要使用另一个 API 来创建或获取<code>Symbol</code>，那就是<code>Symbol.for()</code>，它可以注册或获取一个<code>window</code>间全局的<code>Symbol实例</code>，它是<code>Symbol</code>的一个静态方法</p>\n<p>这个在前面已经提到过一次,这个还是有那么一点点用处,所以在提一嘴的</p>\n<p>如下示例代码所示</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> gs1 <span class=\"token operator\">=</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'global_symbol_1'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\">//注册一个全局Symbol</span>\n<span class=\"token keyword\">let</span> gs2 <span class=\"token operator\">=</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'global_symbol_1'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\">//获取全局Symbol</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gs1 <span class=\"token operator\">===</span> gs2 <span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// true</span>\n</code></pre>\n<p>经过<code>Symbol.for()</code>实例化出来的<code>Symbol</code>字符串类型,只要描述的内容相同,那么不光是在当前<code>window</code>中是唯一的,在其他全局范围内的<code>window</code>也是唯一的,并且相同</p>\n<p>该特性,若是创建跨文件可用的<code>symbol</code>，甚至跨域（每个<code>window</code>都有它自己的全局作用域） , 可以使用 <code>Symbol.for()</code>取到相同的值</p>\n<p>也就是说,使用了<code>Symbol.for()</code>在全局范围内,<code>Symbol</code>类型值可以共享</p>\n<h1 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h1><ul>\n<li><strong><code>Symbol</code> 值不能与其他类型的值进行运算-会报错</strong></li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> symItclan <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'itclan'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主站\"</span> <span class=\"token operator\">+</span> symItclan<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`主站 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>symItclan<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// Uncaught TypeError: Cannot convert a Symbol value to a string</span>\n</code></pre>\n<ul>\n<li><strong><code>Symbol</code>可以显示转为字符串</strong></li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> SyItclanCoder <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://coder.itclan.cn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>SyItclanCoder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// Symbol(https://coder.itclan.cn)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>SyItclanCoder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// Symbol(https://coder.itclan.cn)</span>\n</code></pre>\n<ul>\n<li><strong><code>Symbol</code>值可以转为布尔值,但是不能转为数值</strong></li>\n</ul>\n<pre class=\" language-scss\"><code class=\"language-scss\">let sym = <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token number\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>sym<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// true</span>\nconsole<span class=\"token number\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>!sym<span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\">// false</span>\n\nif <span class=\"token punctuation\">(</span>sym<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>sym<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// TypeError  Cannot convert a Symbol value to a number</span>\nsym <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token comment\" spellcheck=\"true\">// TypeError</span>\n</code></pre>\n<p>由上面的错误提示可以看出,<code>Symbol</code>不能转换为数字,无法做相应的运算</p>\n<ul>\n<li><strong><code>Symbol</code>函数不能使用<code>new</code>命令</strong></li>\n</ul>\n<p><code>Symbol</code>函数前不能使用<code>new</code>命令,否则就会报错,<code>Symbol</code>是一个原始类型的值,不是对象,它是类似字符串的数据类型</p>\n<ul>\n<li><strong><code>Symbol值</code>作为对象属性名时，不能用点运算符</strong></li>\n</ul>\n<p>当<code>Symbol</code>值作为对象的属性名时,访问它时,不能用点运算符</p>\n<pre class=\" language-ini\"><code class=\"language-ini\">const username <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> Symbol();</span>\nconst person <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> {};</span>\n<span class=\"token constant\">person.username</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> '随笔川迹';</span>\nperson[username]; // undefined\nperson['username']; // 随笔川迹\n</code></pre>\n<p>第 4 行代码值为<code>undefined</code>,因为点运算符后面总是字符串,所以不会读取<code>username</code>作为标识符名所指代的那个值</p>\n<p>导致<code>person</code>对象的属性名实际上是一个字符串,而不是一个<code>Symbol</code>值</p>\n<p>由此可见:在对象内部,使用<code>Symbol</code>类型定义属性名时,<strong><code>Symbol</code>值必须放在中括号之中</strong></p>\n<pre class=\" language-ini\"><code class=\"language-ini\">let s <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> Symbol();</span>\nlet obj <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> {</span>\n<span class=\"token selector\">  [s]</span>: function(arg) {\n    return arg;\n  }\n}\nobj[s](\"itclanCoder\")\n</code></pre>\n<p>在上面的代码中,如果变量<code>s</code>不放在中括号中,该属性的键名就是字符串<code>s</code>,而不是定义<code>Symbol</code>类型值</p>\n<p>参考：<a href=\"https://juejin.cn/post/6846687598249771022#heading-9\">《理解 Es6 中的 Symbol 类型》</a></p>\n<p><strong>ps：文末附上汇总文章链接<a href=\"https://kaleb.top/post/self-check-list\">《一名【合格】前端工程师的自检清单【自检ing】》</a></strong></p>\n","text":"前言在 Es6 中引入了一个新的基础数据类型:Symbol,对于其他基本数据类型(数字number,布尔boolean,null,undefined,字符串string)想必都比较熟悉,但是这个Symbol平时用得很少,甚至在实际开发中觉得没有什么卵用,能够涉及到的应用场景屈指可...","link":"","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[{"name":"前端","slug":"前端","count":17,"path":"api/categories/前端.json"},{"name":"自检清单","slug":"前端/自检清单","count":17,"path":"api/categories/前端/自检清单.json"},{"name":"JS","slug":"前端/自检清单/JS","count":13,"path":"api/categories/前端/自检清单/JS.json"}],"tags":[{"name":"前端","slug":"前端","count":17,"path":"api/tags/前端.json"},{"name":"自检清单","slug":"自检清单","count":17,"path":"api/tags/自检清单.json"},{"name":"JS","slug":"JS","count":13,"path":"api/tags/JS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">解决的问题</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Symbol-%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">Symbol 应用场景</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-1-%E4%BD%BF%E7%94%A8Symbol%E6%9D%A5%E4%BD%9C%E4%B8%BA%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E5%90%8D-key\"><span class=\"toc-text\">应用场景 1-使用Symbol来作为对象属性名(key)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-2%EF%BC%9A%E4%BD%BF%E7%94%A8-Symbol-%E5%AE%9A%E4%B9%89%E7%B1%BB%E7%9A%84%E7%A7%81%E6%9C%89%E5%B1%9E%E6%80%A7-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">应用场景 2：使用 Symbol 定义类的私有属性&#x2F;方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-3-%E6%A8%A1%E5%9D%97%E5%8C%96%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">应用场景 3-模块化机制</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-4-%E4%BD%BF%E7%94%A8Symbol%E6%9D%A5%E6%9B%BF%E4%BB%A3%E5%B8%B8%E9%87%8F\"><span class=\"toc-text\">应用场景 4-使用Symbol来替代常量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-5-%E6%B3%A8%E5%86%8C%E5%92%8C%E8%8E%B7%E5%8F%96%E5%85%A8%E5%B1%80%E7%9A%84-Symbol\"><span class=\"toc-text\">应用场景 5-注册和获取全局的 Symbol</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">注意事项</span></a></li></ol>","author":{"name":"手可摘星陈","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"人就是这样，喜欢什么，败给什么","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JavaScript中的变量在内存中的具体存储形式","uid":"205cdbee45bbacca672eccc7f03221f2","slug":"js-storageForm","date":"2023-02-15T09:27:34.000Z","updated":"2023-02-20T08:16:27.833Z","comments":true,"path":"api/articles/js-storageForm.json","keywords":null,"cover":[],"text":"栈内存和堆内存 JavaScript中的变量分为基本类型和引用类型 基本类型是保存在栈内存中的简单数据段，它们的值都有固定的大小，保存在栈空间，通过按值访问 引用类型是保存在堆内存中的对象，值大小不固定，栈内存中存放的该对象的访问地址指向堆内存中的对象，JavaScript不允许...","link":"","photos":[],"count_time":{"symbolsCount":218,"symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":17,"path":"api/categories/前端.json"},{"name":"自检清单","slug":"前端/自检清单","count":17,"path":"api/categories/前端/自检清单.json"},{"name":"JS","slug":"前端/自检清单/JS","count":13,"path":"api/categories/前端/自检清单/JS.json"}],"tags":[{"name":"前端","slug":"前端","count":17,"path":"api/tags/前端.json"},{"name":"自检清单","slug":"自检清单","count":17,"path":"api/tags/自检清单.json"},{"name":"JS","slug":"JS","count":13,"path":"api/tags/JS.json"}],"author":{"name":"手可摘星陈","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"人就是这样，喜欢什么，败给什么","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"JavaScript对象的底层数据结构是什么","uid":"54ad94266d02aab420ff03426bccde3c","slug":"js-data-structure","date":"2023-02-15T05:21:00.000Z","updated":"2023-02-20T08:16:14.793Z","comments":true,"path":"api/articles/js-data-structure.json","keywords":null,"cover":null,"text":"上一篇文章归纳了javascript的数据类型，归根到底数据类型就分为两类，一种是基本类型，一种是引用类型。文章链接《JavaScript规定了几种语言类型》 基本类型 内容：String、Number、Boolean、Undefined、Null、Symbol、BigInt 特...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"前端","slug":"前端","count":17,"path":"api/categories/前端.json"},{"name":"自检清单","slug":"前端/自检清单","count":17,"path":"api/categories/前端/自检清单.json"},{"name":"JS","slug":"前端/自检清单/JS","count":13,"path":"api/categories/前端/自检清单/JS.json"}],"tags":[{"name":"前端","slug":"前端","count":17,"path":"api/tags/前端.json"},{"name":"自检清单","slug":"自检清单","count":17,"path":"api/tags/自检清单.json"},{"name":"JS","slug":"JS","count":13,"path":"api/tags/JS.json"}],"author":{"name":"手可摘星陈","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"人就是这样，喜欢什么，败给什么","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}