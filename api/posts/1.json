{"total":25,"pageSize":12,"pageCount":3,"data":[{"title":"Vue双向绑定实现原理","uid":"07be3b41822070c0f7b1cc1f18b34bdb","slug":"vue-two-way-binding","date":"2023-02-22T09:11:15.000Z","updated":"2023-03-13T03:10:49.136Z","comments":true,"path":"api/articles/vue-two-way-binding.json","cover":[],"text":"前言原文：vue 的双向绑定原理及实现 使用 vue 也好有一段时间了，虽然对其双向绑定原理也有了解个大概，但也没好好探究下其原理实现，所以这次特意花了几晚时间查阅资料和阅读相关源码，自己也实现一个简单版 vue 的双向绑定版本，先上个成果图来吸引各位： 代码： 效果图： 是不是...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"前端","slug":"前端","count":17,"path":"api/categories/前端.json"},{"name":"自检清单","slug":"前端/自检清单","count":17,"path":"api/categories/前端/自检清单.json"},{"name":"Vue","slug":"前端/自检清单/Vue","count":3,"path":"api/categories/前端/自检清单/Vue.json"}],"tags":[{"name":"前端","slug":"前端","count":17,"path":"api/tags/前端.json"},{"name":"自检清单","slug":"自检清单","count":17,"path":"api/tags/自检清单.json"},{"name":"Vue","slug":"Vue","count":5,"path":"api/tags/Vue.json"}],"author":{"name":"手可摘星陈","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"人就是这样，喜欢什么，败给什么","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"描述new一个对象的详细过程，手动实现一个new操作符","uid":"1bcb72c46f3db03b6d18568be7cdb3be","slug":"new-operator","date":"2023-02-22T08:47:43.000Z","updated":"2023-02-22T07:03:05.106Z","comments":true,"path":"api/articles/new-operator.json","cover":null,"text":"定义 new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例。 (MDN) 操作 创建一个空的简单JavaScript对象（即{}）； 链接该对象（即设置该对象的构造函数）到另一个对象 ； 将步骤1新创建的对象作为this的上下文 ； 如果该函数没有返回对象...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":17,"path":"api/categories/前端.json"},{"name":"自检清单","slug":"前端/自检清单","count":17,"path":"api/categories/前端/自检清单.json"},{"name":"JS","slug":"前端/自检清单/JS","count":13,"path":"api/categories/前端/自检清单/JS.json"}],"tags":[{"name":"前端","slug":"前端","count":17,"path":"api/tags/前端.json"},{"name":"自检清单","slug":"自检清单","count":17,"path":"api/tags/自检清单.json"},{"name":"JS","slug":"JS","count":13,"path":"api/tags/JS.json"}],"author":{"name":"手可摘星陈","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"人就是这样，喜欢什么，败给什么","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"一名【合格】前端工程师的自检清单【自检ing】","uid":"a9932dfc783681953ee77924badfcfab","slug":"self-check-list","date":"2023-02-14T02:15:00.000Z","updated":"2023-02-22T09:02:51.282Z","comments":true,"path":"api/articles/self-check-list.json","cover":[],"text":"前言感谢原作者提供这样一份优秀的自检清单，写这篇的文章的主要目的是按照清单上的知识检测自己还有哪些不足和提升，同时建立自己的知识体系原文章地址: 一名【合格】前端工程师的自检清单 一、JavaScript基础 前端工程师吃饭的家伙，深度、广度一样都不能差。 变量和类型 1.Jav...","link":"","photos":[],"count_time":{"symbolsCount":794,"symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":17,"path":"api/categories/前端.json"},{"name":"自检清单","slug":"前端/自检清单","count":17,"path":"api/categories/前端/自检清单.json"}],"tags":[{"name":"前端","slug":"前端","count":17,"path":"api/tags/前端.json"},{"name":"自检清单","slug":"自检清单","count":17,"path":"api/tags/自检清单.json"}],"author":{"name":"手可摘星陈","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"人就是这样，喜欢什么，败给什么","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"实现继承的几种方式以及他们的优缺点","uid":"adfd6df2d42caf12c71977a2781bb441","slug":"inherit","date":"2023-02-22T07:33:20.000Z","updated":"2023-02-22T06:36:02.682Z","comments":true,"path":"api/articles/inherit.json","cover":null,"text":"原文：《JS实现继承的几种方法总结》 一、基本代码首先定义一个父类： //构造函数 function Animal(name) { this.name = name || 'Animal'; this.sleep = function() { console.log(this.n...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"前端","slug":"前端","count":17,"path":"api/categories/前端.json"},{"name":"自检清单","slug":"前端/自检清单","count":17,"path":"api/categories/前端/自检清单.json"},{"name":"JS","slug":"前端/自检清单/JS","count":13,"path":"api/categories/前端/自检清单/JS.json"}],"tags":[{"name":"前端","slug":"前端","count":17,"path":"api/tags/前端.json"},{"name":"自检清单","slug":"自检清单","count":17,"path":"api/tags/自检清单.json"},{"name":"JS","slug":"JS","count":13,"path":"api/tags/JS.json"}],"author":{"name":"手可摘星陈","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"人就是这样，喜欢什么，败给什么","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"instanceof的底层实现原理，手动实现一个instanceof","uid":"16a4b519aa491c4cff8a204db9c74eba","slug":"instanceof-realize","date":"2023-02-22T06:09:55.000Z","updated":"2023-02-22T06:10:00.093Z","comments":true,"path":"api/articles/instanceof-realize.json","cover":null,"text":"instanceof 的作用 引用数据类型判断： 用来判断一个引用数据类型是否属于构造函数 继承关系判断： 用来判断一个实例是否属于它的父类型 实现原理 首先判断左边的变量的隐式原型(proto)是否全等于右边的显式原型(prototype)，如果相等返回true，如果不等则沿着...","link":"","photos":[],"count_time":{"symbolsCount":509,"symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":17,"path":"api/categories/前端.json"},{"name":"自检清单","slug":"前端/自检清单","count":17,"path":"api/categories/前端/自检清单.json"},{"name":"JS","slug":"前端/自检清单/JS","count":13,"path":"api/categories/前端/自检清单/JS.json"}],"tags":[{"name":"前端","slug":"前端","count":17,"path":"api/tags/前端.json"},{"name":"自检清单","slug":"自检清单","count":17,"path":"api/tags/自检清单.json"},{"name":"JS","slug":"JS","count":13,"path":"api/tags/JS.json"}],"author":{"name":"手可摘星陈","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"人就是这样，喜欢什么，败给什么","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Vue的API、生命周期、钩子函数","uid":"3d0e05ad397f90d89d1de00301c0be95","slug":"vue-api","date":"2023-02-21T03:41:36.000Z","updated":"2023-02-21T03:41:44.132Z","comments":true,"path":"api/articles/vue-api.json","cover":[],"text":"API具体详情进：Vue API 常用的如： `// console.log(vm.$root);` `vm.$root``//实例对象` `vm.$el``//根元素（真实的DOM元素）` `// console.log(vm.$el);` `vm.$el.innerHTML`...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":17,"path":"api/categories/前端.json"},{"name":"自检清单","slug":"前端/自检清单","count":17,"path":"api/categories/前端/自检清单.json"},{"name":"Vue","slug":"前端/自检清单/Vue","count":3,"path":"api/categories/前端/自检清单/Vue.json"}],"tags":[{"name":"前端","slug":"前端","count":17,"path":"api/tags/前端.json"},{"name":"自检清单","slug":"自检清单","count":17,"path":"api/tags/自检清单.json"},{"name":"Vue","slug":"Vue","count":5,"path":"api/tags/Vue.json"}],"author":{"name":"手可摘星陈","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"人就是这样，喜欢什么，败给什么","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"MVVM框架设计理念","uid":"72e4b58e2d3b566d6790462e8f45cacc","slug":"mvvm-design-concept","date":"2023-02-21T03:09:01.000Z","updated":"2023-02-21T03:09:53.794Z","comments":true,"path":"api/articles/mvvm-design-concept.json","cover":[],"text":"前言目前比较流行的几个框架，例如vue.js、react.js、avalon、angular.js等，给自己的定位都是属于mvvm类型框架，那么什么是mvvm框架呢？mvvm是什么意思呢？ 聊到mvvm就要提一下java语言中的mvc模式，所以我们想来看下什么是mvc。 MVC概...","link":"","photos":[],"count_time":{"symbolsCount":676,"symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":17,"path":"api/categories/前端.json"},{"name":"自检清单","slug":"前端/自检清单","count":17,"path":"api/categories/前端/自检清单.json"},{"name":"Vue","slug":"前端/自检清单/Vue","count":3,"path":"api/categories/前端/自检清单/Vue.json"}],"tags":[{"name":"前端","slug":"前端","count":17,"path":"api/tags/前端.json"},{"name":"自检清单","slug":"自检清单","count":17,"path":"api/tags/自检清单.json"},{"name":"Vue","slug":"Vue","count":5,"path":"api/tags/Vue.json"}],"author":{"name":"手可摘星陈","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"人就是这样，喜欢什么，败给什么","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"理解原型设计模式以及JavaScript中的原型规则","uid":"9c0e46ac234b95fe1f1741ca7e4e7d0c","slug":"prototype-rules","date":"2023-02-20T08:10:45.000Z","updated":"2023-03-13T02:49:25.709Z","comments":true,"path":"api/articles/prototype-rules.json","cover":[],"text":"原型规则原型规则所有的引用类型（数组、对象、函数），都具有对象特征，即可自由扩展属性； var arr = []; arr.a =1; 所有的引用类型都有对象的特性，即可自由扩展 所有的引用类型都有一个_proto_属性（隐式原型），属性的值是一个普通对象 所有函数，都具有一个p...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"前端","slug":"前端","count":17,"path":"api/categories/前端.json"},{"name":"自检清单","slug":"前端/自检清单","count":17,"path":"api/categories/前端/自检清单.json"},{"name":"JS","slug":"前端/自检清单/JS","count":13,"path":"api/categories/前端/自检清单/JS.json"}],"tags":[{"name":"前端","slug":"前端","count":17,"path":"api/tags/前端.json"},{"name":"自检清单","slug":"自检清单","count":17,"path":"api/tags/自检清单.json"},{"name":"JS","slug":"JS","count":13,"path":"api/tags/JS.json"}],"author":{"name":"手可摘星陈","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"人就是这样，喜欢什么，败给什么","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"出现小数精度丢失的原因，JavaScript可以存储的最大数字、最大安全数字，JavaScript处理大数字的方法、避免精度丢失的方法","uid":"97ef40e42114f03cdf27cd3432d76d80","slug":"loss-of-precision","date":"2023-02-17T09:17:28.000Z","updated":"2023-02-20T08:16:35.162Z","comments":true,"path":"api/articles/loss-of-precision.json","cover":null,"text":"一个经典的面试题 0.1 + 0.2 === 0.3 // false 精度丢失原因计算机是通过二进制的方式存储数据的，所以计算机计算0.1+0.2的时候，实际上是计算的两个数的二进制的和。 0.1的二进制是0.0001100110011001100...（1100循环），0.2...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"前端","slug":"前端","count":17,"path":"api/categories/前端.json"},{"name":"自检清单","slug":"前端/自检清单","count":17,"path":"api/categories/前端/自检清单.json"},{"name":"JS","slug":"前端/自检清单/JS","count":13,"path":"api/categories/前端/自检清单/JS.json"}],"tags":[{"name":"前端","slug":"前端","count":17,"path":"api/tags/前端.json"},{"name":"自检清单","slug":"自检清单","count":17,"path":"api/tags/自检清单.json"},{"name":"JS","slug":"JS","count":13,"path":"api/tags/JS.json"}],"author":{"name":"手可摘星陈","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"人就是这样，喜欢什么，败给什么","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"可能发生隐式类型转换的场景以及转换原则，应如何避免或巧妙应用","uid":"8df75aa3038e84f242f016eb70dbbb6a","slug":"implicit-type","date":"2023-02-17T03:46:34.000Z","updated":"2023-02-20T08:16:21.710Z","comments":true,"path":"api/articles/implicit-type.json","cover":null,"text":"数值转换有三个函数可以将非数值转换为数值：Number()、parseInt()、parseFloat()。Number()是转型函数，可用于任何数据类型。后两个函数主要用于将字符串转换为数值。 隐式类型转换 涉及类型转换最多的两个运算符是+和==。+可以是字符串相加，也可以是数...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"前端","slug":"前端","count":17,"path":"api/categories/前端.json"},{"name":"自检清单","slug":"前端/自检清单","count":17,"path":"api/categories/前端/自检清单.json"},{"name":"JS","slug":"前端/自检清单/JS","count":13,"path":"api/categories/前端/自检清单/JS.json"}],"tags":[{"name":"前端","slug":"前端","count":17,"path":"api/tags/前端.json"},{"name":"自检清单","slug":"自检清单","count":17,"path":"api/tags/自检清单.json"},{"name":"JS","slug":"JS","count":13,"path":"api/tags/JS.json"}],"author":{"name":"手可摘星陈","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"人就是这样，喜欢什么，败给什么","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"至少可以说出三种判断JavaScript数据类型的方式，以及他们的优缺点，如何准确的判断数组类型","uid":"3aa48ecd1d5414b4b0af011d9171a628","slug":"judgment-type-method","date":"2023-02-16T08:53:16.000Z","updated":"2023-02-20T08:16:30.745Z","comments":true,"path":"api/articles/judgment-type-method.json","cover":[],"text":"我们先复习一下js的数据类型。 JavaScript 的数据类型包括原始类型和对象类型： 原始类型：Null、Undefined、Number、String、Boolean、Symbol、BigInt 对象类型：Object 我们习惯把对象称为引用类型，当然还有很多特殊的引用类型...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"前端","slug":"前端","count":17,"path":"api/categories/前端.json"},{"name":"自检清单","slug":"前端/自检清单","count":17,"path":"api/categories/前端/自检清单.json"},{"name":"JS","slug":"前端/自检清单/JS","count":13,"path":"api/categories/前端/自检清单/JS.json"}],"tags":[{"name":"前端","slug":"前端","count":17,"path":"api/tags/前端.json"},{"name":"自检清单","slug":"自检清单","count":17,"path":"api/tags/自检清单.json"},{"name":"JS","slug":"JS","count":13,"path":"api/tags/JS.json"}],"author":{"name":"手可摘星陈","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"人就是这样，喜欢什么，败给什么","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"null和undefined的区别","uid":"448cccd8063bd5883f40c05f4e533fff","slug":"null-undefined-diff","date":"2023-02-16T04:30:00.000Z","updated":"2023-02-20T08:16:39.194Z","comments":true,"path":"api/articles/null-undefined-diff.json","cover":null,"text":"undefinedundefined 的字面意思就是：未定义的值 。这个值的语义是，希望表示一个变量最原始的状态，而非人为操作的结果 。 这种原始状态会在以下 4 种场景中出现： 声明一个变量，但是没有赋var foo; console.log(foo); // undefine...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":17,"path":"api/categories/前端.json"},{"name":"自检清单","slug":"前端/自检清单","count":17,"path":"api/categories/前端/自检清单.json"},{"name":"JS","slug":"前端/自检清单/JS","count":13,"path":"api/categories/前端/自检清单/JS.json"}],"tags":[{"name":"前端","slug":"前端","count":17,"path":"api/tags/前端.json"},{"name":"自检清单","slug":"自检清单","count":17,"path":"api/tags/自检清单.json"},{"name":"JS","slug":"JS","count":13,"path":"api/tags/JS.json"}],"author":{"name":"手可摘星陈","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"人就是这样，喜欢什么，败给什么","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}