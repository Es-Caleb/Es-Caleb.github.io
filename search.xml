<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>vue3 使用 百度地图</title>
    <url>//post/evr2ba.html</url>
    <content><![CDATA[<h1 id="Vue3-使用-百度地图的报错的问题"><a href="#Vue3-使用-百度地图的报错的问题" class="headerlink" title="Vue3 使用 百度地图的报错的问题"></a>Vue3 使用 百度地图的报错的问题</h1><p><strong>vue3 项目中使用百度地图总是报错 BMap is not defined.</strong></p>
<h3 id="public-index-html-中加入"><a href="#public-index-html-中加入" class="headerlink" title="public/index.html 中加入"></a>public/index.html 中加入</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script
  type<span class="token operator">=</span><span class="token string">"text/javascript"</span>
  src<span class="token operator">=</span><span class="token string">"http://api.map.baidu.com/api?v=3.0&amp;ak=你的ak"</span>
<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="eslintrc-js-中加入"><a href="#eslintrc-js-中加入" class="headerlink" title=".eslintrc.js 中加入"></a>.eslintrc.js 中加入</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token operator">...</span><span class="token punctuation">,</span>
  globals<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
     BMap<span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="vue-config-js-中加入"><a href="#vue-config-js-中加入" class="headerlink" title="vue.config.js 中加入"></a>vue.config.js 中加入</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
   <span class="token operator">...</span><span class="token punctuation">,</span>
   configureWebpack<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      externals<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token string">"BMap"</span><span class="token operator">:</span> <span class="token string">"BMap"</span>
      <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="重新运行项目"><a href="#重新运行项目" class="headerlink" title="重新运行项目"></a>重新运行项目</h3><p>在组件中添加 import BMap from ‘BMap’</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BMap<span class="token punctuation">.</span>Map</span><span class="token punctuation">(</span><span class="token string">"map"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> point <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BMap<span class="token punctuation">.</span>Point</span><span class="token punctuation">(</span><span class="token number">116.404</span><span class="token punctuation">,</span> <span class="token number">39.915</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  map<span class="token punctuation">.</span><span class="token function">centerAndZoom</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  map<span class="token punctuation">.</span><span class="token function">addControl</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BMap<span class="token punctuation">.</span>NavigationControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="如果为-TS"><a href="#如果为-TS" class="headerlink" title="如果为 TS"></a>如果为 TS</h2><p>import BMap from ‘BMap’报错</p>
<h3 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h3><h4 id="在-src-下新建文件-shims-BMap-d-ts-内容为"><a href="#在-src-下新建文件-shims-BMap-d-ts-内容为" class="headerlink" title="在 src 下新建文件 shims-BMap.d.ts 内容为"></a>在 src 下新建文件 shims-BMap.d.ts 内容为</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">declare module <span class="token string">'BMap'</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> BMap<span class="token operator">:</span> any
  <span class="token keyword">export</span> <span class="token keyword">default</span> BMap
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="参考取自："><a href="#参考取自：" class="headerlink" title="参考取自："></a>参考取自：</h1><p><a href="https://blog.csdn.net/lingwueryao/article/details/115391530"><strong>vue3 使用百度地图</strong></a></p>
]]></content>
      <categories>
        <category>问题记录</category>
      </categories>
      <tags>
        <tag>vue3</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue水平卡片式轮播</title>
    <url>//post/gwcyel.html</url>
    <content><![CDATA[<h1 id="vue-水平卡片式轮播"><a href="#vue-水平卡片式轮播" class="headerlink" title="vue 水平卡片式轮播"></a>vue 水平卡片式轮播</h1><h2 id="基于-vue3-ts-开发的"><a href="#基于-vue3-ts-开发的" class="headerlink" title="基于 vue3 + ts 开发的"></a>基于 vue3 + ts 开发的</h2><p><img src="https://i.loli.net/2021/08/17/O4IPu3Nc9XmYdeK.jpg#id=Ei7oT&originHeight=426&originWidth=997&originalType=binary&ratio=1&status=done&style=none"></p>
<hr>
<p><strong>项目需要完成如上图的轮播，这是水平卡片式轮播。我的项目是基于 vue3+ts 开发的，我使用 swiper 来完成该轮播开发。具体代码如下文</strong></p>
<hr>
<h3 id="首先安装-swiper"><a href="#首先安装-swiper" class="headerlink" title="首先安装 swiper"></a>首先安装 swiper</h3><pre class="line-numbers language-none"><code class="language-none">npm install swiper --save
&#x2F;&#x2F; or
yarn add swiper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="html-代码"><a href="#html-代码" class="headerlink" title="html 代码"></a>html 代码</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>examples<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bannerBox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-container swiper3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
              <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-slide<span class="token punctuation">"</span></span>
              <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, index) in banner<span class="token punctuation">"</span></span>
              <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span>
            <span class="token punctuation">></span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.picture_path<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-pagination<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-button-prev swiper-button-white<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-button-next swiper-button-white<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="javascript-代码"><a href="#javascript-代码" class="headerlink" title="javascript 代码"></a>javascript 代码</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token comment">// 有部分没用到你们可以不引用</span>
<span class="token keyword">import</span> Swiper<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Autoplay<span class="token punctuation">,</span> EffectCoverflow<span class="token punctuation">,</span> EffectCube<span class="token punctuation">,</span> Pagination<span class="token punctuation">,</span> Navigation <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'swiper'</span><span class="token punctuation">;</span>
Swiper<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">[</span>Autoplay<span class="token punctuation">,</span> EffectCoverflow<span class="token punctuation">,</span> EffectCube<span class="token punctuation">,</span> Pagination<span class="token punctuation">,</span> Navigation<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">'swiper/swiper.min.css'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">'swiper/components/navigation/navigation.scss'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">'swiper/components/pagination/pagination.scss'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      bannerIndex<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      banner<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
          picture_path<span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../assets/home/home_bg.png'</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span>
          picture_path<span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../assets/home/lunbo.png'</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span>
          picture_path<span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../assets/home/home_bg2.png'</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> mySwiper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Swiper</span><span class="token punctuation">(</span><span class="token string">'.swiper3'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
      direction<span class="token operator">:</span> <span class="token string">'horizontal'</span><span class="token punctuation">,</span> <span class="token comment">//滑动方向，可设置水平(horizontal)或垂直(vertical)。</span>
      loop<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 设置为true 则开启loop模式</span>
      autoplay<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 自动切换时间</span>
      speed<span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token comment">// 切换速度</span>
      slidesPerView<span class="token operator">:</span> <span class="token string">'auto'</span><span class="token punctuation">,</span> <span class="token comment">// 设置slider容器能够同时显示的slides数量(carousel模式)。类型：number or auto</span>
      centeredSlides<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 设定为true时，active slide会居中，而不是默认状态下的居左。</span>
      spaceBetween<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment">// 在slide之间设置距离（单位px）。</span>
      loopAdditionaSlider<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// loop模式下会在slides前后复制若干个slide,，前后复制的个数不会大于原总个数。</span>
      navigation<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        nextEl<span class="token operator">:</span> <span class="token string">'.swiper-button-next'</span><span class="token punctuation">,</span>
        prevEl<span class="token operator">:</span> <span class="token string">'.swiper-button-prev'</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      pagination<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        el<span class="token operator">:</span> <span class="token string">'.swiper-pagination'</span><span class="token punctuation">,</span>
        type<span class="token operator">:</span> <span class="token string">'fraction'</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="css-代码"><a href="#css-代码" class="headerlink" title="css 代码"></a>css 代码</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style lang="scss" scoped>
.examples</span><span class="token punctuation">&#123;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.bannerTxt</span><span class="token punctuation">&#123;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>
  <span class="token property">line-height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #666666<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.bannerIndex</span><span class="token punctuation">&#123;</span>
  <span class="token property">line-height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #666666<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token selector">span</span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #b5654d<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.bannerBox</span><span class="token punctuation">&#123;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 490px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.swiper3</span> <span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.swiper3 .swiper-wrapper .swiper-slide</span> <span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 940px <span class="token important">!important</span><span class="token punctuation">;</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">margin-right</span><span class="token punctuation">:</span> 20px <span class="token important">!important</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.swiper3 .swiper-wrapper .swiper-slide img</span> <span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 490px<span class="token punctuation">;</span>
  <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.swiper3 .swiper-wrapper .swiper-slide-prev,.swiper3 .swiper-wrapper .swiper-slide-next</span><span class="token punctuation">&#123;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 490px <span class="token important">!important</span><span class="token punctuation">;</span>
  <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>
  // <span class="token property">margin-top</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.swiper3 .swiper-wrapper .swiper-slide-prev img,.swiper3 .swiper-wrapper .swiper-slide-next img</span><span class="token punctuation">&#123;</span>
  <span class="token property">opacity</span><span class="token punctuation">:</span>0.6<span class="token punctuation">;</span> <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">alpha</span><span class="token punctuation">(</span>opacity=60<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.swiper3 .swiper-pagination</span> <span class="token punctuation">&#123;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>swiper6</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu 部署jenkins</title>
    <url>//post/dhm7uz.html</url>
    <content><![CDATA[<h1 id="服务器部署-jenkins"><a href="#服务器部署-jenkins" class="headerlink" title="服务器部署 jenkins"></a>服务器部署 jenkins</h1><h2 id="jenkinsci-blueocean-安装"><a href="#jenkinsci-blueocean-安装" class="headerlink" title="jenkinsci/blueocean 安装"></a>jenkinsci/blueocean 安装</h2><p><code>docker pull jenkinsci/blueocean</code></p>
<h2 id="doker-部署-jenkins"><a href="#doker-部署-jenkins" class="headerlink" title="doker 部署 jenkins"></a>doker 部署 jenkins</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d -u root --name jenkins -p <span class="token number">8080</span>:8080 -p <span class="token number">50000</span>:50000 -v /data/jenkins_home:/var/jenkins_home jenkinsci/blueocean:lts

docker run -d -u root --name jenkins -p <span class="token number">8080</span>:8080 -p <span class="token number">50000</span>:50000 -v /workspace/data/jenkins:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock -v /etc/timezone:/etc/timezone -v /etc/localtime:/etc/localtime jenkinsci/blueocean:1.25.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="查看-Jenkins-启动情况"><a href="#查看-Jenkins-启动情况" class="headerlink" title="查看 Jenkins 启动情况"></a>查看 Jenkins 启动情况</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看启动项</span>
docker <span class="token function">ps</span>
<span class="token comment"># 查看全部</span>
docker <span class="token function">ps</span> -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="Jenkins-容器-docker-run-之后状态-Exited"><a href="#Jenkins-容器-docker-run-之后状态-Exited" class="headerlink" title="Jenkins 容器 docker run 之后状态 Exited"></a>Jenkins 容器 docker run 之后状态 Exited</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看docker日志 ：</span>
docker logs jenkins
发现是目前权限问题
因为/data/jenkins_home 目录是root权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> -R <span class="token number">1000</span> /data/jenkins_home //用户组改变<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="Jenkins-首次登录需要密码"><a href="#Jenkins-首次登录需要密码" class="headerlink" title="Jenkins 首次登录需要密码"></a>Jenkins 首次登录需要密码</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 进入容器
docker <span class="token builtin class-name">exec</span> -it de20d10b6046（容器id） <span class="token function">bash</span>
<span class="token function">cat</span> /var/jenkins_home/secrets/initialAdminPassword //查看密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h1 id="jenkins-部署项目"><a href="#jenkins-部署项目" class="headerlink" title="jenkins 部署项目"></a>jenkins 部署项目</h1><h2 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h2><h3 id="进入容器-创建-ssh-证书-连接寄主机"><a href="#进入容器-创建-ssh-证书-连接寄主机" class="headerlink" title="进入容器 创建 ssh 证书 连接寄主机"></a>进入容器 创建 ssh 证书 连接寄主机</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生成证书</span>
ssh-keygen -t rsa -C <span class="token string">"kingpi@163.com"</span> -f ~/.ssh/host-rsa
<span class="token comment"># 进入.ssh</span>
<span class="token builtin class-name">cd</span> ~/.ssh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="添加-config"><a href="#添加-config" class="headerlink" title="添加 config"></a>添加 config</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Host <span class="token number">172.17</span>.0.1（寄主机docker ip）
  HostName <span class="token number">172.17</span>.0.1
  User root
  PreferredAuthentications publickey
  IdentityFile ~/.ssh/host-rsa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="寄主机进入-ssh"><a href="#寄主机进入-ssh" class="headerlink" title="寄主机进入 ~/.ssh"></a>寄主机进入 ~/.ssh</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/.ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="进入文件-authorizedkeys"><a href="#进入文件-authorizedkeys" class="headerlink" title="进入文件 authorizedkeys"></a>进入文件 authorized<em>keys</em></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> authorized_keys
<span class="token comment"># 输入 上面创建的 连接寄主机 ssh证书公钥</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="jenkins-添加-节点"><a href="#jenkins-添加-节点" class="headerlink" title="jenkins 添加 节点"></a>jenkins 添加 节点</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12843443/1639905060247-d3efccf6-07ce-4c0a-a0c5-18ec83675637.png#clientId=u984dde43-e76a-4&from=paste&height=827&id=u55e900d0&name=image.png&originHeight=1654&originWidth=1500&originalType=binary&ratio=1&rotation=0&showTitle=false&size=201536&status=done&style=none&taskId=ue16f108e-3a9b-49df-bcd6-08e50d0d147&title=&width=750" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/12843443/1639148328357-e4a2e1fc-dfe2-44c0-9f91-7ce1b52c4250.png#clientId=uf90b85fc-dc9a-4&from=drop&id=u78cce22e&name=WeChatb3c23b7241c04b4d5134e43d23656cf8.png&originHeight=2848&originWidth=2456&originalType=binary&ratio=1&rotation=0&showTitle=false&size=687327&status=done&style=none&taskId=u6f0019ae-dea2-4eae-af76-3fbf9c2f624&title=" alt="WeChatb3c23b7241c04b4d5134e43d23656cf8.png"></p>
<h2 id="jenkins-容器内创建连接-github-证书"><a href="#jenkins-容器内创建连接-github-证书" class="headerlink" title="jenkins 容器内创建连接 github 证书"></a>jenkins 容器内创建连接 github 证书</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"kingpi@163.com"</span> -f ~/.ssh/github.com
<span class="token comment"># config 添加host</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="jenkins-添加凭证-如上面-图"><a href="#jenkins-添加凭证-如上面-图" class="headerlink" title="jenkins 添加凭证 如上面 图"></a>jenkins 添加凭证 如上面 图</h3><h2 id="连接远程服务器"><a href="#连接远程服务器" class="headerlink" title="连接远程服务器"></a>连接远程服务器</h2><h3 id="jenkins-容器内创建证书"><a href="#jenkins-容器内创建证书" class="headerlink" title="jenkins 容器内创建证书"></a>jenkins 容器内创建证书</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"kingpi@163.com"</span> -m PEM -P <span class="token string">""</span> -f ~/.ssh/yooleap.net
<span class="token comment"># config 添加host</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="jenkins-系统配置配置服务器信息-添加上私钥"><a href="#jenkins-系统配置配置服务器信息-添加上私钥" class="headerlink" title="jenkins 系统配置配置服务器信息 添加上私钥"></a>jenkins 系统配置配置服务器信息 添加上私钥</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12843443/1639905151450-e9034ac2-81fb-428b-b6f6-36978883d693.png#clientId=u984dde43-e76a-4&from=paste&height=499&id=u4481f8db&name=image.png&originHeight=998&originWidth=1182&originalType=binary&ratio=1&rotation=0&showTitle=false&size=117393&status=done&style=none&taskId=uda1e8286-f585-45a9-bff9-86651c4b5fd&title=&width=591" alt="image.png"></p>
<h3 id="遇到的问题-1"><a href="#遇到的问题-1" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 连接服务器测试报错</span>
jenkins.plugins.publish_over.BapPublisherException: Failed to <span class="token function">add</span> SSH key. Message <span class="token punctuation">[</span>invalid privatekey: <span class="token punctuation">[</span>B@59df330d<span class="token punctuation">]</span>_

<span class="token comment"># 解决方法</span>
<span class="token function">ssh</span> openSSH 版本过高 改用RSA
ssh-keygen -t rsa -C <span class="token string">"kingpi@163.com"</span> -m PEM -P <span class="token string">""</span> -f ~/.ssh/yooleap.net<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>jenkins部署</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript对象的底层数据结构是什么</title>
    <url>//post/js-data-structure.html</url>
    <content><![CDATA[<p>上一篇文章归纳了<code>javascript</code>的数据类型，归根到底数据类型就分为两类，一种是基本类型，一种是引用类型。文章链接《JavaScript规定了几种语言类型》</p>
<h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><ul>
<li>内容：<code>String</code>、<code>Number</code>、<code>Boolean</code>、<code>Undefined</code>、<code>Null</code>、<code>Symbol</code>、<code>BigInt</code></li>
<li>特点：值不可变，无属性无方法，保存在栈内存中、值比较。</li>
</ul>
<h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><ul>
<li>内容：引用类型统称为Object类型。细分的话有：<code>Object</code>、<code>Array</code>、<code>Date</code>、<code>RegExp</code>、<code>Function</code>  等特点：引用类型的值同时保存在栈内存和堆内存中的对象。栈区内存保存变量标识符，堆内存存储对象的地址</li>
</ul>
<h2 id="什么是数据结构？"><a href="#什么是数据结构？" class="headerlink" title="什么是数据结构？"></a>什么是数据结构？</h2><p>数据结构是<strong>一种组织、管理和存储数据的形式</strong>，这种形式<strong>方便数据访问和修改</strong>。</p>
<h3 id="JavaScript使用的是-堆-Heap-和-栈-Stack"><a href="#JavaScript使用的是-堆-Heap-和-栈-Stack" class="headerlink" title="JavaScript使用的是 堆(Heap) 和 栈( Stack)"></a>JavaScript使用的是 堆(Heap) 和 栈( Stack)</h3><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><ul>
<li><p>是堆内存的简称，堆是动态分配内存，内存大小不固定，也不会自动释放</p>
</li>
<li><p>队列优先,先进先出，方便存储和开辟内存空间。</p>
</li>
</ul>
<h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><ul>
<li>栈内存的简称，自动分配相对固定大小的内存空间，并由系统自动释放。</li>
<li>基本类型存储在栈内存的好处就是，内存可以及时得到回收，相对于堆来说，更加容易管理内存空间</li>
<li>线性结构，后进先出，便于管理。</li>
</ul>
<h3 id="数据结构相关-—-浅拷贝、深拷贝"><a href="#数据结构相关-—-浅拷贝、深拷贝" class="headerlink" title="数据结构相关 — 浅拷贝、深拷贝"></a>数据结构相关 — 浅拷贝、深拷贝</h3><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><p>创建新的数据，这个数据有着原始数据属性值的一份精确拷贝</p>
<p>浅拷贝是拷贝一层，深层次的引用类型则共享内存地址</p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>浅拷贝实现方法：</p>
<ul>
<li>Object.assign</li>
<li>slice()</li>
<li>concat()</li>
<li>拓展运算符 …</li>
</ul></blockquote>
<h5 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    nature<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'smart'</span><span class="token punctuation">,</span> <span class="token string">'good'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    names<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        name1<span class="token operator">:</span> <span class="token string">'fx'</span><span class="token punctuation">,</span>
        name2<span class="token operator">:</span> <span class="token string">'xka'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">love</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fx is a great girl'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> newObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> fxArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"One"</span><span class="token punctuation">,</span> <span class="token string">"Two"</span><span class="token punctuation">,</span> <span class="token string">"Three"</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> fxArrs <span class="token operator">=</span> fxArr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
fxArrs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"love"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fxArr<span class="token punctuation">)</span> <span class="token comment">// ["One", "Two", "Three"]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fxArrs<span class="token punctuation">)</span> <span class="token comment">// ["One", "love", "Three"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> fxArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"One"</span><span class="token punctuation">,</span> <span class="token string">"Two"</span><span class="token punctuation">,</span> <span class="token string">"Three"</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> fxArrs <span class="token operator">=</span> fxArr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
fxArrs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"love"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fxArr<span class="token punctuation">)</span> <span class="token comment">// ["One", "Two", "Three"]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fxArrs<span class="token punctuation">)</span> <span class="token comment">// ["One", "love", "Three"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="拓展运算符-…"><a href="#拓展运算符-…" class="headerlink" title="拓展运算符 …"></a>拓展运算符 …</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js">onst fxArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"One"</span><span class="token punctuation">,</span> <span class="token string">"Two"</span><span class="token punctuation">,</span> <span class="token string">"Three"</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> fxArrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>fxArr<span class="token punctuation">]</span>
fxArrs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"love"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fxArr<span class="token punctuation">)</span> <span class="token comment">// ["One", "Two", "Three"]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fxArrs<span class="token punctuation">)</span> <span class="token comment">// ["One", "love", "Three"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><p>深拷贝开辟一个新的栈，两个对象属完成相同，但是对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性</p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>  实现方法：</p>
<ul>
<li>_.cloneDeep()</li>
<li>jQuery.extend()</li>
<li>JSON.stringify()</li>
<li>手写循环递归</li>
</ul></blockquote>
<h5 id="cloneDeep"><a href="#cloneDeep" class="headerlink" title="_.cloneDeep()"></a>_.cloneDeep()</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'lodash'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    b<span class="token operator">:</span> <span class="token punctuation">&#123;</span> f<span class="token operator">:</span> <span class="token punctuation">&#123;</span> g<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    c<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">cloneDeep</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f <span class="token operator">===</span> obj2<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="jQuery-extend"><a href="#jQuery-extend" class="headerlink" title="jQuery.extend()"></a>jQuery.extend()</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> $ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jquery'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    b<span class="token operator">:</span> <span class="token punctuation">&#123;</span> f<span class="token operator">:</span> <span class="token punctuation">&#123;</span> g<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    c<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f <span class="token operator">===</span> obj2<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify()"></a>JSON.stringify()</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> obj2<span class="token operator">=</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 但是这种方式存在弊端，会忽略undefined、symbol和函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h5 id="手写循环递归"><a href="#手写循环递归" class="headerlink" title="手写循环递归"></a>手写循环递归</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span> <span class="token comment">// 如果是null或者undefined我就不进行拷贝操作</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 可能是对象或者普通的值  如果是函数的话是不需要深拷贝</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
  <span class="token comment">// 是对象的话就要进行深拷贝</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> hash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> cloneObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">obj<span class="token punctuation">.</span>constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 找到的是所属类原型上的constructor,而原型上的 constructor指向的是当前类本身</span>
  hash<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> cloneObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 实现一个递归拷贝</span>
      cloneObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> cloneObj<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>ps：文末附上汇总文章链接<a href="https://kaleb.top/post/self-check-list">《一名【合格】前端工程师的自检清单【自检ing】》</a></strong></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>自检清单</category>
        <category>JS</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>自检清单</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript规定了几种语言类型</title>
    <url>//post/js-specThe-langType.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JavaScript是什么？这里引用<a href="https://baike.baidu.com/item/JavaScript">百度百科</a>的说法</p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>JavaScript（简称“JS”） 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。虽然它是作为开发Web页面的脚本语言而出名，但是它也被用到了很多非浏览器环境中，JavaScript 基于原型编程、多范式的动态脚本语言，并且支持面向对象、命令式、声明式、函数式编程范式。</p></blockquote>
<h2 id="语言类型"><a href="#语言类型" class="headerlink" title="语言类型"></a>语言类型</h2><p><strong>ps：检测数据类型的操作符</strong><code>typeof</code></p>
<h3 id="Boolean：布尔值，true或者false，表示逻辑上的真和假【基本类型】"><a href="#Boolean：布尔值，true或者false，表示逻辑上的真和假【基本类型】" class="headerlink" title="Boolean：布尔值，true或者false，表示逻辑上的真和假【基本类型】"></a>Boolean：布尔值，true或者false，表示逻辑上的真和假【基本类型】</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> a<span class="token punctuation">;</span>    <span class="token comment">// 'boolean'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="number：数字【基本类型】"><a href="#number：数字【基本类型】" class="headerlink" title="number：数字【基本类型】"></a>number：数字【基本类型】</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 数字类型，最大2^53 - 1，即 9007199254740991，大于这个值可能会失去精度</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">9007199254740991</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">90071992547409911</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">NaN</span><span class="token punctuation">;</span>    <span class="token comment">// NaN是特殊的number类型</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 9007199254740991</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 90071992547409900 失去精度</span>
<span class="token keyword">typeof</span> a<span class="token punctuation">;</span>    <span class="token comment">// 'number'</span>
<span class="token keyword">typeof</span> c<span class="token punctuation">;</span>    <span class="token comment">// 'number'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="string：字符串【基本类型】"><a href="#string：字符串【基本类型】" class="headerlink" title="string：字符串【基本类型】"></a>string：字符串【基本类型】</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 字符串类型</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'aaa'</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> a<span class="token punctuation">;</span>    <span class="token comment">// 'string'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="undefined：未定义【基本类型】"><a href="#undefined：未定义【基本类型】" class="headerlink" title="undefined：未定义【基本类型】"></a>undefined：未定义【基本类型】</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 声明了但未定义值</span>
<span class="token keyword">let</span> a<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token keyword">typeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'undefined'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="null：空值【基本类型】"><a href="#null：空值【基本类型】" class="headerlink" title="null：空值【基本类型】"></a>null：空值【基本类型】</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 空值</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> a<span class="token punctuation">;</span>    <span class="token comment">// object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>ps: 虽然<code>typeof null</code>为<code>object</code>，但这只是<code>JavaScript</code> 存在的一个悠久 <code>Bug</code>，不代表<code>null</code>就是引用数据类型，并且<code>null</code>本身也不是对象</strong></p>
<h3 id="symbol：-独一无二的值【基本类型】"><a href="#symbol：-独一无二的值【基本类型】" class="headerlink" title="symbol： 独一无二的值【基本类型】"></a>symbol： 独一无二的值【基本类型】</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 独一无二的值</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> a<span class="token punctuation">;</span>    <span class="token comment">// symbol</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>ps: ES6 引入了一种新的原始数据类型<code>Symbol</code>，表示独一无二的值。<code>Symbol</code>类型实例化出的<code>key</code>是不能通过<code>Object.keys()</code>,<code>for..in</code>,<code>for..of</code>,来枚举的</strong></p>
<h3 id="BigInt-大整数【基本类型】"><a href="#BigInt-大整数【基本类型】" class="headerlink" title="BigInt: 大整数【基本类型】"></a>BigInt: 大整数【基本类型】</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 要创建 a `BigInt`，请将 n 附加到整数末尾或调用 BigInt()</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">999n</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> a<span class="token punctuation">;</span>    <span class="token comment">// 'bigint'</span>
<span class="token keyword">typeof</span> b<span class="token punctuation">;</span>    <span class="token comment">// 'bigint'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>ps: <code>BigInt</code>目前已经进入Stage 4阶段 下一个版本将会作为新特性出现在ECMAScript 。<code>BigInt</code>是JavaScript中一种可以用来表示任意精度整数的基本数据类型。使用<code>BigInt</code>可以安全的存储和操作任意大小的整数而不受<code>Number</code>类型的安全值范围的限制</strong></p>
<h3 id="object：对象，包含array-date等【引用类型】"><a href="#object：对象，包含array-date等【引用类型】" class="headerlink" title="object：对象，包含array,date等【引用类型】"></a>object：对象，包含array,date等【引用类型】</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> a<span class="token punctuation">;</span>    <span class="token comment">// 'object'</span>
<span class="token keyword">typeof</span> b<span class="token punctuation">;</span>    <span class="token comment">// 'object'</span>
<span class="token keyword">typeof</span> c<span class="token punctuation">;</span>    <span class="token comment">// 'object'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>ps：文末附上汇总文章链接《<a href="https://kaleb.top/post/self-check-list">一名【合格】前端工程师的自检清单【自检ing】</a>》</strong></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>自检清单</category>
        <category>JS</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>自检清单</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>vue相关问题合集</title>
    <url>//post/hhwazy.html</url>
    <content><![CDATA[<h1 id="vue2-和-vue3-router-更改-hash-模式"><a href="#vue2-和-vue3-router-更改-hash-模式" class="headerlink" title="vue2 和 vue3 router 更改 hash 模式"></a>vue2 和 vue3 router 更改 hash 模式</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>项目部署到线上之后，发现刷新页面之后会 404，所以我们需要将 router 的模式从 history 换成 hash</p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>项目采用了 vue3+ts 框架</p></blockquote>
<h2 id="vue2"><a href="#vue2" class="headerlink" title="vue2"></a>vue2</h2><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  mode<span class="token operator">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span>
  routes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  mode<span class="token operator">:</span> <span class="token string">'hash'</span><span class="token punctuation">,</span>  <span class="token comment">//或者把这句话注释，默认就是hash</span>
  routes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h2><h3 id="history-1"><a href="#history-1" class="headerlink" title="history"></a>history</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 引入 createWebHistory</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  history<span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_URL</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  routes<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="hash-1"><a href="#hash-1" class="headerlink" title="hash"></a>hash</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 引入 createWebHashHistory</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createRouter<span class="token punctuation">,</span> createWebHashHistory <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  history<span class="token operator">:</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  routes<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="vue-遮罩层禁止滚动"><a href="#vue-遮罩层禁止滚动" class="headerlink" title="vue 遮罩层禁止滚动"></a>vue 遮罩层禁止滚动</h1><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>在遮罩层 div 添加 @touchmove.prevent @mousewheel.prevent</p></blockquote>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>pc 端禁止遮罩层滚动</p></blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//停止页面滚动</span>
<span class="token function">stopMove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">let</span> <span class="token function-variable function">m</span> <span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>overflow<span class="token operator">=</span><span class="token string">'hidden'</span><span class="token punctuation">;</span>
	document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"touchmove"</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//禁止页面滑动</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

<span class="token comment">//开启页面滚动</span>
<span class="token function">Move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">let</span> <span class="token function-variable function">m</span> <span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>overflow<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span><span class="token comment">//出现滚动条</span>
	document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"touchmove"</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="Syntax-Error-Error-Node-Sass-does-not-yet-support-your-current-environment-OS-X-64-bit-with-Unsupported-runtime-102"><a href="#Syntax-Error-Error-Node-Sass-does-not-yet-support-your-current-environment-OS-X-64-bit-with-Unsupported-runtime-102" class="headerlink" title="Syntax Error: Error: Node Sass does not yet support your current environment: OS X 64-bit with Unsupported runtime (102)"></a>Syntax Error: Error: Node Sass does not yet support your current environment: OS X 64-bit with Unsupported runtime (102)</h1><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>遇到问题：</p>
<ol>
<li>Syntax Error: Error: Node Sass does not yet support your current environment: OS X 64-bit with Unsupported runtime (102)</li>
<li>Node Sass 7.0.0 版本与^4.0.0 不兼容</li>
</ol></blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 解决方法
使用sass 卸载node-sass
<span class="token number">1</span>. 使用npm
 // 卸载
 <span class="token function">npm</span> uninstall node-sass
 // 安装sass
 <span class="token function">npm</span> i -D sass
<span class="token number">2</span>. 使用yarn
 // 卸载
 <span class="token function">yarn</span> remove node-sass
 // 安装sass
 <span class="token function">yarn</span> <span class="token function">add</span> -D sass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="在使用-yarn-安装依赖包时报错，提示信息：error-An-unexpected-error-occurred-“https-registry-yarnpkg-com-killable-killable-1-0-0-tgz-connect-ETIMEDOUT-104-16-19-35-443”"><a href="#在使用-yarn-安装依赖包时报错，提示信息：error-An-unexpected-error-occurred-“https-registry-yarnpkg-com-killable-killable-1-0-0-tgz-connect-ETIMEDOUT-104-16-19-35-443”" class="headerlink" title="在使用 yarn 安装依赖包时报错，提示信息：error An unexpected error occurred: “https://registry.yarnpkg.com/killable/-/killable-1.0.0.tgz: connect ETIMEDOUT 104.16.19.35:443”"></a>在使用 yarn 安装依赖包时报错，提示信息：error An unexpected error occurred: “<a href="https://registry.yarnpkg.com/killable/-/killable-1.0.0.tgz">https://registry.yarnpkg.com/killable/-/killable-1.0.0.tgz</a>: connect ETIMEDOUT 104.16.19.35:443”</h1><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a><strong>解决方案：</strong></h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>运行命令，把资源地址设置成 npm 淘宝源</p></blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org
<span class="token function">npm</span> config <span class="token builtin class-name">set</span> disturl https://npm.taobao.org/dist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>问题记录</category>
      </categories>
      <tags>
        <tag>vue3</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>element-plus修改主题色</title>
    <url>//post/ual5ig.html</url>
    <content><![CDATA[<h1 id="先安装-vite-构建工具"><a href="#先安装-vite-构建工具" class="headerlink" title="先安装 vite 构建工具"></a>先安装 vite 构建工具</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 先安装 vite 构建工具</span>
<span class="token function">npm</span> <span class="token function">install</span> -g create-vite-app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="创建项目："><a href="#创建项目：" class="headerlink" title="创建项目："></a>创建项目：</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下面两个命令都可以</span>
create-vite-app vue3-demo
cva vue3-demo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h1 id="按照官网修改主题色"><a href="#按照官网修改主题色" class="headerlink" title="按照官网修改主题色"></a>按照官网修改主题色</h1><p><a href="https://element-plus.gitee.io/zh-CN/guide/installation.html#%E4%BD%BF%E7%94%A8%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8"><strong>官网</strong></a><br><strong>我选择的是通过 scss 修改主题色</strong><br><strong>例子参照：</strong><a href="https://github.com/element-plus/element-plus-vite-starter"><strong>element-plus-vite-starter</strong></a></p>
<h2 id="创建-index-scss-文件"><a href="#创建-index-scss-文件" class="headerlink" title="创建 index.scss 文件"></a>创建 index.scss 文件</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"># ./styles/element/index.scss
$<span class="token property">--colors</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
  <span class="token string">"primary"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
    <span class="token string">"base"</span><span class="token punctuation">:</span> #ee4444<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token string">"success"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
    <span class="token string">"base"</span><span class="token punctuation">:</span> #21ba45<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token string">"warning"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
    <span class="token string">"base"</span><span class="token punctuation">:</span> #f2711c<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token string">"danger"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
    <span class="token string">"base"</span><span class="token punctuation">:</span> #db2828<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token string">"error"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
    <span class="token string">"base"</span><span class="token punctuation">:</span> #db2828<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token string">"info"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
    <span class="token string">"base"</span><span class="token punctuation">:</span> #42b8dd<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token atrule"><span class="token rule">@forward</span> <span class="token string">"element-plus/theme-chalk/src/common/var.scss"</span> with
  <span class="token punctuation">(</span>
    // do <span class="token keyword">not</span> use same name<span class="token punctuation">,</span> it will override.
    $<span class="token property">colors</span><span class="token punctuation">:</span> $--colors<span class="token punctuation">,</span>
    $<span class="token property">button-padding-horizontal</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">"default"</span><span class="token punctuation">:</span> 50px<span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="vue-config-ts-代码如下"><a href="#vue-config-ts-代码如下" class="headerlink" title="vue.config.ts 代码如下"></a>vue.config.ts 代码如下</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">"path"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineConfig <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vite"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">"@vitejs/plugin-vue"</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> Components <span class="token keyword">from</span> <span class="token string">"unplugin-vue-components/vite"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ElementPlusResolver <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"unplugin-vue-components/resolvers"</span><span class="token punctuation">;</span>

<span class="token comment">// https://vitejs.dev/config/</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  resolve<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    alias<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token string">"~/"</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  css<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    preprocessorOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      scss<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        additionalData<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">@use "~/styles/element/index.scss" as *;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">Components</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      resolvers<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token function">ElementPlusResolver</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
          importStyle<span class="token operator">:</span> <span class="token string">"sass"</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue3</tag>
        <tag>vue</tag>
        <tag>element-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>Symbol类型在实际开发中的应用、可手动实现一个简单的Symbol</title>
    <url>//post/symbol-devAndapp.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在 Es6 中引入了一个新的基础数据类型:<code>Symbol</code>,对于其他基本数据类型(<code>数字number</code>,<code>布尔boolean</code>,<code>null</code>,<code>undefined</code>,<code>字符串string</code>)想必都比较熟悉,但是这个<code>Symbol</code>平时用得很少,甚至在实际开发中觉得没有什么卵用,能够涉及到的应用场景屈指可数.</p>
<h1 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h1><p>在 Es5 的对象属性名中都是字符串,当一对象的属性名出现重复时,后者往往会覆盖前者.<br>若使用<code>Symbol</code>就能够保证每个属性的名字都是独一无二的,相当于生成一个唯一的标识 ID,这样就从根本上防止属性名的冲突</p>
<h1 id="Symbol-应用场景"><a href="#Symbol-应用场景" class="headerlink" title="Symbol 应用场景"></a>Symbol 应用场景</h1><h3 id="应用场景-1-使用Symbol来作为对象属性名-key"><a href="#应用场景-1-使用Symbol来作为对象属性名-key" class="headerlink" title="应用场景 1-使用Symbol来作为对象属性名(key)"></a>应用场景 1-使用<code>Symbol</code>来作为对象属性名(key)</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token constant">PERSON_NAME</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">PERSON_AGE</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">[</span><span class="token constant">PERSON_NAME</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">"随笔川迹"</span>
<span class="token punctuation">&#125;</span>
person<span class="token punctuation">[</span><span class="token constant">PERSON_AGE</span><span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token number">20</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">[</span><span class="token constant">PERSON_NAME</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 随笔川迹</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">[</span><span class="token constant">PERSON_AGE</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">// 20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在上面的示例代码中,使用<code>Symbol</code>创建了<code>PERSON_NAME</code>,<code>PERSON_AGE</code>两个<code>Symbol</code>类型,但是在实际开发中却带来了一些问题。<code>Symbol</code>类型实例化出的<code>key</code>是不能通过<code>Object.keys()</code>,<code>for..in</code>,<code>for..of</code>,来枚举的。<br>ES6中提供了 <code>Object.getOwnPropertySymbols()</code>方法,可以获取指定对象的所有<code>Symbol</code>属性名,该方法会返回一个数组</p>
<h3 id="应用场景-2：使用-Symbol-定义类的私有属性-方法"><a href="#应用场景-2：使用-Symbol-定义类的私有属性-方法" class="headerlink" title="应用场景 2：使用 Symbol 定义类的私有属性/方法"></a>应用场景 2：使用 Symbol 定义类的私有属性/方法</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> size <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'size'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 声明定义了一个size变量,类型是Symbol(),类型描述内容是size</span>

<span class="token keyword">class</span> <span class="token class-name">Collection</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// class关键字定义了一个Collection类</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token comment">// 构造器`constructor`函数</span>
    <span class="token keyword">this</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token comment">// 在当前类上私有化了一个size属性</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token comment">// Collection类下的一个方法</span>
    <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">static</span> <span class="token function">sizeOf</span><span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 静态属性</span>
    <span class="token keyword">return</span> instance<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Collection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 实例化x对象</span>
Collection<span class="token punctuation">.</span><span class="token function">sizeOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// 0</span>

x<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 调用方法</span>
Collection<span class="token punctuation">.</span><span class="token function">sizeOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// 1</span>

Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// ['0']</span>
Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// ['0']</span>
Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// [Symbol(size)]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面代码中，对象 <code>x</code> 的 <code>size</code> 属性是一个 <code>Symbol</code> 值，所以 <code>Object.keys(x)</code>、<code>Object.getOwnPropertyNames(x)</code>都无法获取它。这就造成了一种非私有的内部方法的效果</p>
<h3 id="应用场景-3-模块化机制"><a href="#应用场景-3-模块化机制" class="headerlink" title="应用场景 3-模块化机制"></a>应用场景 3-模块化机制</h3><p>结合<code>Symbol</code>与模块化机制,类的私有属性和方法完美实现,如下代码所示 在文件<code>a.js</code>中</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token constant">PASSWORD</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 定义一个PASSWORD变量,类型是Symbol</span>

<span class="token keyword">class</span> <span class="token class-name">Login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// class关键字声明一个Login类</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">username<span class="token punctuation">,</span> password</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 构造器函数内初始化属性</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">PASSWORD</span><span class="token punctuation">]</span> <span class="token operator">=</span> password<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">checkPassword</span><span class="token punctuation">(</span><span class="token parameter">pwd</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">PASSWORD</span><span class="token punctuation">]</span> <span class="token operator">===</span> pwd<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> Login<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在文件<code>b.js</code>中</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Login <span class="token keyword">from</span> <span class="token string">'./a'</span>

<span class="token keyword">const</span> login <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Login</span><span class="token punctuation">(</span><span class="token string">'itclanCoder'</span><span class="token punctuation">,</span> <span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 实例化一个login对象</span>

login<span class="token punctuation">.</span><span class="token function">checkPassword</span><span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
login<span class="token punctuation">.</span><span class="token constant">PASSWORD</span><span class="token punctuation">;</span>  <span class="token comment">// 访问不到</span>
login<span class="token punctuation">[</span><span class="token constant">PASSWORD</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 访问不到</span>
login<span class="token punctuation">[</span><span class="token string">'PASSWORD'</span><span class="token punctuation">]</span> <span class="token comment">// 访问不到</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>因为通过<code>Symbol</code>定义的<code>PASSWORD</code>常量定义在<code>a.js</code>模块中,外面的模块是获取不到这个<code>Symbol</code>的,在外部无法引用这个值,也无法改写,也不可能在在创建一个一模一样的<code>Symbol</code>出来</p>
<p>因为<code>Symbol</code>是唯一的</p>
<p>在<code>a.js</code>模块中,这个<code>PASSWORD</code>的<code>Symbol</code>类型只能在当前模块文件(<code>a.js</code>)中内部使用,所以使用它来定义的类属性是没有办法被模块外访问到的</p>
<p>这样就达到了一个私有化的效果</p>
<h3 id="应用场景-4-使用Symbol来替代常量"><a href="#应用场景-4-使用Symbol来替代常量" class="headerlink" title="应用场景 4-使用Symbol来替代常量"></a>应用场景 4-使用<code>Symbol</code>来替代常量</h3><p>在使用<code>React</code>中,结合<code>Redux</code>做公共数据状态管理时,当想要改变组件中的某个状态时,<code>reducer</code>是一个纯函数,它会返回一个最新的状态给<code>store</code>,返回的结果是由<code>action</code>和<code>state</code>共同决定的</p>
<p><code>action</code>是一个对象,有具体的类型<code>type</code>值,如果你写过几行<code>Redux</code>的代码,就会常常看到,进行<code>action</code>的拆分,将事件动作的类型定义成常量</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">
<span class="token keyword">const</span> <span class="token constant">CHANGE_INPUT_VALUE</span> <span class="token operator">=</span> <span class="token string">'CHANGE_INPUT_VALUE'</span><span class="token punctuation">;</span>  <span class="token comment">// 监听input框输入值的常量</span>
<span class="token keyword">const</span> <span class="token constant">ADD_INPUT_CONTENT</span> <span class="token operator">=</span> <span class="token string">'ADD_INPUT_CONTENT'</span><span class="token punctuation">;</span>    <span class="token comment">// 添加列表</span>
<span class="token keyword">const</span> <span class="token constant">DELETE_LIST</span> <span class="token operator">=</span> <span class="token string">'DELETE_LIST'</span><span class="token punctuation">;</span>                <span class="token comment">// 删除列表</span>

<span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> newState <span class="token operator">=</span>  <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">switch</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> <span class="token constant">CHANGE_INPUT_VALUE</span><span class="token operator">:</span>
      <span class="token comment">// ...</span>
    <span class="token keyword">case</span> <span class="token constant">ADD_INPUT_CONTENT</span><span class="token operator">:</span>
      <span class="token comment">// ...</span>
    <span class="token keyword">case</span> <span class="token constant">DELETE_LIST</span><span class="token punctuation">;</span>
      <span class="token comment">// ...</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> state<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以上代码在<code>Redux</code>中很常见,将<code>action</code>对象中的<code>type</code>值,给抽离出来,定义一个常量存储,来代表一种业务逻辑,通常希望这些常量是唯一的,在<code>Redux</code>中定义成常量,是为了便于调试查错</p>
<p>常常因为取<code>type</code>值时,非常苦恼.</p>
<p>现在有了<code>Symbol</code>,改写一下,就可以这样</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token constant">CHANGE_INPUT_VALUE</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token constant">ADD_INPUT_CONTENT</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">DELETE_LIST</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> newState <span class="token operator">=</span>  <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">switch</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> <span class="token constant">CHANGE_INPUT_VALUE</span><span class="token operator">:</span>
      <span class="token comment">// ...</span>
    <span class="token keyword">case</span> <span class="token constant">ADD_INPUT_CONTENT</span><span class="token operator">:</span>
      <span class="token comment">// ...</span>
    <span class="token keyword">case</span> <span class="token constant">DELETE_LIST</span><span class="token punctuation">;</span>
      <span class="token comment">// ...</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> state<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过<code>Symbol</code>定义字符串常量,就保证了三个常量的值唯一性</p>
<p><strong>划重点</strong></p>
<ul>
<li>常量使用<code>Symbol</code>值最大的好处,就是其他任何值都不可能有相同的值了,可以保证常量的唯一性,因此,可以保证上面的<code>switch</code>语句按照你设计的方式条件去工作</li>
<li>当<code>Symbol</code>值作为属性名时,该属性是公开属性,不是私有属性</li>
</ul>
<h3 id="应用场景-5-注册和获取全局的-Symbol"><a href="#应用场景-5-注册和获取全局的-Symbol" class="headerlink" title="应用场景 5-注册和获取全局的 Symbol"></a>应用场景 5-注册和获取全局的 Symbol</h3><p>在浏览器窗口(<code>window</code>)中,使用<code>Symbol()</code>函数来定义生成的<code>Symbol</code>实例是唯一的</p>
<p>但是若应用涉及到多个<code>window</code>,最常见的就是在各个页面窗口中嵌入<code>iframe</code>了,并在各个<code>iframe</code>页面中取到来自同一份公共的数据源</p>
<p>也就是在各个<code>window</code>中使用的某些<code>Symbol</code>希望是同一个,那么这个时候,使用<code>Symbol()</code>就不行不通了</p>
<p>因为用它在不同<code>window</code>中创建的<code>Symbol实例</code>总是唯一的，而我们需要的是在所有这些<code>window环境下</code>保持一个共享的<code>Symbol</code>值。</p>
<p>在这种情况下，我们就需要使用另一个 API 来创建或获取<code>Symbol</code>，那就是<code>Symbol.for()</code>，它可以注册或获取一个<code>window</code>间全局的<code>Symbol实例</code>，它是<code>Symbol</code>的一个静态方法</p>
<p>这个在前面已经提到过一次,这个还是有那么一点点用处,所以在提一嘴的</p>
<p>如下示例代码所示</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> gs1 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">'global_symbol_1'</span><span class="token punctuation">)</span>  <span class="token comment">//注册一个全局Symbol</span>
<span class="token keyword">let</span> gs2 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">'global_symbol_1'</span><span class="token punctuation">)</span>  <span class="token comment">//获取全局Symbol</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gs1 <span class="token operator">===</span> gs2 <span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>经过<code>Symbol.for()</code>实例化出来的<code>Symbol</code>字符串类型,只要描述的内容相同,那么不光是在当前<code>window</code>中是唯一的,在其他全局范围内的<code>window</code>也是唯一的,并且相同</p>
<p>该特性,若是创建跨文件可用的<code>symbol</code>，甚至跨域（每个<code>window</code>都有它自己的全局作用域） , 可以使用 <code>Symbol.for()</code>取到相同的值</p>
<p>也就是说,使用了<code>Symbol.for()</code>在全局范围内,<code>Symbol</code>类型值可以共享</p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul>
<li><strong><code>Symbol</code> 值不能与其他类型的值进行运算-会报错</strong></li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> symItclan <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'itclan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"主站"</span> <span class="token operator">+</span> symItclan<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">主站 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>symItclan<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token comment">// Uncaught TypeError: Cannot convert a Symbol value to a string</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><strong><code>Symbol</code>可以显示转为字符串</strong></li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> SyItclanCoder <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'https://coder.itclan.cn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>SyItclanCoder<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Symbol(https://coder.itclan.cn)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>SyItclanCoder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Symbol(https://coder.itclan.cn)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><strong><code>Symbol</code>值可以转为布尔值,但是不能转为数值</strong></li>
</ul>
<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss">let sym = <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console.<span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span>sym<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console.<span class="token function">log</span><span class="token punctuation">(</span>!sym<span class="token punctuation">)</span>  <span class="token comment">// false</span>

if <span class="token punctuation">(</span>sym<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token function">Number</span><span class="token punctuation">(</span>sym<span class="token punctuation">)</span> <span class="token comment">// TypeError  Cannot convert a Symbol value to a number</span>
sym <span class="token operator">+</span> 2 <span class="token comment">// TypeError</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>由上面的错误提示可以看出,<code>Symbol</code>不能转换为数字,无法做相应的运算</p>
<ul>
<li><strong><code>Symbol</code>函数不能使用<code>new</code>命令</strong></li>
</ul>
<p><code>Symbol</code>函数前不能使用<code>new</code>命令,否则就会报错,<code>Symbol</code>是一个原始类型的值,不是对象,它是类似字符串的数据类型</p>
<ul>
<li><strong><code>Symbol值</code>作为对象属性名时，不能用点运算符</strong></li>
</ul>
<p>当<code>Symbol</code>值作为对象的属性名时,访问它时,不能用点运算符</p>
<pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token key attr-name">const username</span> <span class="token punctuation">=</span> <span class="token value attr-value">Symbol();</span>
<span class="token key attr-name">const person</span> <span class="token punctuation">=</span> <span class="token value attr-value">&#123;&#125;;</span>
<span class="token key attr-name">person.username</span> <span class="token punctuation">=</span> <span class="token value attr-value">'随笔川迹';</span>
person[username]; // undefined
person['username']; // 随笔川迹<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>第 4 行代码值为<code>undefined</code>,因为点运算符后面总是字符串,所以不会读取<code>username</code>作为标识符名所指代的那个值</p>
<p>导致<code>person</code>对象的属性名实际上是一个字符串,而不是一个<code>Symbol</code>值</p>
<p>由此可见:在对象内部,使用<code>Symbol</code>类型定义属性名时,<strong><code>Symbol</code>值必须放在中括号之中</strong></p>
<pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token key attr-name">let s</span> <span class="token punctuation">=</span> <span class="token value attr-value">Symbol();</span>
<span class="token key attr-name">let obj</span> <span class="token punctuation">=</span> <span class="token value attr-value">&#123;</span>
  <span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">s</span><span class="token punctuation">]</span></span>: function(arg) &#123;
    return arg;
  &#125;
&#125;
obj[s]("itclanCoder")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在上面的代码中,如果变量<code>s</code>不放在中括号中,该属性的键名就是字符串<code>s</code>,而不是定义<code>Symbol</code>类型值</p>
<p>参考：<a href="https://juejin.cn/post/6846687598249771022#heading-9">《理解 Es6 中的 Symbol 类型》</a></p>
<p><strong>ps：文末附上汇总文章链接<a href="https://kaleb.top/post/self-check-list">《一名【合格】前端工程师的自检清单【自检ing】》</a></strong></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>自检清单</category>
        <category>JS</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>自检清单</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>swiper在loop模式下获取当前下标</title>
    <url>//post/wv1yf2.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>项目需要根据轮播来改变对应背景和文字，所以需要获取当前轮播的下标。<br>轮播是 水平卡片式轮播，教程在前文 <a href="https://kaleb.top/2021/07/20/gwcyel/">vue 水平卡片式轮播</a></p></blockquote>
<h1 id="loop-下-swiper6-获取当前轮播下标"><a href="#loop-下-swiper6-获取当前轮播下标" class="headerlink" title="loop 下 swiper6 获取当前轮播下标"></a>loop 下 swiper6 获取当前轮播下标</h1><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>获取下标方式： this.activeIndex % length<br>// 当前下标除以数组长度取余</p></blockquote>
<h3 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Swiper</span><span class="token punctuation">(</span><span class="token string">".swiper3"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  direction<span class="token operator">:</span> <span class="token string">"horizontal"</span><span class="token punctuation">,</span> <span class="token comment">//滑动方向，可设置水平(horizontal)或垂直(vertical)。</span>
  loop<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 设置为true 则开启loop模式</span>
  slidesPerView<span class="token operator">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span> <span class="token comment">// 设置slider容器能够同时显示的slides数量(carousel模式)。类型：number or auto</span>
  centeredSlides<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 设定为true时，active slide会居中，而不是默认状态下的居左。</span>
  spaceBetween<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token comment">// 在slide之间设置距离（单位px）。</span>
  autoplay<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 设置为false，用户操作swiper之后自动切换不会停止</span>
    disableOnInteraction<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  navigation<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    nextEl<span class="token operator">:</span> <span class="token string">".swiper-button-next"</span><span class="token punctuation">,</span>
    prevEl<span class="token operator">:</span> <span class="token string">".swiper-button-prev"</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  on<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// eslint-disable-next-line space-before-function-paren</span>
    <span class="token function-variable function">slideChangeTransitionStart</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      state<span class="token punctuation">.</span>swiperIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>activeIndex <span class="token operator">%</span> state<span class="token punctuation">.</span>swiperList<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>问题记录</category>
      </categories>
      <tags>
        <tag>vue3</tag>
        <tag>swiper6</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx配置</title>
    <url>//post/xu9t5l.html</url>
    <content><![CDATA[<h1 id="服务器-nginx-配置"><a href="#服务器-nginx-配置" class="headerlink" title="服务器 nginx 配置"></a>服务器 nginx 配置</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">一般目录地址：
/etc/nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="nginx-conf-配置示例"><a href="#nginx-conf-配置示例" class="headerlink" title="nginx.conf 配置示例"></a>nginx.conf 配置示例</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># For more information on configuration, see:</span>
<span class="token comment">#   * Official English Documentation: http://nginx.org/en/docs/</span>
<span class="token comment">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span>

user www-data<span class="token punctuation">;</span>
worker_processes auto<span class="token punctuation">;</span>
worker_rlimit_nofile <span class="token number">65535</span><span class="token punctuation">;</span>
error_log /var/log/nginx/error.log<span class="token punctuation">;</span>
pid /run/nginx.pid<span class="token punctuation">;</span>

<span class="token comment"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span>
<span class="token comment"># include /usr/share/nginx/modules/*.conf;</span>

events <span class="token punctuation">&#123;</span>
    worker_connections <span class="token number">1024</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

http <span class="token punctuation">&#123;</span>

    include             /etc/nginx/mime.types<span class="token punctuation">;</span>
    default_type        application/octet-stream<span class="token punctuation">;</span>

    log_format  main  <span class="token string">'$remote_addr - $remote_user [$time_local] "$request" '</span>
                      <span class="token string">'$status $body_bytes_sent "$http_referer" '</span>
                      <span class="token string">'"$http_user_agent" "$http_x_forwarded_for"'</span><span class="token punctuation">;</span>

    access_log  /var/log/nginx/access.log  main<span class="token punctuation">;</span>

    sendfile            on<span class="token punctuation">;</span>
    <span class="token comment">#tcp_nopush          on;</span>
    tcp_nodelay         on<span class="token punctuation">;</span>
    keepalive_timeout   <span class="token number">100</span><span class="token punctuation">;</span>
    types_hash_max_size <span class="token number">2048</span><span class="token punctuation">;</span>
    client_max_body_size 100m<span class="token punctuation">;</span>
    underscores_in_headers on<span class="token punctuation">;</span>

    server_names_hash_max_size <span class="token number">1024</span><span class="token punctuation">;</span>
    server_names_hash_bucket_size <span class="token number">64</span><span class="token punctuation">;</span>

    <span class="token comment"># Load modular configuration files from the /etc/nginx/conf.d directory.</span>
    <span class="token comment"># See http://nginx.org/en/docs/ngx_core_module.html#include</span>
    <span class="token comment"># for more information.</span>
    include /etc/nginx/conf.d/*.conf<span class="token punctuation">;</span>
    include /etc/nginx/sites-enabled/*<span class="token punctuation">;</span>

<span class="token comment"># Settings for a TLS enabled server.</span>
<span class="token comment">#</span>
<span class="token comment">#    server &#123;</span>
<span class="token comment">#        listen       443 ssl http2 default_server;</span>
<span class="token comment">#        listen       [::]:443 ssl http2 default_server;</span>
<span class="token comment">#        server_name  _;</span>
<span class="token comment">#        root         /usr/share/nginx/html;</span>
<span class="token comment">#</span>
<span class="token comment">#        ssl_certificate "/etc/pki/nginx/server.crt";</span>
<span class="token comment">#        ssl_certificate_key "/etc/pki/nginx/private/server.key";</span>
<span class="token comment">#        ssl_session_cache shared:SSL:1m;</span>
<span class="token comment">#        ssl_session_timeout  10m;</span>
<span class="token comment">#        ssl_ciphers HIGH:!aNULL:!MD5;</span>
<span class="token comment">#        ssl_prefer_server_ciphers on;</span>
<span class="token comment">#</span>
<span class="token comment">#        # Load configuration files for the default server block.</span>
<span class="token comment">#        include /etc/nginx/default.d/*.conf;</span>
<span class="token comment">#</span>
<span class="token comment">#        location / &#123;</span>
<span class="token comment">#        &#125;</span>
<span class="token comment">#</span>
<span class="token comment">#        error_page 404 /404.html;</span>
<span class="token comment">#        location = /404.html &#123;</span>
<span class="token comment">#        &#125;</span>
<span class="token comment">#</span>
<span class="token comment">#        error_page 500 502 503 504 /50x.html;</span>
<span class="token comment">#        location = /50x.html &#123;</span>
<span class="token comment">#        &#125;</span>
<span class="token comment">#    &#125;</span>

<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="conf-d-文件夹配置示例"><a href="#conf-d-文件夹配置示例" class="headerlink" title="conf.d 文件夹配置示例"></a>conf.d 文件夹配置示例</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 文件名起 xxx.conf</span>
<span class="token comment"># 配置示例</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># jenkins.conf 示例</span>
server <span class="token punctuation">&#123;</span>
    listen <span class="token number">80</span><span class="token punctuation">;</span>
    server_name jenkins.xxx.xxx.xxx<span class="token punctuation">;</span>

    access_log /etc/nginx/logs/jenkins.access.log main<span class="token punctuation">;</span>
    error_log /etc/nginx/logs/jenkins.error.log warn<span class="token punctuation">;</span>

    location / <span class="token punctuation">&#123;</span>
        proxy_pass http://localhost:8080<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 站点配置示例</span>
<span class="token comment"># xxx.conf</span>
server <span class="token punctuation">&#123;</span>
    listen <span class="token number">80</span><span class="token punctuation">;</span>
    server_name ~^<span class="token punctuation">(</span><span class="token punctuation">[</span>a-zA-Z0-9-<span class="token punctuation">]</span>+<span class="token punctuation">)</span><span class="token punctuation">\</span>.pda-dev<span class="token punctuation">\</span>.xxx<span class="token punctuation">(</span>域名配置<span class="token punctuation">)</span><span class="token punctuation">\</span>.xxx<span class="token punctuation">(</span>域名配置<span class="token punctuation">)</span><span class="token punctuation">\</span>.xxx<span class="token punctuation">(</span>域名配置<span class="token punctuation">)</span>$<span class="token punctuation">;</span>
    <span class="token builtin class-name">set</span> <span class="token variable">$platform</span> <span class="token variable">$1</span><span class="token punctuation">;</span>

    charset utf-8<span class="token punctuation">;</span>
    access_log /etc/nginx/logs/pda.admin.dev.access.log main<span class="token punctuation">;</span>
    error_log /etc/nginx/logs/pda.admin.dev.error.log error<span class="token punctuation">;</span>

    location @rewrites <span class="token punctuation">&#123;</span>
        rewrite ^.*$ /index.html last<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    location /api <span class="token punctuation">&#123;</span>
        proxy_pass http://api.pda-dev-admin.xxx<span class="token punctuation">(</span>域名配置<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    location / <span class="token punctuation">&#123;</span>
        root /mnt/data/www/frontend_deploy_workspace/dev/pda/<span class="token variable">$platform</span><span class="token punctuation">;</span>
        try_files <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ @rewrites<span class="token punctuation">;</span>
        index index.html<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 叨叨点啥图床改为SM.MS</title>
    <url>//post/xxwo2p.html</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>按照叨叨点啥教程设置使用 7bu 图床，我上传图片的时候很多图片上传不成功<br>所以我就自己修改图床</p>
<p><strong>本文中使用 SM.MS 图床</strong></p></blockquote>
<h1 id="叨叨点啥教程地址"><a href="#叨叨点啥教程地址" class="headerlink" title="叨叨点啥教程地址"></a>叨叨点啥教程地址</h1><p><a href="https://www.heyiki.top/posts/c66dcdf5.html">叨叨点啥教程</a></p>
<h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><h2 id="先注册-SM-MS-账号"><a href="#先注册-SM-MS-账号" class="headerlink" title="先注册 SM.MS 账号"></a>先注册 SM.MS 账号</h2><h2 id="修改-ios-图床地址"><a href="#修改-ios-图床地址" class="headerlink" title="修改 ios 图床地址"></a>修改 ios 图床地址</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>把 7bu 图床的地址换成 SM.MS 的上传地址<br><img src="https://i.loli.net/2021/08/09/gTUSzwoFlI5PDxJ.png#id=ptQRx&originHeight=3584&originWidth=1656&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p></blockquote>
<h2 id="修改请求头和参数"><a href="#修改请求头和参数" class="headerlink" title="修改请求头和参数"></a>修改请求头和参数</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>请求头添加 <strong>Authorization</strong> 后面文本粘贴你的 SM.MS token 值</p>
<p>请求体改为 <strong>smfile</strong><br>改如下图圈起来的地方<br><img src="https://i.loli.net/2021/08/10/XyYAeT8OIb3cv6K.png#id=xTjuF&originHeight=1792&originWidth=828&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p></blockquote>
<h2 id="修改匹配正则表达式"><a href="#修改匹配正则表达式" class="headerlink" title="修改匹配正则表达式"></a>修改匹配正则表达式</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>原匹配参数 (?&lt;=”url”:”).*(?=”/},)</p>
<p>改为 (?&lt;=”url”:”).+?(?=”,”)<br>如下图所示<br><img src="https://i.loli.net/2021/08/10/TIbRjdQrElKs7oz.png#id=ya5zR&originHeight=3584&originWidth=1656&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p></blockquote>
<h1 id="修改完成-可以上传图片了"><a href="#修改完成-可以上传图片了" class="headerlink" title="修改完成 可以上传图片了"></a>修改完成 可以上传图片了</h1>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>一名【合格】前端工程师的自检清单【自检ing】</title>
    <url>//post/self-check-list.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>感谢原作者提供这样一份优秀的自检清单，写这篇的文章的主要目的是按照清单上的知识检测自己还有哪些不足和提升，同时建立自己的知识体系<br>原文章地址: <a href="https://juejin.cn/post/6844903830887366670">一名【合格】前端工程师的自检清单</a></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/574962833bc441ec848a989252cebe9d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="Knowledge System.jpg"></p>
<h2 id="一、JavaScript基础"><a href="#一、JavaScript基础" class="headerlink" title="一、JavaScript基础"></a>一、JavaScript基础</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>前端工程师吃饭的家伙，深度、广度一样都不能差。</p></blockquote>
<h3 id="变量和类型"><a href="#变量和类型" class="headerlink" title="变量和类型"></a>变量和类型</h3><ul>
<li><p>1.<a href="https://kaleb.top/post/js-specThe-langType"><code>JavaScript</code>规定了几种语言类型</a></p>
</li>
<li><p>2.<a href="https://kaleb.top/post/js-data-structure"><code>JavaScript</code>对象的底层数据结构是什么</a></p>
</li>
<li><p>3.<a href="https://kaleb.top/post/symbol-devAndapp"><code>Symbol</code>类型在实际开发中的应用、可手动实现一个简单的<code>Symbol</code></a></p>
</li>
<li><p>4.<code>JavaScript</code>中的变量在内存中的具体存储形式</p>
</li>
<li><p>5.基本类型对应的内置对象，以及他们之间的装箱拆箱操作</p>
</li>
<li><p>6.理解值类型和引用类型</p>
</li>
<li><p>7.<code>null</code>和<code>undefined</code>的区别</p>
</li>
<li><p>8.至少可以说出三种判断<code>JavaScript</code>数据类型的方式，以及他们的优缺点，如何准确的判断数组类型</p>
</li>
<li><p>9.可能发生隐式类型转换的场景以及转换原则，应如何避免或巧妙应用</p>
</li>
<li><p>10.出现小数精度丢失的原因，<code>JavaScript</code>可以存储的最大数字、最大安全数字，<code>JavaScript</code>处理大数字的方法、避免精度丢失的方法</p>
<h3 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h3></li>
<li><p>1.理解原型设计模式以及<code>JavaScript</code>中的原型规则</p>
</li>
<li><p>2.<code>instanceof</code>的底层实现原理，手动实现一个<code>instanceof</code></p>
</li>
<li><p>4.实现继承的几种方式以及他们的优缺点</p>
</li>
<li><p>5.至少说出一种开源项目(如<code>Node</code>)中应用原型继承的案例</p>
</li>
<li><p>6.可以描述<code>new</code>一个对象的详细过程，手动实现一个<code>new</code>操作符</p>
</li>
<li><p>7.理解<code>es6 class</code>构造以及继承的底层实现原理</p>
<h3 id="作用域和闭包"><a href="#作用域和闭包" class="headerlink" title="作用域和闭包"></a>作用域和闭包</h3></li>
<li><p>1.理解词法作用域和动态作用域</p>
</li>
<li><p>2.理解<code>JavaScript</code>的作用域和作用域链</p>
</li>
<li><p>3.理解<code>JavaScript</code>的执行上下文栈，可以应用堆栈信息快速定位问题</p>
</li>
<li><p>4.<code>this</code>的原理以及几种不同使用场景的取值</p>
</li>
<li><p>5.闭包的实现原理和作用，可以列举几个开发中闭包的实际应用</p>
</li>
<li><p>6.理解堆栈溢出和内存泄漏的原理，如何防止</p>
</li>
<li><p>7.如何处理循环的异步操作</p>
</li>
<li><p>8.理解模块化解决的实际问题，可列举几个模块化方案并理解其中原理</p>
<h3 id="执行机制"><a href="#执行机制" class="headerlink" title="执行机制"></a>执行机制</h3></li>
<li><p>1.为何<code>try</code>里面放<code>return</code>，<code>finally</code>还会执行，理解其内部机制</p>
</li>
<li><p>2.<code>JavaScript</code>如何实现异步编程，可以详细描述<code>EventLoop</code>机制</p>
</li>
<li><p>3.宏任务和微任务分别有哪些</p>
</li>
<li><p>4.可以快速分析一个复杂的异步嵌套逻辑，并掌握分析方法</p>
</li>
<li><p>5.使用<code>Promise</code>实现串行</p>
</li>
<li><p>6.<code>Node</code>与浏览器<code>EventLoop</code>的差异</p>
</li>
<li><p>7.如何在保证页面运行流畅的情况下处理海量数据</p>
<h3 id="语法和API"><a href="#语法和API" class="headerlink" title="语法和API"></a>语法和API</h3></li>
<li><p>1.理解<code>ECMAScript</code>和<code>JavaScript</code>的关系</p>
</li>
<li><p>2.熟练运用<code>es5</code>、<code>es6</code>提供的语法规范，</p>
</li>
<li><p>3.熟练掌握<code>JavaScript</code>提供的全局对象（例如<code>Date</code>、<code>Math</code>）、全局函数（例如<code>decodeURI</code>、<code>isNaN</code>）、全局属性（例如<code>Infinity</code>、<code>undefined</code>）</p>
</li>
<li><p>4.熟练应用<code>map</code>、<code>reduce</code>、<code>filter</code> 等高阶函数解决问题</p>
</li>
<li><p>5.<code>setInterval</code>需要注意的点，使用<code>settimeout</code>实现<code>setInterval</code></p>
</li>
<li><p>6.<code>JavaScript</code>提供的正则表达式<code>API</code>、可以使用正则表达式（邮箱校验、<code>URL</code>解析、去重等）解决常见问题</p>
</li>
<li><p>7.<code>JavaScript</code>异常处理的方式，统一的异常处理方案</p>
<h2 id="二、HTML和CSS"><a href="#二、HTML和CSS" class="headerlink" title="二、HTML和CSS"></a>二、HTML和CSS</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3></li>
<li><p>1.从规范的角度理解<code>HTML</code>，从分类和语义的角度使用标签</p>
</li>
<li><p>2.常用页面标签的默认样式、自带属性、不同浏览器的差异、处理浏览器兼容问题的方式</p>
</li>
<li><p>3.元信息类标签(<code>head</code>、<code>title</code>、<code>meta</code>)的使用目的和配置方法</p>
</li>
<li><p>4.<code>HTML5</code>离线缓存原理</p>
</li>
<li><p>5.可以使用<code>Canvas API</code>、<code>SVG</code>等绘制高性能的动画</p>
<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3></li>
<li><p>1.<code>CSS</code>盒模型，在不同浏览器的差异</p>
</li>
<li><p>2.<code>CSS</code>所有选择器及其优先级、使用场景，哪些可以继承，如何运用<code>at</code>规则</p>
</li>
<li><p>3.<code>CSS</code>伪类和伪元素有哪些，它们的区别和实际应用</p>
</li>
<li><p>4.<code>HTML</code>文档流的排版规则，<code>CSS</code>几种定位的规则、定位参照物、对文档流的影响，如何选择最好的定位方式，雪碧图实现原理</p>
</li>
<li><p>5.水平垂直居中的方案、可以实现<code>6</code>种以上并对比它们的优缺点</p>
</li>
<li><p>6.<code>BFC</code>实现原理，可以解决的问题，如何创建<code>BFC</code></p>
</li>
<li><p>7.可使用<code>CSS</code>函数复用代码，实现特殊效果</p>
</li>
<li><p>8.<code>PostCSS</code>、<code>Sass</code>、<code>Less</code>的异同，以及使用配置，至少掌握一种</p>
</li>
<li><p>9.<code>CSS</code>模块化方案、如何配置按需加载、如何防止<code>CSS</code>阻塞渲染</p>
</li>
<li><p>10.熟练使用<code>CSS</code>实现常见动画，如渐变、移动、旋转、缩放等等</p>
</li>
<li><p>11.<code>CSS</code>浏览器兼容性写法，了解不同<code>API</code>在不同浏览器下的兼容性情况</p>
</li>
<li><p>12.掌握一套完整的响应式布局方案</p>
<h3 id="手写"><a href="#手写" class="headerlink" title="手写"></a>手写</h3></li>
<li><p>1.手写图片瀑布流效果</p>
</li>
<li><p>2.使用<code>CSS</code>绘制几何图形（圆形、三角形、扇形、菱形等）</p>
</li>
<li><p>3.使用纯<code>CSS</code>实现曲线运动（贝塞尔曲线）</p>
</li>
<li><p>4.实现常用布局（三栏、圣杯、双飞翼、吸顶），可是说出多种方式并理解其优缺点</p>
<h2 id="三、计算机基础"><a href="#三、计算机基础" class="headerlink" title="三、计算机基础"></a>三、计算机基础</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>关于编译原理，不需要理解非常深入，但是最基本的原理和概念一定要懂，这对于学习一门编程语言非常重要</p></blockquote>
<h3 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h3></li>
<li><p>1.理解代码到底是什么，计算机如何将代码转换为可以运行的目标程序</p>
</li>
<li><p>2.正则表达式的匹配原理和性能优化</p>
</li>
<li><p>3.如何将<code>JavaScript</code>代码解析成抽象语法树(<code>AST</code>)</p>
</li>
<li><p>4.<code>base64</code>的编码原理</p>
</li>
<li><p>5.几种进制的相互转换计算方法，在<code>JavaScript</code>中如何表示和转换</p>
<h3 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h3></li>
<li><p>1.理解什么是协议，了解<code>TCP/IP</code>网络协议族的构成，每层协议在应用程序中发挥的作用</p>
</li>
<li><p>2.三次握手和四次挥手详细原理，为什么要使用这种机制</p>
</li>
<li><p>3.有哪些协议是可靠，<code>TCP</code>有哪些手段保证可靠交付</p>
</li>
<li><p>4.<code>DNS</code>的作用、<code>DNS</code>解析的详细过程，<code>DNS</code>优化原理</p>
</li>
<li><p>5.<code>CDN</code>的作用和原理</p>
</li>
<li><p>6.<code>HTTP</code>请求报文和响应报文的具体组成，能理解常见请求头的含义，有几种请求方式，区别是什么</p>
</li>
<li><p>7.<code>HTTP</code>所有状态码的具体含义，看到异常状态码能快速定位问题</p>
</li>
<li><p>8.<code>HTTP1.1</code>、<code>HTTP2.0</code>带来的改变</p>
</li>
<li><p>9.<code>HTTPS</code>的加密原理，如何开启<code>HTTPS</code>，如何劫持<code>HTTPS</code>请求</p>
</li>
<li><p>10.理解<code>WebSocket</code>协议的底层原理、与<code>HTTP</code>的区别</p>
<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3></li>
<li><p>1.熟练使用前端常用的设计模式编写代码，如单例模式、装饰器模式、代理模式等</p>
</li>
<li><p>2.发布订阅模式和观察者模式的异同以及实际应用</p>
</li>
<li><p>3.可以说出几种设计模式在开发中的实际应用，理解框架源码中对设计模式的应用</p>
<h2 id="四、数据结构和算法"><a href="#四、数据结构和算法" class="headerlink" title="四、数据结构和算法"></a>四、数据结构和算法</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>据我了解的大部分前端对这部分知识有些欠缺，甚至抵触，但是，如果突破更高的天花板，这部分知识是必不可少的，而且我亲身经历——非常有用！</p></blockquote>
<h3 id="JavaScript编码能力"><a href="#JavaScript编码能力" class="headerlink" title="JavaScript编码能力"></a>JavaScript编码能力</h3></li>
<li><p>1.种方式实现数组去重、扁平化、对比优缺点</p>
</li>
<li><p>2.多种方式实现深拷贝、对比优缺点</p>
</li>
<li><p>3.手写函数柯里化工具函数、并理解其应用场景和优势</p>
</li>
<li><p>4.手写防抖和节流工具函数、并理解其内部原理和应用场景</p>
</li>
<li><p>5.实现一个<code>sleep</code>函数</p>
<h3 id="手动实现前端轮子"><a href="#手动实现前端轮子" class="headerlink" title="手动实现前端轮子"></a>手动实现前端轮子</h3></li>
<li><p>1.手动实现<code>call、apply、bind</code></p>
</li>
<li><p>2.手动实现符合<code>Promise/A+</code>规范的<code>Promise</code>、手动实现<code>async await</code></p>
</li>
<li><p>3.手写一个<code>EventEmitter</code>实现事件发布、订阅</p>
</li>
<li><p>4.可以说出两种实现双向绑定的方案、可以手动实现</p>
</li>
<li><p>5.手写<code>JSON.stringify</code>、<code>JSON.parse</code></p>
</li>
<li><p>6.手写一个模版引擎，并能解释其中原理</p>
</li>
<li><p>7.手写<code>懒加载</code>、<code>下拉刷新</code>、<code>上拉加载</code>、<code>预加载</code>等效果</p>
<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3></li>
<li><p>1.理解常见数据结构的特点，以及他们在不同场景下使用的优缺点</p>
</li>
<li><p>2.理解<code>数组</code>、<code>字符串</code>的存储原理，并熟练应用他们解决问题</p>
</li>
<li><p>3.理解<code>二叉树</code>、<code>栈</code>、<code>队列</code>、<code>哈希表</code>的基本结构和特点，并可以应用它解决问题</p>
</li>
<li><p>4.了解<code>图</code>、<code>堆</code>的基本结构和使用场景</p>
<h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3></li>
<li><p>1.可计算一个算法的时间复杂度和空间复杂度，可估计业务逻辑代码的耗时和内存消耗</p>
</li>
<li><p>2.至少理解五种排序算法的实现原理、应用场景、优缺点，可快速说出时间、空间复杂度</p>
</li>
<li><p>3.了解递归和循环的优缺点、应用场景、并可在开发中熟练应用</p>
</li>
<li><p>4.可应用<code>回溯算法</code>、<code>贪心算法</code>、<code>分治算法</code>、<code>动态规划</code>等解决复杂问题</p>
</li>
<li><p>5.前端处理海量数据的算法方案</p>
<h2 id="五、运行环境"><a href="#五、运行环境" class="headerlink" title="五、运行环境"></a>五、运行环境</h2><p>我们需要理清语言和环境的关系：</p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p><code>ECMAScript</code>描述了<code>JavaScript</code>语言的语法和基本对象规范<br>浏览器作为<code>JavaScript</code>的一种运行环境，为它提供了：文档对象模型（<code>DOM</code>），描述处理网页内容的方法和接口、浏览器对象模型（<code>BOM</code>），描述与浏览器进行交互的方法和接口<br>Node也是<code>JavaScript</code>的一种运行环境，为它提供了操作<code>I/O</code>、网络等<code>API</code></p></blockquote>
<h3 id="浏览器API"><a href="#浏览器API" class="headerlink" title="浏览器API"></a>浏览器API</h3></li>
<li><p>1.浏览器提供的符合<code>W3C</code>标准的<code>DOM</code>操作<code>API</code>、浏览器差异、兼容性</p>
</li>
<li><p>2.浏览器提供的浏览器对象模型 (<code>BOM</code>)提供的所有全局<code>API</code>、浏览器差异、兼容性</p>
</li>
<li><p>3.大量<code>DOM</code>操作、海量数据的性能优化(合并操作、<code>Diff</code>、<code>requestAnimationFrame</code>等)</p>
</li>
<li><p>4.浏览器海量数据存储、操作性能优化</p>
</li>
<li><p>5.<code>DOM</code>事件流的具体实现机制、不同浏览器的差异、事件代理</p>
</li>
<li><p>6.前端发起网络请求的几种方式及其底层实现、可以手写原生<code>ajax</code>、<code>fetch</code>、可以熟练使用第三方库</p>
</li>
<li><p>7.浏览器的同源策略，如何避免同源策略，几种方式的异同点以及如何选型</p>
</li>
<li><p>8.浏览器提供的几种存储机制、优缺点、开发中正确的选择</p>
</li>
<li><p>9.浏览器跨标签通信</p>
<h3 id="浏览器原理"><a href="#浏览器原理" class="headerlink" title="浏览器原理"></a>浏览器原理</h3></li>
<li><p>1.各浏览器使用的<code>JavaScript</code>引擎以及它们的异同点、如何在代码中进行区分</p>
</li>
<li><p>2.请求数据到请求结束与服务器进行了几次交互</p>
</li>
<li><p>3.可详细描述浏览器从输入<code>URL</code>到页面展现的详细过程</p>
</li>
<li><p>4.浏览器解析<code>HTML</code>代码的原理，以及构建<code>DOM</code>树的流程</p>
</li>
<li><p>5.浏览器如何解析<code>CSS</code>规则，并将其应用到<code>DOM</code>树上</p>
</li>
<li><p>6.浏览器如何将解析好的带有样式的<code>DOM</code>树进行绘</p>
</li>
<li><p>7.浏览器的运行机制，如何配置资源异步同步加载</p>
</li>
<li><p>8.浏览器回流与重绘的底层原理，引发原因，如何有效避免</p>
</li>
<li><p>9.浏览器的垃圾回收机制，如何避免内存泄漏</p>
</li>
<li><p>10.浏览器采用的缓存方案，如何选择和控制合适的缓存方案</p>
<h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3></li>
<li><p>1.理解<code>Node</code>在应用程序中的作用，可以使用<code>Node</code>搭建前端运行环境、使用<code>Node</code>操作文件、操作数据库等等</p>
</li>
<li><p>2.掌握一种<code>Node</code>开发框架，如<code>Express</code>，<code>Express</code>和<code>Koa</code>的区别</p>
</li>
<li><p>3.熟练使用<code>Node</code>提供的<code>API</code>如<code>Path</code>、<code>Http</code>、<code>Child Process</code>等并理解其实现原理</p>
</li>
<li><p>4.<code>Node</code>的底层运行原理、和浏览器的异同</p>
</li>
<li><p>5.<code>Node</code>事件驱动、非阻塞机制的实现原理</p>
<h2 id="六、框架和类库"><a href="#六、框架和类库" class="headerlink" title="六、框架和类库"></a>六、框架和类库</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>轮子层出不穷，从原理上理解才是正道</p></blockquote>
<h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3></li>
<li><p>1.理解<code>泛型</code>、<code>接口</code>等面向对象的相关概念，<code>TypeScript</code>对面向对象理念的实现</p>
</li>
<li><p>2.理解使用<code>TypeScript</code>的好处，掌握<code>TypeScript</code>基础语法</p>
</li>
<li><p>3.<code>TypeScript</code>的规则检测原理</p>
</li>
<li><p>4.可以在<code>React</code>、<code>Vue</code>等框架中使用<code>TypeScript</code>进行开发</p>
<h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3></li>
<li><p>1.<code>React</code>和<code>vue </code>选型和优缺点、核心架构的区别</p>
</li>
<li><p>2.<code>React</code>中<code>setState</code>的执行机制，如何有效的管理状态</p>
</li>
<li><p>3.<code>React</code>的事件底层实现机制</p>
</li>
<li><p>4.<code>React</code>的虚拟<code>DOM</code>和<code>Diff</code>算法的内部实现</p>
</li>
<li><p>5.<code>React</code>的<code>Fiber</code>工作原理，解决了什么问题</p>
</li>
<li><p>6.<code>React Router</code>和<code>Vue Router</code>的底层实现原理、动态加载实现原理</p>
</li>
<li><p>7.可熟练应用<code>React API</code>、生命周期等，可应用<code>HOC</code>、<code>render props</code>、<code>Hooks</code>等高阶用法解决问题</p>
</li>
<li><p>8.基于<code>React</code>的特性和原理，可以手动实现一个简单的<code>React</code></p>
<h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3></li>
<li><p>1.熟练使用<code>Vue</code>的<code>API</code>、生命周期、钩子函数</p>
</li>
<li><p>2.<code>MVVM</code>框架设计理念</p>
</li>
<li><p>3.<code>Vue</code>双向绑定实现原理、<code>Diff</code>算法的内部实现</p>
</li>
<li><p>4.<code>Vue</code>的事件机制</p>
</li>
<li><p>5.从<code>template</code>转换成真实<code>DOM</code>的实现机制</p>
<h3 id="多端开发"><a href="#多端开发" class="headerlink" title="多端开发"></a>多端开发</h3></li>
<li><p>1.单页面应用（<code>SPA</code>）的原理和优缺点，掌握一种快速开发<code>SPA</code>的方案</p>
</li>
<li><p>2.理解<code>Viewport</code>、<code>em</code>、<code>rem</code>的原理和用法，分辨率、<code>px</code>、<code>ppi</code>、<code>dpi</code>、<code>dp</code>的区别和实际应用</p>
</li>
<li><p>3.移动端页面适配解决方案、不同机型适配方案</p>
</li>
<li><p>4.掌握一种<code>JavaScript</code>移动客户端开发技术，如<code>React Native</code>：可以搭建<code>React Native</code>开发环境，熟练进行开发，可理解<code>React Native</code>的运作原理，不同端适配</p>
</li>
<li><p>5.掌握一种<code>JavaScript</code> <code>PC</code>客户端开发技术，如<code>Electron</code>：可搭建<code>Electron</code>开发环境，熟练进行开发，可理解<code>Electron</code>的运作原理</p>
</li>
<li><p>6.掌握一种小程序开发框架或原生小程序开发</p>
</li>
<li><p>7.理解多端框架的内部实现原理，至少了解一个多端框架的使用</p>
<h3 id="数据流管理"><a href="#数据流管理" class="headerlink" title="数据流管理"></a>数据流管理</h3></li>
<li><p>1.掌握<code>React</code>和<code>Vue</code>传统的跨组件通信方案，对比采用数据流管理框架的异同</p>
</li>
<li><p>2.熟练使用<code>Redux</code>管理数据流，并理解其实现原理，中间件实现原理</p>
</li>
<li><p>3.熟练使用<code>Mobx</code>管理数据流，并理解其实现原理，相比<code>Redux</code>有什么优势</p>
</li>
<li><p>4.熟练使用<code>Vuex</code>管理数据流，并理解其实现原理</p>
</li>
<li><p>5.以上数据流方案的异同和优缺点，不情况下的技术选型</p>
<h3 id="实用库"><a href="#实用库" class="headerlink" title="实用库"></a>实用库</h3></li>
<li><p>1.至少掌握一种<code>UI</code>组件框架，如<code>antd design</code>，理解其设计理念、底层实现</p>
</li>
<li><p>2.掌握一种图表绘制框架，如<code>Echart</code>，理解其设计理念、底层实现，可以自己实现图表</p>
</li>
<li><p>3.掌握一种<code>GIS</code>开发框架，如百度地图<code>API</code></p>
</li>
<li><p>4.掌握一种可视化开发框架，如<code>Three.js</code>、<code>D3</code></p>
</li>
<li><p>5.工具函数库，如<code>lodash</code>、<code>underscore</code>、<code>moment</code>等，理解使用的工具类或工具函数的具体实现原理</p>
<h3 id="开发和调试"><a href="#开发和调试" class="headerlink" title="开发和调试"></a>开发和调试</h3></li>
<li><p>1.熟练使用各浏览器提供的调试工具</p>
</li>
<li><p>2.熟练使用一种代理工具实现请求代理、抓包，如<code>charls</code></p>
</li>
<li><p>3.可以使用<code>Android</code>、<code>IOS</code>模拟器进行调试，并掌握一种真机调试方案</p>
</li>
<li><p>4.了解<code>Vue</code>、<code>React</code>等框架调试工具的使用</p>
<h2 id="七、前端工程"><a href="#七、前端工程" class="headerlink" title="七、前端工程"></a>七、前端工程</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>前端工程化：以工程化方法和工具提高开发生产效率、降低维护难度</p></blockquote>
<h3 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h3></li>
<li><p>1.理解<code>npm</code>、<code>yarn</code>依赖包管理的原理，两者的区别</p>
</li>
<li><p>2.可以使用<code>npm</code>运行自定义脚本</p>
</li>
<li><p>3.理解<code>Babel</code>、<code>ESLint</code>、<code>webpack</code>等工具在项目中承担的作用</p>
</li>
<li><p>4.<code>ESLint</code>规则检测原理，常用的<code>ESLint</code>配置</p>
</li>
<li><p>5.<code>Babel</code>的核心原理，可以自己编写一个<code>Babel</code>插件</p>
</li>
<li><p>6.可以配置一种前端代码兼容方案，如<code>Polyfill</code></p>
</li>
<li><p>7.<code>Webpack</code>的编译原理、构建流程、热更新原理，<code>chunk</code>、<code>bundle</code>和<code>module</code>的区别和应用</p>
</li>
<li><p>8.可熟练配置已有的<code>loaders</code>和<code>plugins</code>解决问题，可以自己编写<code>loaders</code>和<code>plugins</code></p>
<h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3></li>
<li><p>1.正向代理与反向代理的特点和实例</p>
</li>
<li><p>2.可手动搭建一个简单的<code>nginx</code>服务器、</p>
</li>
<li><p>3.熟练应用常用的<code>nginx</code>内置变量，掌握常用的匹配规则写法</p>
</li>
<li><p>4.可以用<code>nginx</code>实现请求过滤、配置<code>gzip</code>、负载均衡等，并能解释其内部原理</p>
<h3 id="开发提速"><a href="#开发提速" class="headerlink" title="开发提速"></a>开发提速</h3></li>
<li><p>1.熟练掌握一种接口管理、接口<code>mock</code>工具的使用，如<code>yapi</code></p>
</li>
<li><p>2.掌握一种高效的日志埋点方案，可快速使用日志查询工具定位线上问题</p>
</li>
<li><p>3.理解<code>TDD</code>与<code>BDD</code>模式，至少会使用一种前端单元测试框架</p>
<h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3></li>
<li><p>1.理解<code>Git</code>的核心原理、工作流程、和<code>SVN</code>的区别</p>
</li>
<li><p>2.熟练使用常规的<code>Git</code>命令、<code>git rebase</code>、<code>git stash</code>等进阶命令</p>
</li>
<li><p>3.可以快速解决<code>线上分支回滚</code>、<code>线上分支错误合并</code>等复杂问题</p>
<h3 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h3></li>
<li><p>1.理解<code>CI/CD</code>技术的意义，至少熟练掌握一种<code>CI/CD</code>工具的使用，如<code>Jenkins</code></p>
</li>
<li><p>2.可以独自完成架构设计、技术选型、环境搭建、全流程开发、部署上线等一套完整的开发流程（包括<code>Web</code>应用、移动客户端应用、<code>PC</code>客户端应用、小程序、<code>H5</code>等等）</p>
<h2 id="八、项目和业务"><a href="#八、项目和业务" class="headerlink" title="八、项目和业务"></a>八、项目和业务</h2><h3 id="后端技能"><a href="#后端技能" class="headerlink" title="后端技能"></a>后端技能</h3></li>
<li><p>1.了解后端的开发方式，在应用程序中的作用，至少会使用一种后端语言</p>
</li>
<li><p>2.掌握数据最终在数据库中是如何落地存储的，能看懂表结构设计、表之间的关联，至少会使用一种数据库</p>
<h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3></li>
<li><p>1.了解前端性能衡量指标、性能监控要点，掌握一种前端性能监控方案</p>
</li>
<li><p>2.了解常见的<code>Web</code>、<code>App</code>性能优化方案</p>
</li>
<li><p>3.<code>SEO</code>排名规则、<code>SEO</code>优化方案、前后端分离的<code>SEO</code></p>
</li>
<li><p>4.<code>SSR</code>实现方案、优缺点、及其性能优化</p>
</li>
<li><p>5.<code>Webpack</code>的性能优化方案</p>
</li>
<li><p>6.<code>Canvas</code>性能优化方案</p>
</li>
<li><p>7.<code>React</code>、<code>Vue</code>等框架使用性能优化方案</p>
<h3 id="前端安全"><a href="#前端安全" class="headerlink" title="前端安全"></a>前端安全</h3></li>
<li><p>1.<code>XSS</code>攻击的原理、分类、具体案例，前端如何防御</p>
</li>
<li><p>2.<code>CSRF</code>攻击的原理、具体案例，前端如何防御</p>
</li>
<li><p>3.<code>HTTP</code>劫持、页面劫持的原理、防御措施</p>
<h3 id="业务相关"><a href="#业务相关" class="headerlink" title="业务相关"></a>业务相关</h3></li>
<li><p>1.能理解所开发项目的整体业务形态、业务目标、业务架构，可以快速定位线上业务问题</p>
</li>
<li><p>2.能理解所开发项目整体的技术架构、能快读的根据新需求进行开发规划、能快速根据业务报警、线上日志等定位并解决线上技术问题</p>
</li>
<li><p>3.可以将自己的想法或新技术在业务中落地实践，尽量在团队中拥有一定的不可替代性</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>自检清单</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>自检清单</tag>
      </tags>
  </entry>
</search>
