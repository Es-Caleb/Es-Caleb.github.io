<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>基本类型对应的内置对象，以及他们之间的装箱拆箱操作</title>
    <url>//post/built-object.html</url>
    <content><![CDATA[<h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><h2 id="内置对象-1"><a href="#内置对象-1" class="headerlink" title="内置对象"></a>内置对象</h2><ul>
<li>Object是JS中所有对象的父对象</li>
<li>数据封装类对象：Object Array Boolean Number String</li>
<li>其他对象：Function Math Date RegExp Error<h2 id="特殊的基本包装类型"><a href="#特殊的基本包装类型" class="headerlink" title="特殊的基本包装类型"></a>特殊的基本包装类型</h2>String Number Boolean<h2 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h2>只存在函数内部的一个类数组对象<h1 id="装箱和拆箱"><a href="#装箱和拆箱" class="headerlink" title="装箱和拆箱"></a>装箱和拆箱</h1><h2 id="装箱"><a href="#装箱" class="headerlink" title="装箱"></a>装箱</h2>把基本数据类型转换为对应的引用数据类型的操作称为装箱，可以分为隐式装箱和显式装箱。</li>
</ul>
<p><em><strong>隐式装箱</strong></em></p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>每当读取一个基本类型的时候，后台就会创建一个对应的基本包装类型对象，从而让我们能够调用一些方法来操作这些数据。             ——《JavaScript高级程序设计》</p></blockquote>
<pre class=" language-ini"><code class="language-ini">let a<span class="token attr-value"><span class="token punctuation">=</span>'sun'</span>
let b<span class="token attr-value"><span class="token punctuation">=</span>a.indexOf('s')</span>
//上述代码在后台实际的步骤为
let a<span class="token attr-value"><span class="token punctuation">=</span>new String('sun')</span>
let b<span class="token attr-value"><span class="token punctuation">=</span>a.indexOf('s')</span>
<span class="token constant">a</span><span class="token attr-value"><span class="token punctuation">=</span>null</span>
</code></pre>
<p>上述代码中，a是基本数据类型，不是对象，不应该具有方法，JS内部进行了装箱操作，使得它能够调用方法。执行完相应的方法之后立即被销毁。</p>
<h2 id="拆箱"><a href="#拆箱" class="headerlink" title="拆箱"></a>拆箱</h2><p>将引用数据类型转换为基本数据类型，通过<code>valueOf()</code>和<code>toString()</code>实现。</p>
<pre class=" language-scss"><code class="language-scss">let a=new <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">'sun'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//object</span>
let b=new <span class="token function">Number</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//object</span>
a<span class="token number">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//'sun' string</span>
a<span class="token number">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//12 number</span>
b<span class="token number">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//'sun'string</span>
b<span class="token number">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//'12' string</span>
</code></pre>
<p>参考：<a href="https://juejin.cn/post/7028925336809111566">《基本类型对应的内置对象，以及他们之间的装箱拆箱操作》</a></p>
<p><strong>ps：文末附上汇总文章链接<a href="https://kaleb.top/post/self-check-list">《一名【合格】前端工程师的自检清单【自检ing】》</a></strong></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>自检清单</category>
        <category>JS</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>自检清单</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu 部署jenkins</title>
    <url>//post/dhm7uz.html</url>
    <content><![CDATA[<h1 id="服务器部署-jenkins"><a href="#服务器部署-jenkins" class="headerlink" title="服务器部署 jenkins"></a>服务器部署 jenkins</h1><h2 id="jenkinsci-blueocean-安装"><a href="#jenkinsci-blueocean-安装" class="headerlink" title="jenkinsci/blueocean 安装"></a>jenkinsci/blueocean 安装</h2><p><code>docker pull jenkinsci/blueocean</code></p>
<h2 id="doker-部署-jenkins"><a href="#doker-部署-jenkins" class="headerlink" title="doker 部署 jenkins"></a>doker 部署 jenkins</h2><pre class=" language-bash"><code class="language-bash">docker run -d -u root --name jenkins -p 8080:8080 -p 50000:50000 -v /data/jenkins_home:/var/jenkins_home jenkinsci/blueocean:lts

docker run -d -u root --name jenkins -p 8080:8080 -p 50000:50000 -v /workspace/data/jenkins:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock -v /etc/timezone:/etc/timezone -v /etc/localtime:/etc/localtime jenkinsci/blueocean:1.25.1
</code></pre>
<h2 id="查看-Jenkins-启动情况"><a href="#查看-Jenkins-启动情况" class="headerlink" title="查看 Jenkins 启动情况"></a>查看 Jenkins 启动情况</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看启动项</span>
docker <span class="token function">ps</span>
<span class="token comment" spellcheck="true"># 查看全部</span>
docker <span class="token function">ps</span> -a
</code></pre>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="Jenkins-容器-docker-run-之后状态-Exited"><a href="#Jenkins-容器-docker-run-之后状态-Exited" class="headerlink" title="Jenkins 容器 docker run 之后状态 Exited"></a>Jenkins 容器 docker run 之后状态 Exited</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看docker日志 ：</span>
docker logs jenkins
发现是目前权限问题
因为/data/jenkins_home 目录是root权限
</code></pre>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">chown</span> -R 1000 /data/jenkins_home //用户组改变
</code></pre>
<h2 id="Jenkins-首次登录需要密码"><a href="#Jenkins-首次登录需要密码" class="headerlink" title="Jenkins 首次登录需要密码"></a>Jenkins 首次登录需要密码</h2><pre class=" language-bash"><code class="language-bash">// 进入容器
docker <span class="token function">exec</span> -it de20d10b6046（容器id） <span class="token function">bash</span>
<span class="token function">cat</span> /var/jenkins_home/secrets/initialAdminPassword //查看密码
</code></pre>
<h1 id="jenkins-部署项目"><a href="#jenkins-部署项目" class="headerlink" title="jenkins 部署项目"></a>jenkins 部署项目</h1><h2 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h2><h3 id="进入容器-创建-ssh-证书-连接寄主机"><a href="#进入容器-创建-ssh-证书-连接寄主机" class="headerlink" title="进入容器 创建 ssh 证书 连接寄主机"></a>进入容器 创建 ssh 证书 连接寄主机</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 生成证书</span>
ssh-keygen -t rsa -C <span class="token string">"kingpi@163.com"</span> -f ~/.ssh/host-rsa
<span class="token comment" spellcheck="true"># 进入.ssh</span>
<span class="token function">cd</span> ~/.ssh
</code></pre>
<h3 id="添加-config"><a href="#添加-config" class="headerlink" title="添加 config"></a>添加 config</h3><pre class=" language-bash"><code class="language-bash">Host 172.17.0.1（寄主机docker ip）
  HostName 172.17.0.1
  User root
  PreferredAuthentications publickey
  IdentityFile ~/.ssh/host-rsa
</code></pre>
<h3 id="寄主机进入-ssh"><a href="#寄主机进入-ssh" class="headerlink" title="寄主机进入 ~/.ssh"></a>寄主机进入 ~/.ssh</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> ~/.ssh
</code></pre>
<h3 id="进入文件-authorizedkeys"><a href="#进入文件-authorizedkeys" class="headerlink" title="进入文件 authorizedkeys"></a>进入文件 authorized<em>keys</em></h3><pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span> authorized_keys
<span class="token comment" spellcheck="true"># 输入 上面创建的 连接寄主机 ssh证书公钥</span>
</code></pre>
<h3 id="jenkins-添加-节点"><a href="#jenkins-添加-节点" class="headerlink" title="jenkins 添加 节点"></a>jenkins 添加 节点</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12843443/1639905060247-d3efccf6-07ce-4c0a-a0c5-18ec83675637.png#clientId=u984dde43-e76a-4&from=paste&height=827&id=u55e900d0&name=image.png&originHeight=1654&originWidth=1500&originalType=binary&ratio=1&rotation=0&showTitle=false&size=201536&status=done&style=none&taskId=ue16f108e-3a9b-49df-bcd6-08e50d0d147&title=&width=750" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/12843443/1639148328357-e4a2e1fc-dfe2-44c0-9f91-7ce1b52c4250.png#clientId=uf90b85fc-dc9a-4&from=drop&id=u78cce22e&name=WeChatb3c23b7241c04b4d5134e43d23656cf8.png&originHeight=2848&originWidth=2456&originalType=binary&ratio=1&rotation=0&showTitle=false&size=687327&status=done&style=none&taskId=u6f0019ae-dea2-4eae-af76-3fbf9c2f624&title=" alt="WeChatb3c23b7241c04b4d5134e43d23656cf8.png"></p>
<h2 id="jenkins-容器内创建连接-github-证书"><a href="#jenkins-容器内创建连接-github-证书" class="headerlink" title="jenkins 容器内创建连接 github 证书"></a>jenkins 容器内创建连接 github 证书</h2><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"kingpi@163.com"</span> -f ~/.ssh/github.com
<span class="token comment" spellcheck="true"># config 添加host</span>
</code></pre>
<h3 id="jenkins-添加凭证-如上面-图"><a href="#jenkins-添加凭证-如上面-图" class="headerlink" title="jenkins 添加凭证 如上面 图"></a>jenkins 添加凭证 如上面 图</h3><h2 id="连接远程服务器"><a href="#连接远程服务器" class="headerlink" title="连接远程服务器"></a>连接远程服务器</h2><h3 id="jenkins-容器内创建证书"><a href="#jenkins-容器内创建证书" class="headerlink" title="jenkins 容器内创建证书"></a>jenkins 容器内创建证书</h3><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"kingpi@163.com"</span> -m PEM -P <span class="token string">""</span> -f ~/.ssh/yooleap.net
<span class="token comment" spellcheck="true"># config 添加host</span>
</code></pre>
<h3 id="jenkins-系统配置配置服务器信息-添加上私钥"><a href="#jenkins-系统配置配置服务器信息-添加上私钥" class="headerlink" title="jenkins 系统配置配置服务器信息 添加上私钥"></a>jenkins 系统配置配置服务器信息 添加上私钥</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12843443/1639905151450-e9034ac2-81fb-428b-b6f6-36978883d693.png#clientId=u984dde43-e76a-4&from=paste&height=499&id=u4481f8db&name=image.png&originHeight=998&originWidth=1182&originalType=binary&ratio=1&rotation=0&showTitle=false&size=117393&status=done&style=none&taskId=uda1e8286-f585-45a9-bff9-86651c4b5fd&title=&width=591" alt="image.png"></p>
<h3 id="遇到的问题-1"><a href="#遇到的问题-1" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 连接服务器测试报错</span>
jenkins.plugins.publish_over.BapPublisherException: Failed to add SSH key. Message <span class="token punctuation">[</span>invalid privatekey: <span class="token punctuation">[</span>B@59df330d<span class="token punctuation">]</span>_

<span class="token comment" spellcheck="true"># 解决方法</span>
<span class="token function">ssh</span> openSSH 版本过高 改用RSA
ssh-keygen -t rsa -C <span class="token string">"kingpi@163.com"</span> -m PEM -P <span class="token string">""</span> -f ~/.ssh/yooleap.net
</code></pre>
]]></content>
      <categories>
        <category>jenkins部署</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3 使用 百度地图</title>
    <url>//post/evr2ba.html</url>
    <content><![CDATA[<h1 id="Vue3-使用-百度地图的报错的问题"><a href="#Vue3-使用-百度地图的报错的问题" class="headerlink" title="Vue3 使用 百度地图的报错的问题"></a>Vue3 使用 百度地图的报错的问题</h1><p><strong>vue3 项目中使用百度地图总是报错 BMap is not defined.</strong></p>
<h3 id="public-index-html-中加入"><a href="#public-index-html-中加入" class="headerlink" title="public/index.html 中加入"></a>public/index.html 中加入</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script
  type<span class="token operator">=</span><span class="token string">"text/javascript"</span>
  src<span class="token operator">=</span><span class="token string">"http://api.map.baidu.com/api?v=3.0&amp;ak=你的ak"</span>
<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
</code></pre>
<h3 id="eslintrc-js-中加入"><a href="#eslintrc-js-中加入" class="headerlink" title=".eslintrc.js 中加入"></a>.eslintrc.js 中加入</h3><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token punctuation">,</span>
  globals<span class="token punctuation">:</span> <span class="token punctuation">{</span>
     BMap<span class="token punctuation">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="vue-config-js-中加入"><a href="#vue-config-js-中加入" class="headerlink" title="vue.config.js 中加入"></a>vue.config.js 中加入</h3><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
   <span class="token operator">...</span><span class="token punctuation">,</span>
   configureWebpack<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      externals<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">"BMap"</span><span class="token punctuation">:</span> <span class="token string">"BMap"</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="重新运行项目"><a href="#重新运行项目" class="headerlink" title="重新运行项目"></a>重新运行项目</h3><p>在组件中添加 import BMap from ‘BMap’</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BMap<span class="token punctuation">.</span>Map</span><span class="token punctuation">(</span><span class="token string">"map"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> point <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BMap<span class="token punctuation">.</span>Point</span><span class="token punctuation">(</span><span class="token number">116.404</span><span class="token punctuation">,</span> <span class="token number">39.915</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  map<span class="token punctuation">.</span><span class="token function">centerAndZoom</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  map<span class="token punctuation">.</span><span class="token function">addControl</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BMap<span class="token punctuation">.</span>NavigationControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="如果为-TS"><a href="#如果为-TS" class="headerlink" title="如果为 TS"></a>如果为 TS</h2><p>import BMap from ‘BMap’报错</p>
<h3 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h3><h4 id="在-src-下新建文件-shims-BMap-d-ts-内容为"><a href="#在-src-下新建文件-shims-BMap-d-ts-内容为" class="headerlink" title="在 src 下新建文件 shims-BMap.d.ts 内容为"></a>在 src 下新建文件 shims-BMap.d.ts 内容为</h4><pre class=" language-javascript"><code class="language-javascript">declare module <span class="token string">'BMap'</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> BMap<span class="token punctuation">:</span> any
  <span class="token keyword">export</span> <span class="token keyword">default</span> BMap
<span class="token punctuation">}</span>
</code></pre>
<h1 id="参考取自："><a href="#参考取自：" class="headerlink" title="参考取自："></a>参考取自：</h1><p><a href="https://blog.csdn.net/lingwueryao/article/details/115391530"><strong>vue3 使用百度地图</strong></a></p>
]]></content>
      <categories>
        <category>问题记录</category>
      </categories>
      <tags>
        <tag>vue3</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue水平卡片式轮播</title>
    <url>//post/gwcyel.html</url>
    <content><![CDATA[<h1 id="vue-水平卡片式轮播"><a href="#vue-水平卡片式轮播" class="headerlink" title="vue 水平卡片式轮播"></a>vue 水平卡片式轮播</h1><h2 id="基于-vue3-ts-开发的"><a href="#基于-vue3-ts-开发的" class="headerlink" title="基于 vue3 + ts 开发的"></a>基于 vue3 + ts 开发的</h2><p><img src="https://i.loli.net/2021/08/17/O4IPu3Nc9XmYdeK.jpg#id=Ei7oT&originHeight=426&originWidth=997&originalType=binary&ratio=1&status=done&style=none"></p>
<hr>
<p><strong>项目需要完成如上图的轮播，这是水平卡片式轮播。我的项目是基于 vue3+ts 开发的，我使用 swiper 来完成该轮播开发。具体代码如下文</strong></p>
<hr>
<h3 id="首先安装-swiper"><a href="#首先安装-swiper" class="headerlink" title="首先安装 swiper"></a>首先安装 swiper</h3><pre><code>npm install swiper --save
// or
yarn add swiper
</code></pre>
<h3 id="html-代码"><a href="#html-代码" class="headerlink" title="html 代码"></a>html 代码</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>examples<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bannerBox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>swiper-container swiper3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>swiper-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
              <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>swiper-slide<span class="token punctuation">"</span></span>
              <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item, index) in banner<span class="token punctuation">"</span></span>
              <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span>
            <span class="token punctuation">></span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.picture_path<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>swiper-pagination<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>swiper-button-prev swiper-button-white<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>swiper-button-next swiper-button-white<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="javascript-代码"><a href="#javascript-代码" class="headerlink" title="javascript 代码"></a>javascript 代码</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token comment" spellcheck="true">// 有部分没用到你们可以不引用</span>
<span class="token keyword">import</span> Swiper<span class="token punctuation">,</span> <span class="token punctuation">{</span> Autoplay<span class="token punctuation">,</span> EffectCoverflow<span class="token punctuation">,</span> EffectCube<span class="token punctuation">,</span> Pagination<span class="token punctuation">,</span> Navigation <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'swiper'</span><span class="token punctuation">;</span>
Swiper<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">[</span>Autoplay<span class="token punctuation">,</span> EffectCoverflow<span class="token punctuation">,</span> EffectCube<span class="token punctuation">,</span> Pagination<span class="token punctuation">,</span> Navigation<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">'swiper/swiper.min.css'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">'swiper/components/navigation/navigation.scss'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">'swiper/components/pagination/pagination.scss'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      bannerIndex<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      banner<span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          picture_path<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../assets/home/home_bg.png'</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          picture_path<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../assets/home/lunbo.png'</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          picture_path<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../assets/home/home_bg2.png'</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> mySwiper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Swiper</span><span class="token punctuation">(</span><span class="token string">'.swiper3'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      direction<span class="token punctuation">:</span> <span class="token string">'horizontal'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//滑动方向，可设置水平(horizontal)或垂直(vertical)。</span>
      loop<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设置为true 则开启loop模式</span>
      autoplay<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 自动切换时间</span>
      speed<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 切换速度</span>
      slidesPerView<span class="token punctuation">:</span> <span class="token string">'auto'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设置slider容器能够同时显示的slides数量(carousel模式)。类型：number or auto</span>
      centeredSlides<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设定为true时，active slide会居中，而不是默认状态下的居左。</span>
      spaceBetween<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 在slide之间设置距离（单位px）。</span>
      loopAdditionaSlider<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// loop模式下会在slides前后复制若干个slide,，前后复制的个数不会大于原总个数。</span>
      navigation<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        nextEl<span class="token punctuation">:</span> <span class="token string">'.swiper-button-next'</span><span class="token punctuation">,</span>
        prevEl<span class="token punctuation">:</span> <span class="token string">'.swiper-button-prev'</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      pagination<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        el<span class="token punctuation">:</span> <span class="token string">'.swiper-pagination'</span><span class="token punctuation">,</span>
        type<span class="token punctuation">:</span> <span class="token string">'fraction'</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
</code></pre>
<h3 id="css-代码"><a href="#css-代码" class="headerlink" title="css 代码"></a>css 代码</h3><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;style lang="scss" scoped>
<span class="token class">.examples</span></span><span class="token punctuation">{</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.bannerTxt</span></span><span class="token punctuation">{</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>
  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#666666</span><span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.bannerIndex</span></span><span class="token punctuation">{</span>
  <span class="token selector">line-height: 40px;
  text-align: center;
  color: <span class="token id">#666666</span>;
  font-size: 15px;
  text-align: center;
  span</span><span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#b5654d</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.bannerBox</span></span><span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">490</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.swiper3</span> </span><span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.swiper3</span> <span class="token class">.swiper-wrapper</span> <span class="token class">.swiper-slide</span> </span><span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">940</span>px <span class="token important">!important</span><span class="token punctuation">;</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">20</span>px <span class="token important">!important</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.swiper3</span> <span class="token class">.swiper-wrapper</span> <span class="token class">.swiper-slide</span> img </span><span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">490</span>px<span class="token punctuation">;</span>
  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.swiper3</span> <span class="token class">.swiper-wrapper</span> <span class="token class">.swiper-slide-prev</span>,<span class="token class">.swiper3</span> <span class="token class">.swiper-wrapper</span> <span class="token class">.swiper-slide-next</span></span><span class="token punctuation">{</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">490</span>px <span class="token important">!important</span><span class="token punctuation">;</span>
  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>
  // <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.swiper3</span> <span class="token class">.swiper-wrapper</span> <span class="token class">.swiper-slide-prev</span> img,<span class="token class">.swiper3</span> <span class="token class">.swiper-wrapper</span> <span class="token class">.swiper-slide-next</span> img</span><span class="token punctuation">{</span>
  <span class="token property">opacity</span><span class="token punctuation">:</span><span class="token number">0.6</span><span class="token punctuation">;</span> <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">alpha</span><span class="token punctuation">(</span>opacity=<span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.swiper3</span> <span class="token class">.swiper-pagination</span> </span><span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
&lt;/style>
</code></pre>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>swiper6</tag>
      </tags>
  </entry>
  <entry>
    <title>vue相关问题合集</title>
    <url>//post/hhwazy.html</url>
    <content><![CDATA[<h1 id="vue2-和-vue3-router-更改-hash-模式"><a href="#vue2-和-vue3-router-更改-hash-模式" class="headerlink" title="vue2 和 vue3 router 更改 hash 模式"></a>vue2 和 vue3 router 更改 hash 模式</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>项目部署到线上之后，发现刷新页面之后会 404，所以我们需要将 router 的模式从 history 换成 hash</p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>项目采用了 vue3+ts 框架</p></blockquote>
<h2 id="vue2"><a href="#vue2" class="headerlink" title="vue2"></a>vue2</h2><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  mode<span class="token punctuation">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span>
  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  mode<span class="token punctuation">:</span> <span class="token string">'hash'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//或者把这句话注释，默认就是hash</span>
  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h2><h3 id="history-1"><a href="#history-1" class="headerlink" title="history"></a>history</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 引入 createWebHistory</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  history<span class="token punctuation">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>BASE_URL<span class="token punctuation">)</span><span class="token punctuation">,</span>
  routes<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="hash-1"><a href="#hash-1" class="headerlink" title="hash"></a>hash</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 引入 createWebHashHistory</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHashHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  history<span class="token punctuation">:</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  routes<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h1 id="vue-遮罩层禁止滚动"><a href="#vue-遮罩层禁止滚动" class="headerlink" title="vue 遮罩层禁止滚动"></a>vue 遮罩层禁止滚动</h1><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>在遮罩层 div 添加 @touchmove.prevent @mousewheel.prevent</p></blockquote>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>pc 端禁止遮罩层滚动</p></blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//停止页面滚动</span>
<span class="token function">stopMove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> m <span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>overflow<span class="token operator">=</span><span class="token string">'hidden'</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"touchmove"</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//禁止页面滑动</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>

<span class="token comment" spellcheck="true">//开启页面滚动</span>
<span class="token function">Move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> m <span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>overflow<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//出现滚动条</span>
    document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"touchmove"</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h1 id="Syntax-Error-Error-Node-Sass-does-not-yet-support-your-current-environment-OS-X-64-bit-with-Unsupported-runtime-102"><a href="#Syntax-Error-Error-Node-Sass-does-not-yet-support-your-current-environment-OS-X-64-bit-with-Unsupported-runtime-102" class="headerlink" title="Syntax Error: Error: Node Sass does not yet support your current environment: OS X 64-bit with Unsupported runtime (102)"></a>Syntax Error: Error: Node Sass does not yet support your current environment: OS X 64-bit with Unsupported runtime (102)</h1><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>遇到问题：</p>
<ol>
<li>Syntax Error: Error: Node Sass does not yet support your current environment: OS X 64-bit with Unsupported runtime (102)</li>
<li>Node Sass 7.0.0 版本与^4.0.0 不兼容</li>
</ol></blockquote>
<pre class=" language-bash"><code class="language-bash">// 解决方法
使用sass 卸载node-sass
1. 使用npm
 // 卸载
 <span class="token function">npm</span> uninstall node-sass
 // 安装sass
 <span class="token function">npm</span> i -D sass
2. 使用yarn
 // 卸载
 yarn remove node-sass
 // 安装sass
 yarn add -D sass
</code></pre>
<h1 id="在使用-yarn-安装依赖包时报错，提示信息：error-An-unexpected-error-occurred-“https-registry-yarnpkg-com-killable-killable-1-0-0-tgz-connect-ETIMEDOUT-104-16-19-35-443”"><a href="#在使用-yarn-安装依赖包时报错，提示信息：error-An-unexpected-error-occurred-“https-registry-yarnpkg-com-killable-killable-1-0-0-tgz-connect-ETIMEDOUT-104-16-19-35-443”" class="headerlink" title="在使用 yarn 安装依赖包时报错，提示信息：error An unexpected error occurred: “https://registry.yarnpkg.com/killable/-/killable-1.0.0.tgz: connect ETIMEDOUT 104.16.19.35:443”"></a>在使用 yarn 安装依赖包时报错，提示信息：error An unexpected error occurred: “<a href="https://registry.yarnpkg.com/killable/-/killable-1.0.0.tgz">https://registry.yarnpkg.com/killable/-/killable-1.0.0.tgz</a>: connect ETIMEDOUT 104.16.19.35:443”</h1><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a><strong>解决方案：</strong></h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>运行命令，把资源地址设置成 npm 淘宝源</p></blockquote>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org
<span class="token function">npm</span> config <span class="token keyword">set</span> disturl https://npm.taobao.org/dist
</code></pre>
]]></content>
      <categories>
        <category>问题记录</category>
      </categories>
      <tags>
        <tag>vue3</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>可能发生隐式类型转换的场景以及转换原则，应如何避免或巧妙应用</title>
    <url>//post/implicit-type.html</url>
    <content><![CDATA[<h1 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h1><p>有三个函数可以将非数值转换为数值：Number()、parseInt()、parseFloat()。Number()是转型函数，可用于任何数据类型。后两个函数主要用于将字符串转换为数值。</p>
<h1 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h1><ol>
<li>涉及类型转换最多的两个运算符是+和==。+可以是字符串相加，也可以是数字相加，在操作符中存在字符串时，优先转换为字符串。</li>
<li>−∗/- * /−∗/ 只针对Number类型，所以转换的结果只能是Number类型。</li>
</ol>
<h1 id="三种转换"><a href="#三种转换" class="headerlink" title="三种转换"></a>三种转换</h1><h2 id="转换为数字"><a href="#转换为数字" class="headerlink" title="转换为数字"></a>转换为数字</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>ES定义所有对象都有<code>toString()</code>方法，无论它是伪对象还是对象。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>string</td>
<td>解析为数字，含有除了数字之外的字符，则转换为NAN</td>
</tr>
<tr>
<td>boolean</td>
<td>true-&gt;1 false-&gt;0</td>
</tr>
<tr>
<td>undefined</td>
<td>NAN</td>
</tr>
<tr>
<td>null</td>
<td>+0</td>
</tr>
<tr>
<td>[]</td>
<td>+0</td>
</tr>
<tr>
<td>[5]</td>
<td>5</td>
</tr>
<tr>
<td>{}</td>
<td>NAN</td>
</tr>
<tr>
<td>‘111’</td>
<td>111 空字符串转为0 含有字符的字符串转为NaN</td>
</tr>
<tr>
<td>Symbol</td>
<td>报错</td>
</tr>
</tbody></table></blockquote>
<h2 id="转换为字符串"><a href="#转换为字符串" class="headerlink" title="转换为字符串"></a>转换为字符串</h2><table>
<thead>
<tr>
<th>参数</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>boolean</td>
<td>true-&gt;’true’ false-&gt;’false’</td>
</tr>
<tr>
<td>undefined</td>
<td>‘undefined’</td>
</tr>
<tr>
<td>null</td>
<td>‘null’</td>
</tr>
<tr>
<td>Number</td>
<td>直接转换，例如123-&gt;’123’</td>
</tr>
<tr>
<td>[]</td>
<td>“”</td>
</tr>
<tr>
<td>[5,2]</td>
<td>“5.2”</td>
</tr>
<tr>
<td>{}</td>
<td>‘[Object Object]’</td>
</tr>
<tr>
<td>Symbol</td>
<td>‘Symbol()’</td>
</tr>
</tbody></table>
<h2 id="转换为布尔值"><a href="#转换为布尔值" class="headerlink" title="转换为布尔值"></a>转换为布尔值</h2><table>
<thead>
<tr>
<th>参数</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>string</td>
<td>除了空串都是’true’</td>
</tr>
<tr>
<td>undefined</td>
<td>false</td>
</tr>
<tr>
<td>null</td>
<td>false</td>
</tr>
<tr>
<td>Number</td>
<td>除了+0 -0 NaN之外其他都为true</td>
</tr>
<tr>
<td>[]</td>
<td>true</td>
</tr>
<tr>
<td>{}</td>
<td>true</td>
</tr>
<tr>
<td>Symbol</td>
<td>true</td>
</tr>
</tbody></table>
<h1 id="的判断"><a href="#的判断" class="headerlink" title="===的判断"></a>===的判断</h1><ol>
<li>===属于严格相等，直接判断两者的类型是否相同，不同则返回fals</li>
<li>如果相同再比较大小，<code>不会进行任何隐式转换</code></li>
<li>对于引用类型来说，比较的都是引用内存地址，所以===这种方式的比较，除非两者存储的内存地址相同才相等，反之false</li>
</ol>
<h1 id="涉及的类型转换规则"><a href="#涉及的类型转换规则" class="headerlink" title="==涉及的类型转换规则"></a>==涉及的类型转换规则</h1><ul>
<li>两边的类型是否相同，相同的话就比较值的大小。</li>
<li>判断是否是null和undefined，是的话就返回true。</li>
<li>判断类型是否是String和Numner，是的话就把String类型转成Number，再比较。</li>
<li>判断一方是否是Boolean，是的话就把Boolean转换成Number，再进行比较。</li>
<li>如果其中一方是Object，且另一方为String、Number或者Symbol，会将Object转换成字符串，再进行比较。</li>
</ul>
<h2 id=""><a href="#" class="headerlink" title="[]==![]"></a>[]==![]</h2><ol>
<li>首先将![]转为布尔值，[]-&gt;true，!true-&gt;false，false-&gt;0</li>
<li>[]-&gt;0 故0==0，返回true。</li>
</ol>
<h1 id="对象转原始类型是根据什么流程运行的？"><a href="#对象转原始类型是根据什么流程运行的？" class="headerlink" title="对象转原始类型是根据什么流程运行的？"></a>对象转原始类型是根据什么流程运行的？</h1><p>对象转原始类型，会调用内置的[ToPrimitive]函数，对于该函数，其逻辑如下：</p>
<ol>
<li>如果Symbol.toPrimitive()方法，优先调用再返回</li>
<li>调用valueof()，如果转换为原始类型就返回</li>
<li>调用toString()，如果转换为原始类型就返回</li>
<li>如果都没有返回原始类型，会报错</li>
</ol>
<p>并非所有对象的隐式转换都会按照这个流程进行，<code>Date对象</code>会优先尝试toString方法来实现转换，非Date对象按照上述顺序。</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>valueOf</th>
<th>toString</th>
</tr>
</thead>
<tbody><tr>
<td>Object</td>
<td>对象本身，这是默认情况</td>
<td>返回’[object ObjectName]’，其中ObjectName是对象类型的名称</td>
</tr>
<tr>
<td>String</td>
<td>字符串值</td>
<td>返回String对象的值</td>
</tr>
<tr>
<td>Number</td>
<td>数字值</td>
<td>返回数值的字符串表示、还可以返回指定进制表示的字符串</td>
</tr>
<tr>
<td>Boolean</td>
<td>Boolean值</td>
<td>为true，返回’true’；为false，返回’false’</td>
</tr>
<tr>
<td>Array</td>
<td>数组本身</td>
<td>将Array的每个元素转为字符串，并将他们依次连接起来，两个元素之间用英文逗号作为分隔符进行拼接</td>
</tr>
<tr>
<td>Date</td>
<td>存储的时间是从1970年1月1月午夜开始计的毫秒数UTC</td>
<td>返回日期的文本表示</td>
</tr>
<tr>
<td>Function</td>
<td>函数本身</td>
<td>返回如下格式的字符串，其中functionname是一个函数的名称，此函数的toString()方法被调用：”function functionname(){[native code]}”</td>
</tr>
</tbody></table>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><h2 id="-1"><a href="#-1" class="headerlink" title="({} + {})"></a>({} + {})</h2><ol>
<li>进行ToPrimitive转换，由于没有指定PreferredType类型，{}会使默认值为Number，进行ToPrimitive(input, Number)运算。</li>
<li>执行valueOf方法，({}).valueOf(),返回的还是{}对象，不是原始值。</li>
<li>继续执行toString方法，({}).toString(),返回”[object Object]”，是原始值。 故得到最终的结果，”[object Object]” + “[object Object]” = “[object Object] [object Object]”</li>
</ol>
<h2 id="2"><a href="#2" class="headerlink" title="2 * {}"></a>2 * {}</h2><p>首先*运算符只能对number类型进行运算，故第一步就是对{}进行ToNumber类型转换。</p>
<ol>
<li>由于{}是对象类型，故先进行原始类型转换，ToPrimitive(input, Number)运算。</li>
<li>执行valueOf方法，({}).valueOf(),返回的还是{}对象，不是原始值。</li>
<li>继续执行toString方法，({}).toString(),返回”[object Object]”，是原始值。</li>
<li>转换为原始值后再进行ToNumber运算，”[object Object]”就转换为NaN。 故最终的结果为 2 * NaN =NAN</li>
</ol>
<p>参考：<a href="https://juejin.cn/post/7028951669488484359">《可能发生隐式类型转换的场景以及转换原则，应如何避免或巧妙应用》</a></p>
<p><strong>ps：文末附上汇总文章链接<a href="https://kaleb.top/post/self-check-list">《一名【合格】前端工程师的自检清单【自检ing】》</a></strong></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>自检清单</category>
        <category>JS</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>自检清单</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>实现继承的几种方式以及他们的优缺点</title>
    <url>//post/inherit.html</url>
    <content><![CDATA[<p>原文：<a href="https://blog.csdn.net/weixin_43606158/article/details/91489176">《JS实现继承的几种方法总结》</a></p>
<h2 id="一、基本代码"><a href="#一、基本代码" class="headerlink" title="一、基本代码"></a>一、基本代码</h2><p>首先定义一个父类：</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//构造函数</span>
<span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">'Animal'</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sleep <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'正在睡觉！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//原型上面的方法：</span>
Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>food<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'正在吃:'</span> <span class="token operator">+</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="二、实现继承的方法"><a href="#二、实现继承的方法" class="headerlink" title="二、实现继承的方法"></a>二、实现继承的方法</h2><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//核心：将父类的实例作为子类的原型</span>
<span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
Dog<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将Animal的实例挂载到了Dog的原型链上</span>
<span class="token comment" spellcheck="true">//或：</span>
<span class="token comment" spellcheck="true">//Dog.prototype = Object.create(Animal.prototype)</span>
Dog<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'dog'</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//dog</span>
dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">'bone'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//dog正在吃:bone</span>
dog<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//dog正在睡觉！</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog <span class="token keyword">instanceof</span> <span class="token class-name">Animal</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog <span class="token keyword">instanceof</span> <span class="token class-name">Dog</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>
</code></pre>
<p><strong>特点：</strong></p>
<ul>
<li>非常纯粹的继承关系，实例是子类的实例，也是父类的实例</li>
<li>父类新增原型方法/原型属性，子类都能访问的到</li>
<li>简单</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>要想为子类新增属性和方法，必须要在new Animal()这样的语句之后执行，不能放到构造器中</li>
<li>无法实现继承多个</li>
<li>来自原型对象的所有属性被所有实例共享</li>
<li>创建子类实例时，无法向父类构造函数传参</li>
</ul>
<h3 id="构造继承"><a href="#构造继承" class="headerlink" title="构造继承"></a>构造继承</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//核心：使用父类的构造函数增强子类实例，等于是复制父类的实例属性给子类（没用到原型）</span>
<span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Animal<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">'Tom'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//Tom</span>
cat<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//Tom正在睡觉！</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat <span class="token keyword">instanceof</span> <span class="token class-name">Animal</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>
</code></pre>
<p><strong>特点：</strong></p>
<ul>
<li>创建子类实例时，可以向父类传递参数</li>
<li>可以实现多继承（call多个父类对象）</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>实例并不是父类的实例，只是子类的实例</li>
<li>只能继承父类的实例属性和方法，不能继承原型属性/方法</li>
<li>无法实现函数复用，每个子类都有父类实例函数的副本，影响性能</li>
</ul>
<h3 id="实例继承"><a href="#实例继承" class="headerlink" title="实例继承"></a>实例继承</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//核心：为父类实例添加新特性，作为子类实例返回</span>
<span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  instance<span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">'Tom'</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//Tom</span>
cat<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//Tom正在睡觉！</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat <span class="token keyword">instanceof</span> <span class="token class-name">Animal</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>
</code></pre>
<p><strong>特点：</strong></p>
<ul>
<li>不限制调用方式，不管是new子类()还是子类()，返回的对象都具有相同的效果</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>实例是父类的实例，不是子类的实例</li>
<li>不支持多继承</li>
</ul>
<h3 id="拷贝继承"><a href="#拷贝继承" class="headerlink" title="拷贝继承"></a>拷贝继承</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> animal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Cat<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> animal<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  Cat<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">'Tom'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//Tom</span>
cat<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//Tom正在睡觉！</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat <span class="token keyword">instanceof</span> <span class="token class-name">Animal</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span>
</code></pre>
<p><strong>特点：</strong></p>
<ul>
<li>支持多继承</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>效率极低，内存占用高（因为要拷贝父类的属性）</li>
<li>无法获取父类不可枚举的方法（for in不能访问到的）</li>
</ul>
<h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//核心：通过调用父类构造，继承父类的属性并保留传参的优点，然后通过将父类实例作为子类原型，实现函数复用</span>
<span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Animal<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">'Tom'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Cat<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Cat<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Cat<span class="token punctuation">;</span>

<span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//Tom</span>
cat<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//Tom正在睡觉</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat <span class="token keyword">instanceof</span> <span class="token class-name">Animal</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span>
</code></pre>
<p><strong>特点：</strong></p>
<ul>
<li>弥补了方式2的缺陷，可以继承实例属性/方法，也可以继承原型属性/方法</li>
<li>既是子类的实例，也是父类的实例</li>
<li>不存在引用属性共享问题</li>
<li>函数可复用</li>
<li>可传参</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>调用了俩次构造函数，生成了俩份实例（子类实例将子类原型上的那份屏蔽了）</li>
</ul>
<h3 id="寄生组合继承"><a href="#寄生组合继承" class="headerlink" title="寄生组合继承"></a>寄生组合继承</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//核心：通过寄生方式，砍掉父类的实例属性，这样，在调用俩次父类的构造的时候，就不会初始化俩次实例方法/属性，避免了组合继承的缺点。</span>
<span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Animal<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">'Tom'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> Super <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//创建一个没有实例的方法类。</span>
  Super<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
  Cat<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将实例作为子类的原型。</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//Tom</span>
cat<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//Tom正在睡觉</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat <span class="token keyword">instanceof</span> <span class="token class-name">Animal</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>

Cat<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Cat<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//修复构造函数</span>
</code></pre>
<p><strong>特点：</strong></p>
<ul>
<li>基本上是完美的</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>实现起来较为复杂</li>
</ul>
<h3 id="class-extends-ES6"><a href="#class-extends-ES6" class="headerlink" title="class - extends - - ES6"></a>class - extends - - ES6</h3><p>语法糖，底层任然是原型链继承的方式<br><a href="https://es6.ruanyifeng.com/#docs/class-extends">https://es6.ruanyifeng.com/#docs/class-extends</a></p>
<p><strong>ps：文末附上汇总文章链接<a href="https://kaleb.top/post/self-check-list">《一名【合格】前端工程师的自检清单【自检ing】》</a></strong></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>自检清单</category>
        <category>JS</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>自检清单</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>instanceof的底层实现原理，手动实现一个instanceof</title>
    <url>//post/instanceof-realize.html</url>
    <content><![CDATA[<h2 id="instanceof-的作用"><a href="#instanceof-的作用" class="headerlink" title="instanceof 的作用"></a>instanceof 的作用</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>引用数据类型判断： 用来判断一个引用数据类型是否属于构造函数</p>
<p>继承关系判断： 用来判断一个实例是否属于它的父类型</p></blockquote>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>首先判断左边的变量的隐式原型(proto)是否全等于右边的显式原型(prototype)，如果相等返回true，如果不等则沿着原型链依次向上进行判断，如果都不等则返回false</p></blockquote>
<h2 id="手动实现-instanceof"><a href="#手动实现-instanceof" class="headerlink" title="手动实现 instanceof"></a>手动实现 instanceof</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> instance_of <span class="token punctuation">(</span>L<span class="token punctuation">,</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//L 表示左表达式，R 表示右表达式</span>
  <span class="token keyword">var</span> O <span class="token operator">=</span> R<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
  L <span class="token operator">=</span> L<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> L <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> O <span class="token operator">===</span> L <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里重点：当 O 严格等于 L 时，返回true </span>
    L <span class="token operator">=</span> L<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>参考：<a href="https://juejin.cn/post/6844903985086726158">《instanceof的底层实现原理，手动实现一个instanceof》</a></p>
<p><strong>ps：文末附上汇总文章链接<a href="https://kaleb.top/post/self-check-list">《一名【合格】前端工程师的自检清单【自检ing】》</a></strong></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>自检清单</category>
        <category>JS</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>自检清单</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript对象的底层数据结构是什么</title>
    <url>//post/js-data-structure.html</url>
    <content><![CDATA[<p>上一篇文章归纳了<code>javascript</code>的数据类型，归根到底数据类型就分为两类，一种是基本类型，一种是引用类型。文章链接《JavaScript规定了几种语言类型》</p>
<h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><ul>
<li>内容：<code>String</code>、<code>Number</code>、<code>Boolean</code>、<code>Undefined</code>、<code>Null</code>、<code>Symbol</code>、<code>BigInt</code></li>
<li>特点：值不可变，无属性无方法，保存在栈内存中、值比较。</li>
</ul>
<h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><ul>
<li>内容：引用类型统称为Object类型。细分的话有：<code>Object</code>、<code>Array</code>、<code>Date</code>、<code>RegExp</code>、<code>Function</code>  等特点：引用类型的值同时保存在栈内存和堆内存中的对象。栈区内存保存变量标识符，堆内存存储对象的地址</li>
</ul>
<h2 id="什么是数据结构？"><a href="#什么是数据结构？" class="headerlink" title="什么是数据结构？"></a>什么是数据结构？</h2><p>数据结构是<strong>一种组织、管理和存储数据的形式</strong>，这种形式<strong>方便数据访问和修改</strong>。</p>
<h3 id="JavaScript使用的是-堆-Heap-和-栈-Stack"><a href="#JavaScript使用的是-堆-Heap-和-栈-Stack" class="headerlink" title="JavaScript使用的是 堆(Heap) 和 栈( Stack)"></a>JavaScript使用的是 堆(Heap) 和 栈( Stack)</h3><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><ul>
<li><p>是堆内存的简称，堆是动态分配内存，内存大小不固定，也不会自动释放</p>
</li>
<li><p>队列优先,先进先出，方便存储和开辟内存空间。</p>
</li>
</ul>
<h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><ul>
<li>栈内存的简称，自动分配相对固定大小的内存空间，并由系统自动释放。</li>
<li>基本类型存储在栈内存的好处就是，内存可以及时得到回收，相对于堆来说，更加容易管理内存空间</li>
<li>线性结构，后进先出，便于管理。</li>
</ul>
<h3 id="数据结构相关-—-浅拷贝、深拷贝"><a href="#数据结构相关-—-浅拷贝、深拷贝" class="headerlink" title="数据结构相关 — 浅拷贝、深拷贝"></a>数据结构相关 — 浅拷贝、深拷贝</h3><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><p>创建新的数据，这个数据有着原始数据属性值的一份精确拷贝</p>
<p>浅拷贝是拷贝一层，深层次的引用类型则共享内存地址</p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>浅拷贝实现方法：</p>
<ul>
<li>Object.assign</li>
<li>slice()</li>
<li>concat()</li>
<li>拓展运算符 …</li>
</ul></blockquote>
<h5 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    nature<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'smart'</span><span class="token punctuation">,</span> <span class="token string">'good'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    names<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        name1<span class="token punctuation">:</span> <span class="token string">'fx'</span><span class="token punctuation">,</span>
        name2<span class="token punctuation">:</span> <span class="token string">'xka'</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    love<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fx is a great girl'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> newObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h5 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fxArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"One"</span><span class="token punctuation">,</span> <span class="token string">"Two"</span><span class="token punctuation">,</span> <span class="token string">"Three"</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> fxArrs <span class="token operator">=</span> fxArr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
fxArrs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"love"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fxArr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["One", "Two", "Three"]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fxArrs<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["One", "love", "Three"]</span>
</code></pre>
<h5 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fxArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"One"</span><span class="token punctuation">,</span> <span class="token string">"Two"</span><span class="token punctuation">,</span> <span class="token string">"Three"</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> fxArrs <span class="token operator">=</span> fxArr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
fxArrs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"love"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fxArr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["One", "Two", "Three"]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fxArrs<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["One", "love", "Three"]</span>
</code></pre>
<h5 id="拓展运算符-…"><a href="#拓展运算符-…" class="headerlink" title="拓展运算符 …"></a>拓展运算符 …</h5><pre class=" language-js"><code class="language-js">onst fxArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"One"</span><span class="token punctuation">,</span> <span class="token string">"Two"</span><span class="token punctuation">,</span> <span class="token string">"Three"</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> fxArrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>fxArr<span class="token punctuation">]</span>
fxArrs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"love"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fxArr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["One", "Two", "Three"]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fxArrs<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["One", "love", "Three"]</span>
</code></pre>
<h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><p>深拷贝开辟一个新的栈，两个对象属完成相同，但是对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性</p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>  实现方法：</p>
<ul>
<li>_.cloneDeep()</li>
<li>jQuery.extend()</li>
<li>JSON.stringify()</li>
<li>手写循环递归</li>
</ul></blockquote>
<h5 id="cloneDeep"><a href="#cloneDeep" class="headerlink" title="_.cloneDeep()"></a>_.cloneDeep()</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'lodash'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    b<span class="token punctuation">:</span> <span class="token punctuation">{</span> f<span class="token punctuation">:</span> <span class="token punctuation">{</span> g<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    c<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">cloneDeep</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f <span class="token operator">===</span> obj2<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span>
</code></pre>
<h5 id="jQuery-extend"><a href="#jQuery-extend" class="headerlink" title="jQuery.extend()"></a>jQuery.extend()</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> $ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jquery'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    b<span class="token punctuation">:</span> <span class="token punctuation">{</span> f<span class="token punctuation">:</span> <span class="token punctuation">{</span> g<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    c<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f <span class="token operator">===</span> obj2<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>
</code></pre>
<h5 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify()"></a>JSON.stringify()</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj2<span class="token operator">=</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 但是这种方式存在弊端，会忽略undefined、symbol和函数</span>
</code></pre>
<h5 id="手写循环递归"><a href="#手写循环递归" class="headerlink" title="手写循环递归"></a>手写循环递归</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果是null或者undefined我就不进行拷贝操作</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">// 可能是对象或者普通的值  如果是函数的话是不需要深拷贝</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">// 是对象的话就要进行深拷贝</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> hash<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> cloneObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">obj<span class="token punctuation">.</span>constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">// 找到的是所属类原型上的constructor,而原型上的 constructor指向的是当前类本身</span>
  hash<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> cloneObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 实现一个递归拷贝</span>
      cloneObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> cloneObj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>ps：文末附上汇总文章链接<a href="https://kaleb.top/post/self-check-list">《一名【合格】前端工程师的自检清单【自检ing】》</a></strong></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>自检清单</category>
        <category>JS</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>自检清单</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript规定了几种语言类型</title>
    <url>//post/js-specThe-langType.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JavaScript是什么？这里引用<a href="https://baike.baidu.com/item/JavaScript">百度百科</a>的说法</p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>JavaScript（简称“JS”） 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。虽然它是作为开发Web页面的脚本语言而出名，但是它也被用到了很多非浏览器环境中，JavaScript 基于原型编程、多范式的动态脚本语言，并且支持面向对象、命令式、声明式、函数式编程范式。</p></blockquote>
<h2 id="语言类型"><a href="#语言类型" class="headerlink" title="语言类型"></a>语言类型</h2><p><strong>ps：检测数据类型的操作符</strong><code>typeof</code></p>
<h3 id="Boolean：布尔值，true或者false，表示逻辑上的真和假【基本类型】"><a href="#Boolean：布尔值，true或者false，表示逻辑上的真和假【基本类型】" class="headerlink" title="Boolean：布尔值，true或者false，表示逻辑上的真和假【基本类型】"></a>Boolean：布尔值，true或者false，表示逻辑上的真和假【基本类型】</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> a<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 'boolean'</span>
</code></pre>
<h3 id="number：数字【基本类型】"><a href="#number：数字【基本类型】" class="headerlink" title="number：数字【基本类型】"></a>number：数字【基本类型】</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 数字类型，最大2^53 - 1，即 9007199254740991，大于这个值可能会失去精度</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">9007199254740991</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">90071992547409911</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">NaN</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// NaN是特殊的number类型</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 9007199254740991</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 90071992547409900 失去精度</span>
<span class="token keyword">typeof</span> a<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 'number'</span>
<span class="token keyword">typeof</span> c<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 'number'</span>
</code></pre>
<h3 id="string：字符串【基本类型】"><a href="#string：字符串【基本类型】" class="headerlink" title="string：字符串【基本类型】"></a>string：字符串【基本类型】</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 字符串类型</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'aaa'</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> a<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 'string'</span>
</code></pre>
<h3 id="undefined：未定义【基本类型】"><a href="#undefined：未定义【基本类型】" class="headerlink" title="undefined：未定义【基本类型】"></a>undefined：未定义【基本类型】</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 声明了但未定义值</span>
<span class="token keyword">let</span> a<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>
<span class="token keyword">typeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'undefined'</span>
</code></pre>
<h3 id="null：空值【基本类型】"><a href="#null：空值【基本类型】" class="headerlink" title="null：空值【基本类型】"></a>null：空值【基本类型】</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 空值</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> a<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// object</span>
</code></pre>
<p><strong>ps: 虽然<code>typeof null</code>为<code>object</code>，但这只是<code>JavaScript</code> 存在的一个悠久 <code>Bug</code>，不代表<code>null</code>就是引用数据类型，并且<code>null</code>本身也不是对象</strong></p>
<h3 id="symbol：-独一无二的值【基本类型】"><a href="#symbol：-独一无二的值【基本类型】" class="headerlink" title="symbol： 独一无二的值【基本类型】"></a>symbol： 独一无二的值【基本类型】</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 独一无二的值</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> a<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// symbol</span>
</code></pre>
<p><strong>ps: ES6 引入了一种新的原始数据类型<code>Symbol</code>，表示独一无二的值。<code>Symbol</code>类型实例化出的<code>key</code>是不能通过<code>Object.keys()</code>,<code>for..in</code>,<code>for..of</code>,来枚举的</strong></p>
<h3 id="BigInt-大整数【基本类型】"><a href="#BigInt-大整数【基本类型】" class="headerlink" title="BigInt: 大整数【基本类型】"></a>BigInt: 大整数【基本类型】</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 要创建 a `BigInt`，请将 n 附加到整数末尾或调用 BigInt()</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> 999n<span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> a<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 'bigint'</span>
<span class="token keyword">typeof</span> b<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 'bigint'</span>
</code></pre>
<p><strong>ps: <code>BigInt</code>目前已经进入Stage 4阶段 下一个版本将会作为新特性出现在ECMAScript 。<code>BigInt</code>是JavaScript中一种可以用来表示任意精度整数的基本数据类型。使用<code>BigInt</code>可以安全的存储和操作任意大小的整数而不受<code>Number</code>类型的安全值范围的限制</strong></p>
<h3 id="object：对象，包含array-date等【引用类型】"><a href="#object：对象，包含array-date等【引用类型】" class="headerlink" title="object：对象，包含array,date等【引用类型】"></a>object：对象，包含array,date等【引用类型】</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> a<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 'object'</span>
<span class="token keyword">typeof</span> b<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 'object'</span>
<span class="token keyword">typeof</span> c<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 'object'</span>
</code></pre>
<p><strong>ps：文末附上汇总文章链接《<a href="https://kaleb.top/post/self-check-list">一名【合格】前端工程师的自检清单【自检ing】</a>》</strong></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>自检清单</category>
        <category>JS</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>自检清单</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript中的变量在内存中的具体存储形式</title>
    <url>//post/js-storageForm.html</url>
    <content><![CDATA[<h1 id="栈内存和堆内存"><a href="#栈内存和堆内存" class="headerlink" title="栈内存和堆内存"></a>栈内存和堆内存</h1><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>JavaScript中的变量分为基本类型和引用类型 基本类型是保存在栈内存中的简单数据段，它们的值都有固定的大小，保存在栈空间，通过按值访问</p>
<p>引用类型是保存在堆内存中的对象，值大小不固定，栈内存中存放的该对象的访问地址指向堆内存中的对象，JavaScript不允许直接访问堆内存中的位置，因此操作对象时，实际操作对象的引用</p></blockquote>
<p><img src="https://gitee.com/CalebChen/pic-img/raw/master/blog-img/posts/storageForm.jpg"></p>
<p><strong>ps：文末附上汇总文章链接<a href="https://kaleb.top/post/self-check-list">《一名【合格】前端工程师的自检清单【自检ing】》</a></strong></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>自检清单</category>
        <category>JS</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>自检清单</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>至少可以说出三种判断JavaScript数据类型的方式，以及他们的优缺点，如何准确的判断数组类型</title>
    <url>//post/judgment-type-method.html</url>
    <content><![CDATA[<p>我们先复习一下js的数据类型。</p>
<p>JavaScript 的数据类型包括原始类型和对象类型：</p>
<ul>
<li>原始类型：Null、Undefined、Number、String、Boolean、Symbol、BigInt</li>
<li>对象类型：Object</li>
</ul>
<p>我们习惯把对象称为引用类型，当然还有很多特殊的引用类型，比如 Function、Array、RegExp、Math、Date、Error、Set、Map、各种定型数组 TypedArray 等。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2813cd17e4f34736905226f44b4cf074~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp"></p>
<p>JavaScript 中检测数据类型的方法有哪些你知道吗？</p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><ul>
<li>typeof</li>
<li>instanceof</li>
<li>constructor</li>
<li>Object.prototype.toString.call()</li>
</ul></blockquote>
<h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">typeof</span> <span class="token string">'a'</span> <span class="token comment" spellcheck="true">// 'string'</span>
<span class="token keyword">typeof</span> <span class="token number">1</span>   <span class="token comment" spellcheck="true">// 'number' </span>
<span class="token keyword">typeof</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 'boolean'</span>
<span class="token keyword">typeof</span> undefined <span class="token comment" spellcheck="true">// 'undefined'</span>
<span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'symbol'</span>
<span class="token keyword">typeof</span> 1n <span class="token comment" spellcheck="true">// 'bigint'</span>

<span class="token keyword">typeof</span> <span class="token keyword">null</span> <span class="token comment" spellcheck="true">// 'object'</span>

<span class="token keyword">typeof</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 'function'</span>
<span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 'object'</span>
<span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 'object'</span>
<span class="token keyword">typeof</span> <span class="token operator">/</span>a<span class="token operator">/</span> <span class="token comment" spellcheck="true">// 'object'</span>
<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'object'</span>
<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'object'</span>
<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'object'</span>
<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'object'</span>
</code></pre>
<p><strong>两条结论：</strong></p>
<ol>
<li>typeof 可以判断除了 null 以外的原始类型。</li>
<li>typeof 只能判断对象类型中的 Function，其他判断不出来，都为 object。</li>
</ol>
<h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>

<span class="token keyword">const</span> Fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'构造函数'</span>
<span class="token punctuation">}</span>
Fn<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>
</code></pre>
<p><strong>两条结论：</strong></p>
<ol>
<li><code>instanceof</code> 可以准确判断对象(引用)类型，但是不能准确检测原始类型。</li>
<li>由于我们可以随意修改原型的指向导致检测结果不准确，所以这种方法是不安全的。</li>
</ol>
<p>虽然 <code>instanceof</code> 不能检测原始类型，但是有一种方法可以让其用于检测原始类型。</p>
<p><code>Symbol.hasInstance</code> 允许我们自定义 <code>instanceof</code> 的行为。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">PrimitiveNumber</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>hasInstance<span class="token punctuation">]</span> <span class="token operator">=</span> x  <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token number">123</span> <span class="token keyword">instanceof</span> <span class="token class-name">PrimitiveNumber</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>

<span class="token keyword">class</span> <span class="token class-name">PrimitiveString</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>hasInstance<span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token string">'abc'</span> <span class="token keyword">instanceof</span> <span class="token class-name">PrimitiveString</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>

<span class="token keyword">class</span> <span class="token class-name">PrimitiveBoolean</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>hasInstance<span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'boolean'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token boolean">false</span> <span class="token keyword">instanceof</span> <span class="token class-name">PrimitiveBoolean</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>

<span class="token keyword">class</span> <span class="token class-name">PrimitiveSymbol</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>hasInstance<span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'symbol'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Symbol<span class="token punctuation">.</span>iterator <span class="token keyword">instanceof</span> <span class="token class-name">PrimitiveSymbol</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>

<span class="token keyword">class</span> <span class="token class-name">PrimitiveNull</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>hasInstance<span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">null</span> <span class="token keyword">instanceof</span> <span class="token class-name">PrimitiveNull</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>

<span class="token keyword">class</span> <span class="token class-name">PrimitiveUndefined</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>hasInstance<span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">===</span> undefined<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
undefined <span class="token keyword">instanceof</span> <span class="token class-name">PrimitiveUndefined</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>
</code></pre>
<p>代码来源:  <a href="https://link.juejin.cn/?target=https://www.30secondsofcode.org/blog/s/javascript-primitive-instanceof">有没有一种方法可以将instanceof用于原始JavaScript值？</a></p>
<h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 所以需要加上一个小括号，小括号运算符能够把数值转换为对象</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token comment" spellcheck="true">// ƒ Number() { [native code] }</span>
<span class="token comment" spellcheck="true">// 或者</span>
<span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span>constructor <span class="token comment" spellcheck="true">// ƒ Number() { [native code] }</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">'前端食堂'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ƒ String() { [native code] }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>constructor <span class="token operator">===</span> String<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>

<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ƒ Number() { [native code] }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Number<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>

<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token boolean">true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ƒ Boolean() { [native code] }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Boolean<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>

<span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ƒ Array() { [native code] }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>

<span class="token keyword">const</span> e <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ƒ Object() { [native code] }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>

<span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ƒ Function() { [native code] }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Function<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>

<span class="token keyword">const</span> g <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ƒ Symbol() { [native code] }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Symbol<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>

<span class="token keyword">const</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ƒ Date() { [native code] }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Date<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>

<span class="token keyword">const</span> i <span class="token operator">=</span> 11n
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ƒ BigInt() { [native code] }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>constructor <span class="token operator">===</span> BigInt<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>

<span class="token keyword">const</span> j <span class="token operator">=</span> <span class="token regex">/a/</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ƒ RegExp() { [native code] }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">.</span>constructor <span class="token operator">===</span> RegExp<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>


String<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> <span class="token string">'aaa'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>constructor <span class="token operator">===</span> String<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>

<span class="token keyword">const</span> k <span class="token operator">=</span> <span class="token keyword">null</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Cannot read property 'constructor' of null</span>

<span class="token keyword">const</span> l <span class="token operator">=</span> undefined
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Cannot read property 'constructor' of undefined</span>
</code></pre>
<p>两条结论：</p>
<ol>
<li>除了 null 和 undefined，<code>constructor</code> 可以正确检测出原始类型和对象(引用)类型。</li>
<li>由于我们可以随意修改 <code>constructor</code> 导致检测结果不准确，所以这种方法是不安全的。</li>
</ol>
<h3 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call()"></a>Object.prototype.toString.call()</h3><p>toString() 方法返回一个表示该对象的字符串，我们可以改变它的 this 指向，将 this 指向要检测的值，即可返回当前检测值的信息。</p>
<pre class=" language-js"><code class="language-js">Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// '[object Object]'</span>

Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// '[object Object]'</span>
Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// '[object String]'</span>
Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// '[object Number]'</span>
Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// '[object Boolean]'</span>
Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// '[object Null]'</span>
Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// '[object Undefined]'</span>
Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// '[object Symbol]'</span>
Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>11n<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// '[object BigInt]'</span>
Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token regex">/a/</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// '[object RegExp]'</span>
Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// '[object Date]'</span>
Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// '[object Array]'</span>
Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// '[object Function]'</span>
Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// '[object Error]'</span>
Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// '[object Set]'</span>
Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// '[object Map]'</span>
</code></pre>
<p><strong>ps：文末附上汇总文章链接<a href="https://kaleb.top/post/self-check-list">《一名【合格】前端工程师的自检清单【自检ing】》</a></strong></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>自检清单</category>
        <category>JS</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>自检清单</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>出现小数精度丢失的原因，JavaScript可以存储的最大数字、最大安全数字，JavaScript处理大数字的方法、避免精度丢失的方法</title>
    <url>//post/loss-of-precision.html</url>
    <content><![CDATA[<p>一个经典的面试题</p>
<pre class=" language-js"><code class="language-js"><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">===</span> <span class="token number">0.3</span> <span class="token comment" spellcheck="true">// false</span>
</code></pre>
<h2 id="精度丢失原因"><a href="#精度丢失原因" class="headerlink" title="精度丢失原因"></a>精度丢失原因</h2><p>计算机是通过二进制的方式存储数据的，所以计算机计算0.1+0.2的时候，实际上是计算的两个数的二进制的和。</p>
<p>0.1的二进制是<code>0.0001100110011001100...</code>（1100循环），0.2的二进制是：<code>0.00110011001100...</code>（1100循环），这两个数的二进制都是无限循环的数。</p>
<p><code>JavaScript</code> 中数字的存储遵循 <code>IEEE 754</code> 标准，是以 64 位双精度格式来存储数字的。</p>
<p>一般我们认为数字包括整数和小数，但是在 JavaScript 中只有一种数字类型：Number，它的实现遵循IEEE 754标准，使用64位固定长度来表示，也就是标准的double双精度浮点数。在二进制科学表示法中，双精度浮点数的小数部分最多只能保留52位，再加上前面的1，其实就是保留53位有效数字，剩余的需要舍去，遵从“0舍1入”的原则。</p>
<p>  根据这个原则，0.1和0.2的二进制数相加，再转化为十进制数就是：<code>0.30000000000000004</code>。</p>
<h2 id="最大数字、最大安全数"><a href="#最大数字、最大安全数" class="headerlink" title="最大数字、最大安全数"></a>最大数字、最大安全数</h2><ul>
<li><p>能够表示的最大数字<code>Number.MAX_VALUE</code>等于<code>1.7976931348623157e+308</code></p>
</li>
<li><p>最大安全数字<code>Number.MAX_SAFE_INTEGER</code>等于<code>9007199254740991</code></p>
</li>
</ul>
<h2 id="JS处理最大数字的方法"><a href="#JS处理最大数字的方法" class="headerlink" title="JS处理最大数字的方法"></a>JS处理最大数字的方法</h2><h3 id="json-bigint"><a href="#json-bigint" class="headerlink" title="json-bigint"></a>json-bigint</h3><h4 id="官方示例"><a href="#官方示例" class="headerlink" title="官方示例"></a>官方示例</h4><pre class=" language-js"><code class="language-js">
<span class="token keyword">var</span> JSONbig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'json-bigint'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> JSONstrict <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'json-bigint'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span> strict<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> dupkeys <span class="token operator">=</span> <span class="token string">'{ "dupkey": "value 1", "dupkey": "value 2"}'</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'\n\nDuplicate Key test with both lenient and strict JSON parsing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Input:'</span><span class="token punctuation">,</span> dupkeys<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> works <span class="token operator">=</span> JSONbig<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dupkeys<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'JSON.parse(dupkeys).dupkey: %s'</span><span class="token punctuation">,</span> works<span class="token punctuation">.</span>dupkey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> fails <span class="token operator">=</span> <span class="token string">'will stay like this'</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  fails <span class="token operator">=</span> JSONstrict<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dupkeys<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ERROR!! Should never get here'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
    <span class="token string">'Succesfully catched expected exception on duplicate keys: %j'</span><span class="token punctuation">,</span>
    e
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 这些事打印内容</span>
Duplicate Key test <span class="token keyword">with</span> big number JSON
Input<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">"dupkey"</span><span class="token punctuation">:</span> <span class="token string">"value 1"</span><span class="token punctuation">,</span> <span class="token string">"dupkey"</span><span class="token punctuation">:</span> <span class="token string">"value 2"</span><span class="token punctuation">}</span>
JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dupkeys<span class="token punctuation">)</span><span class="token punctuation">.</span>dupkey<span class="token punctuation">:</span> value <span class="token number">2</span>
Succesfully catched expected exception on duplicate keys<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"SyntaxError"</span><span class="token punctuation">,</span><span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"Duplicate key \"dupkey\""</span><span class="token punctuation">,</span><span class="token string">"at"</span><span class="token punctuation">:</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token string">"text"</span><span class="token punctuation">:</span><span class="token string">"{ \"dupkey\": \"value 1\", \"dupkey\": \"value 2\"}"</span><span class="token punctuation">}</span>
</code></pre>
<p>参考：<a href="https://juejin.cn/post/7039249706735632420">js大数字精度丢失问题</a></p>
<h2 id="处理精度缺失的方法"><a href="#处理精度缺失的方法" class="headerlink" title="处理精度缺失的方法"></a>处理精度缺失的方法</h2><h3 id="toPrecision-s-parseFloat"><a href="#toPrecision-s-parseFloat" class="headerlink" title="toPrecision +s parseFloat"></a>toPrecision +s parseFloat</h3><p>使用 <code>toPrecision</code> 凑整并 <code>parseFloat</code>转成数字后再显示</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 示例</span>
<span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token number">1.4000000000000001</span><span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">1.4</span>  <span class="token comment" spellcheck="true">// True</span>
</code></pre>
<p>封装成方法就是：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">strip</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> precision <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">+</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span>precision<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="Number-EPSILON"><a href="#Number-EPSILON" class="headerlink" title="Number.EPSILON"></a>Number.EPSILON</h3><p>在ES6中，提供了<code>Number.EPSILON</code>属性，而它的值就是2-52，只要判断<code>0.1+0.2-0.3</code>是否小于<code>Number.EPSILON</code>，如果小于，就可以判断为0.1+0.2 ===0.3</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">numberepsilon</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">{</span> 
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>arg1 <span class="token operator">-</span> arg2<span class="token punctuation">)</span> <span class="token operator">&lt;</span> Number<span class="token punctuation">.</span>EPSILON<span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">numberepsilon</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>
</code></pre>
<p><strong>ps：文末附上汇总文章链接<a href="https://kaleb.top/post/self-check-list">《一名【合格】前端工程师的自检清单【自检ing】》</a></strong></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>自检清单</category>
        <category>JS</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>自检清单</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>MVVM框架设计理念</title>
    <url>//post/mvvm-design-concept.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>目前比较流行的几个框架，例如vue.js、react.js、avalon、angular.js等，给自己的定位都是属于mvvm类型框架，那么什么是mvvm框架呢？mvvm是什么意思呢？</p>
<p>聊到mvvm就要提一下java语言中的mvc模式，所以我们想来看下什么是mvc。</p>
<h1 id="MVC概要"><a href="#MVC概要" class="headerlink" title="MVC概要"></a>MVC概要</h1><p><img src="https://upload-images.jianshu.io/upload_images/2002187-4d82bf5244e9d66e.png?imageMogr2/auto-orient/strip%7CimageView2/2/format/webp"><br>这是苹果开发者文档中摘过来的图片，表明了三者之间的关系，简单描述了三者作用</p>
<p>Model：数据模型，用来存储数据</p>
<p>View：视图界面，用来展示UI界面和响应用户交互</p>
<p>Controller：控制器(大管家角色)，监听模型数据的改变和控制视图行为、处理用户交互</p>
<p>view操作会触发controller去改变model，然后model再去改变视图，这么以来，三个部分代码都分开来写，逻辑就会清晰很多；mvvm就是基于这种设计理念，来创新的提出mvvm这种开发理念来处理前端开发，可以说mvvm就是相当于前端的mvc，下面就来说下mvvm。</p>
<h1 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h1><p>mvvm即Model-View-ViewModel，mvvm的设计原理是基于mvc的，所以说mvvm不算是一种创新，充其量是一种改造，这其中的ViewModel便是一个小小的创新；如下图所示：<br><img src="https://images2018.cnblogs.com/blog/1048550/201807/1048550-20180701105302049-745020808.png"><br>以上图中可看出三者之间的关系；可以将ViewMode看作是Model和View的连接桥，View可以通过事件绑定Model，Model可以通过数据绑定View，通过ViewMode可以实现数据和视图的完全分离。</p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>参考：<a href="https://www.cnblogs.com/gaosong-shuhong/p/9253973.html">什么是mvvm设计模式</a></p></blockquote>
<p><strong>ps：文末附上汇总文章链接<a href="https://kaleb.top/post/self-check-list">《一名【合格】前端工程师的自检清单【自检ing】》</a></strong></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>自检清单</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>自检清单</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>描述new一个对象的详细过程，手动实现一个new操作符</title>
    <url>//post/new-operator.html</url>
    <content><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例。 (MDN)</p></blockquote>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ul>
<li>创建一个空的简单JavaScript对象（即{}）；</li>
<li>链接该对象（即设置该对象的构造函数）到另一个对象 ；</li>
<li>将步骤1新创建的对象作为this的上下文 ；</li>
<li>如果该函数没有返回对象，则返回this。</li>
</ul>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>Object = new constructor([argument])</p>
<h2 id="模拟实现"><a href="#模拟实现" class="headerlink" title="模拟实现"></a>模拟实现</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/**
 * 模仿new关键词实现
 * @param {Function} constructor 构造函数
 * @param  {...any} argument 任意参数
 */</span>
<span class="token keyword">const</span> _new <span class="token operator">=</span>  <span class="token punctuation">(</span>constructor<span class="token punctuation">,</span><span class="token operator">...</span>argument<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> 
    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//创建一个空的简单对象 </span>
    obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> constructor<span class="token punctuation">.</span>prototype <span class="token comment" spellcheck="true">//设置原型</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> argument<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//新创建的对象作为this的上下文传递给构造函数</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> res <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token operator">?</span> res <span class="token punctuation">:</span> obj <span class="token comment" spellcheck="true">//如果该函数没有返回对象，则返回this(这个this指constructor执行时内部的this,即res))。 </span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name 
    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex
<span class="token punctuation">}</span>

<span class="token keyword">const</span> people <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Ben'</span><span class="token punctuation">,</span><span class="token string">'man'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> peopleOther <span class="token operator">=</span> <span class="token function">_new</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span><span class="token string">'Alice'</span><span class="token punctuation">,</span><span class="token string">'woman'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'people'</span><span class="token punctuation">,</span>people<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// people Person { name: 'Ben', sex: 'man' }</span>
console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'peopleOther'</span><span class="token punctuation">,</span>peopleOther<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// peopleOther Person { name: 'Alice', sex: 'woman' }</span>
console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'people.__proto__'</span><span class="token punctuation">,</span>people<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//people.__proto__ Person {}</span>
console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'peopleOther.__proto__'</span><span class="token punctuation">,</span>peopleOther<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//peopleOther.__proto__ Person {}</span>
</code></pre>
<p>可以看到 返回结果结构一致 同时Constructor和原型也一致</p>
<p>原文：<a href="https://juejin.cn/post/6844904128276070407">《描述new一个对象的详细过程以及手动实现一个new操作符》</a></p>
<p><strong>ps：文末附上汇总文章链接<a href="https://kaleb.top/post/self-check-list">《一名【合格】前端工程师的自检清单【自检ing】》</a></strong></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>自检清单</category>
        <category>JS</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>自检清单</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>null和undefined的区别</title>
    <url>//post/null-undefined-diff.html</url>
    <content><![CDATA[<h2 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h2><p>undefined 的字面意思就是：未定义的值 。这个值的语义是，希望表示一个变量最原始的状态，而非人为操作的结果 。 这种原始状态会在以下 4 种场景中出现：</p>
<h3 id="声明一个变量，但是没有赋"><a href="#声明一个变量，但是没有赋" class="headerlink" title="声明一个变量，但是没有赋"></a>声明一个变量，但是没有赋</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> foo<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>
</code></pre>
<p>访问 foo，返回了 undefined，表示这个变量自从声明了以后，就从来没有使用过，也没有定义过任何有效的值。</p>
<h3 id="访问对象上不存在的属性或者未定义的变量"><a href="#访问对象上不存在的属性或者未定义的变量" class="headerlink" title="访问对象上不存在的属性或者未定义的变量"></a>访问对象上不存在的属性或者未定义的变量</h3><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> demo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>
</code></pre>
<p>访问 Object 对象上的 foo 属性，返回 undefined ， 表示Object 上不存在或者没有定义名为 foo 的属性；对未声明的变量执行typeof操作符返回了undefined值。</p>
<h3 id="函数定义了形参，但没有传递实参"><a href="#函数定义了形参，但没有传递实参" class="headerlink" title="函数定义了形参，但没有传递实参"></a>函数定义了形参，但没有传递实参</h3><pre class=" language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">//函数定义了形参 a</span>
function <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token number">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//未传递实参</span>
</code></pre>
<p>函数 fn 定义了形参 a，但 fn 被调用时没有传递参数，因此，fn 运行时的参数 a 就是一个原始的、未被赋值的变量。</p>
<h3 id="使用void对表达式求值"><a href="#使用void对表达式求值" class="headerlink" title="使用void对表达式求值"></a>使用void对表达式求值</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">void</span> <span class="token number">0</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>
<span class="token keyword">void</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>
<span class="token keyword">void</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>
<span class="token keyword">void</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>
<span class="token keyword">void</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>
</code></pre>
<h2 id="null"><a href="#null" class="headerlink" title="null"></a>null</h2><p>null 的字面意思是：空值 。这个值的语义是，希望表示一个对象被人为的重置为空对象，而非一个变量最原始的状态 。 在内存里的表示就是，栈中的变量没有指向堆中的内存对象。</p>
<h3 id="特殊的typeof-null"><a href="#特殊的typeof-null" class="headerlink" title="特殊的typeof null"></a>特殊的typeof null</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "object"</span>
</code></pre>
<h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><h4 id="值相同"><a href="#值相同" class="headerlink" title="值相同"></a>值相同</h4><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> undefined <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true</span>
</code></pre>
<h4 id="转换Boolean的都是false"><a href="#转换Boolean的都是false" class="headerlink" title="转换Boolean的都是false"></a>转换Boolean的都是false</h4><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//false</span>
</code></pre>
<h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><h4 id="数据类型不同"><a href="#数据类型不同" class="headerlink" title="数据类型不同"></a>数据类型不同</h4><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> undefined <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//false     </span>
</code></pre>
<h4 id="转换为Number类型的值不同"><a href="#转换为Number类型的值不同" class="headerlink" title="转换为Number类型的值不同"></a>转换为Number类型的值不同</h4><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">Number</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//0</span>
</code></pre>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>undefined相当于期房。 买了房,但是房子还没建出来。(未定义)</p>
</li>
<li><p>null相当于毛坯房。买了房,但是房子没住人,里面是空的。(空值)</p>
</li>
<li><p>值是undefined的变量和未声明的变量，typeof运算结果都是“undefined”。运算符typeof运算null的类型时返回“object”。</p>
</li>
<li><p>通过禁止使用特殊值undefined，可以有效地确保只在一种情况下typeof才会返回“undefined”：当变量未声明时。这样就可以区别null和undefined。</p>
</li>
</ul>
<p><strong>ps：文末附上汇总文章链接<a href="https://kaleb.top/post/self-check-list">《一名【合格】前端工程师的自检清单【自检ing】》</a></strong></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>自检清单</category>
        <category>JS</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>自检清单</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>理解原型设计模式以及JavaScript中的原型规则</title>
    <url>//post/prototype-rules.html</url>
    <content><![CDATA[<h1 id="原型规则"><a href="#原型规则" class="headerlink" title="原型规则"></a>原型规则</h1><h2 id="原型规则-1"><a href="#原型规则-1" class="headerlink" title="原型规则"></a>原型规则</h2><p>所有的引用类型（数组、对象、函数），都具有对象特征，即可自由扩展属性；</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> arr<span class="token punctuation">.</span>a <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre>
<ul>
<li>所有的引用类型都有对象的特性，即可自由扩展</li>
<li>所有的引用类型都有一个_proto_属性（隐式原型），属性的值是一个普通对象</li>
<li>所有函数，都具有一个prototype（显示原型），属性值也是一个普通原型</li>
<li>所有的引用类型（数组、对象、函数），其隐式原型指向其构造函数的显式原型；（obj.proto === Object.prototype）</li>
<li>当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么回去它的_proto_（即它的构造函数的prototype）中去寻找<h2 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h2>prototype 在js中，函数对象其中一个属性：原型对象prototype。普通对象没有prototype属性，但有_proto_属性。 原型的作用就是给这个类的每一个对象都添加一个统一的方法，在原型中定义的方法和属性都是被所以实例对象所共享。<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
<span class="token punctuation">}</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//通过person.prototype设置函数对象属性</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span class="token keyword">var</span> crazy<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">person</span><span class="token punctuation">(</span>‘crazyLee’<span class="token punctuation">)</span><span class="token punctuation">;</span>
crazy<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//crazyLee//crazy继承上属性</span>
</code></pre>
<h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2>当试图得到一个对象f的某个属性时，如果这个对象本身没有这个属性，那么会去它的_proto_（即它的构造函数的prototype）obj._proto_中去寻找；当obj._proto也没有时，便会在obj._proto.proto（即obj的构造函数的prototype的构造函数的prototype）中寻找<br><img src="https://gitee.com/CalebChen/pic-img/raw/master/blog-img/posts/yxl.jpg"><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2>在函数内创建一个对象，给对象赋予属性及方法再将对象返回<br>``` js<br>function Person() {<br>  var People = new Object();<br>  People.name = ‘CrazyLee’;<br>  People.age = ‘25’;<br>  People.sex = function(){<pre><code>  return &#39;boy&#39;;
</code></pre>
  };<br>  return People;<br>}</li>
</ul>
<p>var a = Person();<br>console.log(a.name);//CrazyLee<br>console.log(a.sex());//boy</p>
<pre><code>## 构造函数模式
无需在函数内部重新创建对象，而是用this指代
``` js
function Person() &#123;
    this.name = &#39;CrazyLee&#39;;
    this.age = &#39;25&#39;;
    this.sex = function()&#123;
        return &#39;boy&#39;
    &#125;;
    
&#125;

var a = new Person();
console.log(a.name);//CrazyLee
console.log(a.sex());//boy
</code></pre>
<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>函数中不对属性进行定义，利用prototype属性对属性进行定义，可以让所有对象实例共享它所包含的属性及方法</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'carzy'</span><span class="token punctuation">;</span>
    Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token string">'24'</span><span class="token punctuation">;</span>
    Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">&amp;</span>emsp<span class="token punctuation">;</span><span class="token keyword">var</span> s<span class="token operator">=</span><span class="token string">"女"</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>emsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>emsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>emsp<span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span>  x <span class="token operator">=</span><span class="token keyword">new</span>  <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//crazy</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">sex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//女</span>
</code></pre>
<h2 id="混合模式"><a href="#混合模式" class="headerlink" title="混合模式"></a>混合模式</h2><p>原型模式+构造函数模式。这种模式中，构造函数模式用于定义实例属性，而原型模式用于定义方法和共享属性</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"CrazyLee"</span><span class="token punctuation">;</span>  
    <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span class="token punctuation">;</span>
Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayname<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> x <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">sayname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Crazy&amp;emsp;&amp;emsp;</span>
</code></pre>
<h2 id="动态原型模式"><a href="#动态原型模式" class="headerlink" title="动态原型模式"></a>动态原型模式</h2><p>将所有信息封装在了构造函数中，而通过构造函数中初始化原型，这个可以通过判断该方法是否有效而选择是否需要初始化原型</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"CrazyLee"</span><span class="token punctuation">;</span>  
    <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">;</span>  
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> Parent<span class="token punctuation">.</span>_sayname<span class="token operator">==</span><span class="token string">"undefined"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     
        Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayname<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
        Parent<span class="token punctuation">.</span>_sayname<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>         
<span class="token punctuation">}</span><span class="token punctuation">;</span>   

<span class="token keyword">var</span> x <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">sayname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p> 参考：<a href="https://juejin.cn/post/6844903854337687565">《原型设计模式以及JavaScript中的原型规则》</a></p></blockquote>
<p><strong>ps：文末附上汇总文章链接<a href="https://kaleb.top/post/self-check-list">《一名【合格】前端工程师的自检清单【自检ing】》</a></strong></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>自检清单</category>
        <category>JS</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>自检清单</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>一名【合格】前端工程师的自检清单【自检ing】</title>
    <url>//post/self-check-list.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>感谢原作者提供这样一份优秀的自检清单，写这篇的文章的主要目的是按照清单上的知识检测自己还有哪些不足和提升，同时建立自己的知识体系<br>原文章地址: <a href="https://juejin.cn/post/6844903830887366670">一名【合格】前端工程师的自检清单</a></p>
<p><img src="https://gitee.com/CalebChen/pic-img/raw/master/blog-img/posts/Knowledge%20System.jpg" alt="Knowledge System.jpg"></p>
<h2 id="一、JavaScript基础"><a href="#一、JavaScript基础" class="headerlink" title="一、JavaScript基础"></a>一、JavaScript基础</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>前端工程师吃饭的家伙，深度、广度一样都不能差。</p></blockquote>
<h3 id="变量和类型"><a href="#变量和类型" class="headerlink" title="变量和类型"></a>变量和类型</h3><ul>
<li>1.<a href="https://kaleb.top/post/js-specThe-langType"><code>JavaScript</code>规定了几种语言类型</a></li>
<li>2.<a href="https://kaleb.top/post/js-data-structure"><code>JavaScript</code>对象的底层数据结构是什么</a></li>
<li>3.<a href="https://kaleb.top/post/symbol-devAndapp"><code>Symbol</code>类型在实际开发中的应用、可手动实现一个简单的<code>Symbol</code></a></li>
<li>4.<a href="https://kaleb.top/post/js-storageForm"><code>JavaScript</code>中的变量在内存中的具体存储形式</a></li>
<li>5.<a href="https://kaleb.top/post/built-object">基本类型对应的内置对象，以及他们之间的装箱拆箱操作</a></li>
<li>6.理解值类型和引用类型</li>
<li>7.<a href="https://kaleb.top/post/null-undefined-diff"><code>null</code>和<code>undefined</code>的区别</a></li>
<li>8.<a href="https://kaleb.top/post/judgment-type-method">至少可以说出三种判断<code>JavaScript</code>数据类型的方式，以及他们的优缺点，如何准确的判断数组类型</a></li>
<li>9.<a href="https://kaleb.top/post/implicit-type">可能发生隐式类型转换的场景以及转换原则，应如何避免或巧妙应用</a></li>
<li>10.<a href="https://kaleb.top/post/loss-of-precision">出现小数精度丢失的原因，<code>JavaScript</code>可以存储的最大数字、最大安全数字，<code>JavaScript</code>处理大数字的方法、避免精度丢失的方法</a></li>
</ul>
<h3 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h3><ul>
<li>1.<a href="https://kaleb.top/post/prototype-rules">理解原型设计模式以及<code>JavaScript</code>中的原型规则</a></li>
<li>2.<a href="https://kaleb.top/post/instanceof-realize"><code>instanceof</code>的底层实现原理，手动实现一个<code>instanceof</code></a></li>
<li>3.<a href="https://kaleb.top/post/inherit">实现继承的几种方式以及他们的优缺点</a></li>
<li>4.至少说出一种开源项目(如<code>Node</code>)中应用原型继承的案例</li>
<li>5.<a href="https://kaleb.top/post/new-operator">可以描述<code>new</code>一个对象的详细过程，手动实现一个<code>new</code>操作符</a></li>
<li>6.理解<code>es6 class</code>构造以及继承的底层实现原理</li>
</ul>
<h2 id="六、框架和类库"><a href="#六、框架和类库" class="headerlink" title="六、框架和类库"></a>六、框架和类库</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>轮子层出不穷，从原理上理解才是正道</p></blockquote>
<h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><ul>
<li>1.<a href="https://kaleb.top/post/vue-api">熟练使用<code>Vue</code>的<code>API</code>、生命周期、钩子函数</a></li>
<li>2.<a href="https://kaleb.top/post/mvvm-design-concept"><code>MVVM</code>框架设计理念</a></li>
<li>3.<a href="https://kaleb.top/post/vue-two-way-binding"><code>Vue</code>双向绑定实现原理</a>、<code>Diff</code>算法的内部实现</li>
<li>4.<code>Vue</code>的事件机制</li>
<li>5.从<code>template</code>转换成真实<code>DOM</code>的实现机制</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>自检清单</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>自检清单</tag>
      </tags>
  </entry>
  <entry>
    <title>element-plus修改主题色</title>
    <url>//post/ual5ig.html</url>
    <content><![CDATA[<h1 id="先安装-vite-构建工具"><a href="#先安装-vite-构建工具" class="headerlink" title="先安装 vite 构建工具"></a>先安装 vite 构建工具</h1><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 先安装 vite 构建工具</span>
<span class="token function">npm</span> <span class="token function">install</span> -g create-vite-app
</code></pre>
<h2 id="创建项目："><a href="#创建项目：" class="headerlink" title="创建项目："></a>创建项目：</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下面两个命令都可以</span>
create-vite-app vue3-demo
cva vue3-demo
</code></pre>
<h1 id="按照官网修改主题色"><a href="#按照官网修改主题色" class="headerlink" title="按照官网修改主题色"></a>按照官网修改主题色</h1><p><a href="https://element-plus.gitee.io/zh-CN/guide/installation.html#%E4%BD%BF%E7%94%A8%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8"><strong>官网</strong></a><br><strong>我选择的是通过 scss 修改主题色</strong><br><strong>例子参照：</strong><a href="https://github.com/element-plus/element-plus-vite-starter"><strong>element-plus-vite-starter</strong></a></p>
<h2 id="创建-index-scss-文件"><a href="#创建-index-scss-文件" class="headerlink" title="创建 index.scss 文件"></a>创建 index.scss 文件</h2><pre class=" language-css"><code class="language-css"># <span class="token number">.</span>/styles/element/index<span class="token number">.</span>scss
$<span class="token property">--colors</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
  <span class="token string">"primary"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
    <span class="token string">"base"</span><span class="token punctuation">:</span> <span class="token hexcode">#ee4444</span>,
  <span class="token punctuation">)</span>,
  <span class="token string">"success"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
    <span class="token string">"base"</span><span class="token punctuation">:</span> <span class="token hexcode">#21ba45</span>,
  <span class="token punctuation">)</span>,
  <span class="token string">"warning"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
    <span class="token string">"base"</span><span class="token punctuation">:</span> <span class="token hexcode">#f2711c</span>,
  <span class="token punctuation">)</span>,
  <span class="token string">"danger"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
    <span class="token string">"base"</span><span class="token punctuation">:</span> <span class="token hexcode">#db2828</span>,
  <span class="token punctuation">)</span>,
  <span class="token string">"error"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
    <span class="token string">"base"</span><span class="token punctuation">:</span> <span class="token hexcode">#db2828</span>,
  <span class="token punctuation">)</span>,
  <span class="token string">"info"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
    <span class="token string">"base"</span><span class="token punctuation">:</span> <span class="token hexcode">#42b8dd</span>,
  <span class="token punctuation">)</span>,
<span class="token punctuation">)</span><span class="token punctuation">;</span>

@forward <span class="token string">"element-plus/theme-chalk/src/common/var.scss"</span> with
  <span class="token punctuation">(</span>
    // do not use same name, it will override<span class="token number">.</span>
    $<span class="token property">colors</span><span class="token punctuation">:</span> $--colors,
    $<span class="token property">button-padding-horizontal</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">"default"</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="vue-config-ts-代码如下"><a href="#vue-config-ts-代码如下" class="headerlink" title="vue.config.ts 代码如下"></a>vue.config.ts 代码如下</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">"path"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vite"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">"@vitejs/plugin-vue"</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> Components <span class="token keyword">from</span> <span class="token string">"unplugin-vue-components/vite"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ElementPlusResolver <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"unplugin-vue-components/resolvers"</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// https://vitejs.dev/config/</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">"~/"</span><span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/`</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  css<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    preprocessorOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      scss<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        additionalData<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`@use "~/styles/element/index.scss" as *;`</span></span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">Components</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      resolvers<span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token function">ElementPlusResolver</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          importStyle<span class="token punctuation">:</span> <span class="token string">"sass"</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue3</tag>
        <tag>element-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue的API、生命周期、钩子函数</title>
    <url>//post/vue-api.html</url>
    <content><![CDATA[<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>具体详情进：<a href="https://cn.vuejs.org/api/">Vue API</a></p>
<p>常用的如：</p>
<pre class=" language-Js"><code class="language-Js">`// console.log(vm.$root);`
`vm.$root``//实例对象`

`vm.$el``//根元素（真实的DOM元素）`
`// console.log(vm.$el);`

`vm.$el.innerHTML``//得到根元素（真实的DOM元素）中的内容`
`// console.log(vm.$el.innerHTML);`

`vm.$data``//实例下的data对象`
`// console.log(vm.$data);`

`vm.$options``//实例下的挂载项`
`// console.log(vm.$options);`

`vm.$props``//组件之间通信的数据`
`// console.log(vm.$props);`

`vm.$parent``//在组件中，指父元素`
`// console.log(vm.$parent);`

`vm.$children``//在组件中，指子代元素`
`// console.log(vm.$children);`

`vm.$attrs``//用来获取父组件传递过来的所有属性`
`// console.log(vm.$attrs);`

`vm.$listeners``//用来获取父组件传递过来的所有方法`
`// console.log(vm.$listeners);`

`vm.$slots``//组件中的插槽`
`// console.log(vm.$slots);`

`vm.$scopedSlots``//用来访问作用域插槽`
`// console.log(vm.$scopedSlots);`

`vm.$refs``//用来定位DOM元素（使用ref进行追踪）`
`// console.log(vm.$refs);`

`vm.$watch``//用于监听数据（在vue文件中使用后会自动销毁）`
`// console.log(vm.$watch);`

`vm.$emit``//用于派发事件（常用于数据通信）`
`// console.log(vm.$emit);`

`vm.$on``//用于监听事件的派发`
`// console.log(vm.$on);`

`vm.$once``//只监听事件一次（之后不监听）`
`// console.log(vm.$once);`
</code></pre>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><table>
<thead>
<tr>
<th>生命周期</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>beforeCreate</td>
<td>组件实例被创建之初</td>
</tr>
<tr>
<td>created</td>
<td>组件实例已经完全创建</td>
</tr>
<tr>
<td>beforeMount</td>
<td>组件挂载之前</td>
</tr>
<tr>
<td>mounted</td>
<td>组件挂载到实例上去之后</td>
</tr>
<tr>
<td>beforeUpdate</td>
<td>组件数据发生变化，更新之前</td>
</tr>
<tr>
<td>updated</td>
<td>组件数据更新之后</td>
</tr>
<tr>
<td>beforeDestroy</td>
<td>组件实例销毁之前</td>
</tr>
<tr>
<td>destroyed</td>
<td>组件实例销毁之后</td>
</tr>
<tr>
<td>activated</td>
<td>keep-alive 缓存的组件激活时</td>
</tr>
<tr>
<td>deactivated</td>
<td>keep-alive 缓存的组件停用时调用</td>
</tr>
<tr>
<td>errorCaptured</td>
<td>捕获一个来自子孙组件的错误时被调用</td>
</tr>
</tbody></table>
<p>Vue生命周期流程图</p>
<p><img src="https://static.vue-js.com/44114780-3aca-11eb-85f6-6fac77c0c9b3.png" alt="流程图"></p>
<h2 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h2><p>总共有11个</p>
<ul>
<li><p>beforeCreate created[可以获取数据及方法]</p>
</li>
<li><p>beforeMount mounted[可以获取到真实的DOM]</p>
</li>
<li><p>beforeUpdate updated[数据更新执行]</p>
</li>
<li><p>beforeDestroy destroyed[销毁vue实例，不再具有双向数据绑定的特点]</p>
</li>
<li><p>当keep-alive 缓存组件才会有的生命周期的钩子函数</p>
<ul>
<li>activated deactivated</li>
</ul>
</li>
<li><p>errorCaptured 当子孙组件出错时，会调用这个钩子函数</p>
</li>
</ul>
<p><strong>ps：文末附上汇总文章链接<a href="https://kaleb.top/post/self-check-list">《一名【合格】前端工程师的自检清单【自检ing】》</a></strong></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>自检清单</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>自检清单</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Symbol类型在实际开发中的应用、可手动实现一个简单的Symbol</title>
    <url>//post/symbol-devAndapp.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在 Es6 中引入了一个新的基础数据类型:<code>Symbol</code>,对于其他基本数据类型(<code>数字number</code>,<code>布尔boolean</code>,<code>null</code>,<code>undefined</code>,<code>字符串string</code>)想必都比较熟悉,但是这个<code>Symbol</code>平时用得很少,甚至在实际开发中觉得没有什么卵用,能够涉及到的应用场景屈指可数.</p>
<h1 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h1><p>在 Es5 的对象属性名中都是字符串,当一对象的属性名出现重复时,后者往往会覆盖前者.<br>若使用<code>Symbol</code>就能够保证每个属性的名字都是独一无二的,相当于生成一个唯一的标识 ID,这样就从根本上防止属性名的冲突</p>
<h1 id="Symbol-应用场景"><a href="#Symbol-应用场景" class="headerlink" title="Symbol 应用场景"></a>Symbol 应用场景</h1><h3 id="应用场景-1-使用Symbol来作为对象属性名-key"><a href="#应用场景-1-使用Symbol来作为对象属性名-key" class="headerlink" title="应用场景 1-使用Symbol来作为对象属性名(key)"></a>应用场景 1-使用<code>Symbol</code>来作为对象属性名(key)</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> PERSON_NAME <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> PERSON_AGE <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>PERSON_NAME<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">"随笔川迹"</span>
<span class="token punctuation">}</span>
person<span class="token punctuation">[</span>PERSON_AGE<span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token number">20</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">[</span>PERSON_NAME<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 随笔川迹</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">[</span>PERSON_AGE<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 20</span>
</code></pre>
<p>在上面的示例代码中,使用<code>Symbol</code>创建了<code>PERSON_NAME</code>,<code>PERSON_AGE</code>两个<code>Symbol</code>类型,但是在实际开发中却带来了一些问题。<code>Symbol</code>类型实例化出的<code>key</code>是不能通过<code>Object.keys()</code>,<code>for..in</code>,<code>for..of</code>,来枚举的。<br>ES6中提供了 <code>Object.getOwnPropertySymbols()</code>方法,可以获取指定对象的所有<code>Symbol</code>属性名,该方法会返回一个数组</p>
<h3 id="应用场景-2：使用-Symbol-定义类的私有属性-方法"><a href="#应用场景-2：使用-Symbol-定义类的私有属性-方法" class="headerlink" title="应用场景 2：使用 Symbol 定义类的私有属性/方法"></a>应用场景 2：使用 Symbol 定义类的私有属性/方法</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> size <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'size'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 声明定义了一个size变量,类型是Symbol(),类型描述内容是size</span>

<span class="token keyword">class</span> <span class="token class-name">Collection</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// class关键字定义了一个Collection类</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// 构造器`constructor`函数</span>
    <span class="token keyword">this</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 在当前类上私有化了一个size属性</span>
  <span class="token punctuation">}</span>

  <span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// Collection类下的一个方法</span>
    <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token function">sizeOf</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 静态属性</span>
    <span class="token keyword">return</span> instance<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Collection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 实例化x对象</span>
Collection<span class="token punctuation">.</span><span class="token function">sizeOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span>

x<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 调用方法</span>
Collection<span class="token punctuation">.</span><span class="token function">sizeOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span>

Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ['0']</span>
Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ['0']</span>
Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [Symbol(size)]</span>
</code></pre>
<p>上面代码中，对象 <code>x</code> 的 <code>size</code> 属性是一个 <code>Symbol</code> 值，所以 <code>Object.keys(x)</code>、<code>Object.getOwnPropertyNames(x)</code>都无法获取它。这就造成了一种非私有的内部方法的效果</p>
<h3 id="应用场景-3-模块化机制"><a href="#应用场景-3-模块化机制" class="headerlink" title="应用场景 3-模块化机制"></a>应用场景 3-模块化机制</h3><p>结合<code>Symbol</code>与模块化机制,类的私有属性和方法完美实现,如下代码所示 在文件<code>a.js</code>中</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> PASSWORD <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 定义一个PASSWORD变量,类型是Symbol</span>

<span class="token keyword">class</span> <span class="token class-name">Login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// class关键字声明一个Login类</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 构造器函数内初始化属性</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">[</span>PASSWORD<span class="token punctuation">]</span> <span class="token operator">=</span> password<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">checkPassword</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>PASSWORD<span class="token punctuation">]</span> <span class="token operator">===</span> pwd<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> Login<span class="token punctuation">;</span>
</code></pre>
<p>在文件<code>b.js</code>中</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Login <span class="token keyword">from</span> <span class="token string">'./a'</span>

<span class="token keyword">const</span> login <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Login</span><span class="token punctuation">(</span><span class="token string">'itclanCoder'</span><span class="token punctuation">,</span> <span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 实例化一个login对象</span>

login<span class="token punctuation">.</span><span class="token function">checkPassword</span><span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>
login<span class="token punctuation">.</span>PASSWORD<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 访问不到</span>
login<span class="token punctuation">[</span>PASSWORD<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 访问不到</span>
login<span class="token punctuation">[</span><span class="token string">'PASSWORD'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 访问不到</span>
</code></pre>
<p>因为通过<code>Symbol</code>定义的<code>PASSWORD</code>常量定义在<code>a.js</code>模块中,外面的模块是获取不到这个<code>Symbol</code>的,在外部无法引用这个值,也无法改写,也不可能在在创建一个一模一样的<code>Symbol</code>出来</p>
<p>因为<code>Symbol</code>是唯一的</p>
<p>在<code>a.js</code>模块中,这个<code>PASSWORD</code>的<code>Symbol</code>类型只能在当前模块文件(<code>a.js</code>)中内部使用,所以使用它来定义的类属性是没有办法被模块外访问到的</p>
<p>这样就达到了一个私有化的效果</p>
<h3 id="应用场景-4-使用Symbol来替代常量"><a href="#应用场景-4-使用Symbol来替代常量" class="headerlink" title="应用场景 4-使用Symbol来替代常量"></a>应用场景 4-使用<code>Symbol</code>来替代常量</h3><p>在使用<code>React</code>中,结合<code>Redux</code>做公共数据状态管理时,当想要改变组件中的某个状态时,<code>reducer</code>是一个纯函数,它会返回一个最新的状态给<code>store</code>,返回的结果是由<code>action</code>和<code>state</code>共同决定的</p>
<p><code>action</code>是一个对象,有具体的类型<code>type</code>值,如果你写过几行<code>Redux</code>的代码,就会常常看到,进行<code>action</code>的拆分,将事件动作的类型定义成常量</p>
<pre class=" language-js"><code class="language-js">
<span class="token keyword">const</span> CHANGE_INPUT_VALUE <span class="token operator">=</span> <span class="token string">'CHANGE_INPUT_VALUE'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 监听input框输入值的常量</span>
<span class="token keyword">const</span> ADD_INPUT_CONTENT <span class="token operator">=</span> <span class="token string">'ADD_INPUT_CONTENT'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加列表</span>
<span class="token keyword">const</span> DELETE_LIST <span class="token operator">=</span> <span class="token string">'DELETE_LIST'</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 删除列表</span>

<span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> newState <span class="token operator">=</span>  JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">switch</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> CHANGE_INPUT_VALUE<span class="token punctuation">:</span>
      <span class="token comment" spellcheck="true">// ...</span>
    <span class="token keyword">case</span> ADD_INPUT_CONTENT<span class="token punctuation">:</span>
      <span class="token comment" spellcheck="true">// ...</span>
    <span class="token keyword">case</span> DELETE_LIST<span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">// ...</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
      <span class="token keyword">return</span> state<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>以上代码在<code>Redux</code>中很常见,将<code>action</code>对象中的<code>type</code>值,给抽离出来,定义一个常量存储,来代表一种业务逻辑,通常希望这些常量是唯一的,在<code>Redux</code>中定义成常量,是为了便于调试查错</p>
<p>常常因为取<code>type</code>值时,非常苦恼.</p>
<p>现在有了<code>Symbol</code>,改写一下,就可以这样</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> CHANGE_INPUT_VALUE <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> ADD_INPUT_CONTENT <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> DELETE_LIST <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> newState <span class="token operator">=</span>  JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> CHANGE_INPUT_VALUE<span class="token punctuation">:</span>
      <span class="token comment" spellcheck="true">// ...</span>
    <span class="token keyword">case</span> ADD_INPUT_CONTENT<span class="token punctuation">:</span>
      <span class="token comment" spellcheck="true">// ...</span>
    <span class="token keyword">case</span> DELETE_LIST<span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">// ...</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
      <span class="token keyword">return</span> state<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>通过<code>Symbol</code>定义字符串常量,就保证了三个常量的值唯一性</p>
<p><strong>划重点</strong></p>
<ul>
<li>常量使用<code>Symbol</code>值最大的好处,就是其他任何值都不可能有相同的值了,可以保证常量的唯一性,因此,可以保证上面的<code>switch</code>语句按照你设计的方式条件去工作</li>
<li>当<code>Symbol</code>值作为属性名时,该属性是公开属性,不是私有属性</li>
</ul>
<h3 id="应用场景-5-注册和获取全局的-Symbol"><a href="#应用场景-5-注册和获取全局的-Symbol" class="headerlink" title="应用场景 5-注册和获取全局的 Symbol"></a>应用场景 5-注册和获取全局的 Symbol</h3><p>在浏览器窗口(<code>window</code>)中,使用<code>Symbol()</code>函数来定义生成的<code>Symbol</code>实例是唯一的</p>
<p>但是若应用涉及到多个<code>window</code>,最常见的就是在各个页面窗口中嵌入<code>iframe</code>了,并在各个<code>iframe</code>页面中取到来自同一份公共的数据源</p>
<p>也就是在各个<code>window</code>中使用的某些<code>Symbol</code>希望是同一个,那么这个时候,使用<code>Symbol()</code>就不行不通了</p>
<p>因为用它在不同<code>window</code>中创建的<code>Symbol实例</code>总是唯一的，而我们需要的是在所有这些<code>window环境下</code>保持一个共享的<code>Symbol</code>值。</p>
<p>在这种情况下，我们就需要使用另一个 API 来创建或获取<code>Symbol</code>，那就是<code>Symbol.for()</code>，它可以注册或获取一个<code>window</code>间全局的<code>Symbol实例</code>，它是<code>Symbol</code>的一个静态方法</p>
<p>这个在前面已经提到过一次,这个还是有那么一点点用处,所以在提一嘴的</p>
<p>如下示例代码所示</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> gs1 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token string">'global_symbol_1'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//注册一个全局Symbol</span>
<span class="token keyword">let</span> gs2 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token string">'global_symbol_1'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//获取全局Symbol</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gs1 <span class="token operator">===</span> gs2 <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>
</code></pre>
<p>经过<code>Symbol.for()</code>实例化出来的<code>Symbol</code>字符串类型,只要描述的内容相同,那么不光是在当前<code>window</code>中是唯一的,在其他全局范围内的<code>window</code>也是唯一的,并且相同</p>
<p>该特性,若是创建跨文件可用的<code>symbol</code>，甚至跨域（每个<code>window</code>都有它自己的全局作用域） , 可以使用 <code>Symbol.for()</code>取到相同的值</p>
<p>也就是说,使用了<code>Symbol.for()</code>在全局范围内,<code>Symbol</code>类型值可以共享</p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul>
<li><strong><code>Symbol</code> 值不能与其他类型的值进行运算-会报错</strong></li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> symItclan <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'itclan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"主站"</span> <span class="token operator">+</span> symItclan<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`主站 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>symItclan<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Uncaught TypeError: Cannot convert a Symbol value to a string</span>
</code></pre>
<ul>
<li><strong><code>Symbol</code>可以显示转为字符串</strong></li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> SyItclanCoder <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'https://coder.itclan.cn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>SyItclanCoder<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Symbol(https://coder.itclan.cn)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>SyItclanCoder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Symbol(https://coder.itclan.cn)</span>
</code></pre>
<ul>
<li><strong><code>Symbol</code>值可以转为布尔值,但是不能转为数值</strong></li>
</ul>
<pre class=" language-scss"><code class="language-scss">let sym = <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token number">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span>sym<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>
console<span class="token number">.</span><span class="token function">log</span><span class="token punctuation">(</span>!sym<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// false</span>

if <span class="token punctuation">(</span>sym<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// ...</span>
<span class="token punctuation">}</span>

<span class="token function">Number</span><span class="token punctuation">(</span>sym<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// TypeError  Cannot convert a Symbol value to a number</span>
sym <span class="token operator">+</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">// TypeError</span>
</code></pre>
<p>由上面的错误提示可以看出,<code>Symbol</code>不能转换为数字,无法做相应的运算</p>
<ul>
<li><strong><code>Symbol</code>函数不能使用<code>new</code>命令</strong></li>
</ul>
<p><code>Symbol</code>函数前不能使用<code>new</code>命令,否则就会报错,<code>Symbol</code>是一个原始类型的值,不是对象,它是类似字符串的数据类型</p>
<ul>
<li><strong><code>Symbol值</code>作为对象属性名时，不能用点运算符</strong></li>
</ul>
<p>当<code>Symbol</code>值作为对象的属性名时,访问它时,不能用点运算符</p>
<pre class=" language-ini"><code class="language-ini">const username <span class="token attr-value"><span class="token punctuation">=</span> Symbol();</span>
const person <span class="token attr-value"><span class="token punctuation">=</span> {};</span>
<span class="token constant">person.username</span> <span class="token attr-value"><span class="token punctuation">=</span> '随笔川迹';</span>
person[username]; // undefined
person['username']; // 随笔川迹
</code></pre>
<p>第 4 行代码值为<code>undefined</code>,因为点运算符后面总是字符串,所以不会读取<code>username</code>作为标识符名所指代的那个值</p>
<p>导致<code>person</code>对象的属性名实际上是一个字符串,而不是一个<code>Symbol</code>值</p>
<p>由此可见:在对象内部,使用<code>Symbol</code>类型定义属性名时,<strong><code>Symbol</code>值必须放在中括号之中</strong></p>
<pre class=" language-ini"><code class="language-ini">let s <span class="token attr-value"><span class="token punctuation">=</span> Symbol();</span>
let obj <span class="token attr-value"><span class="token punctuation">=</span> {</span>
<span class="token selector">  [s]</span>: function(arg) {
    return arg;
  }
}
obj[s]("itclanCoder")
</code></pre>
<p>在上面的代码中,如果变量<code>s</code>不放在中括号中,该属性的键名就是字符串<code>s</code>,而不是定义<code>Symbol</code>类型值</p>
<p>参考：<a href="https://juejin.cn/post/6846687598249771022#heading-9">《理解 Es6 中的 Symbol 类型》</a></p>
<p><strong>ps：文末附上汇总文章链接<a href="https://kaleb.top/post/self-check-list">《一名【合格】前端工程师的自检清单【自检ing】》</a></strong></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>自检清单</category>
        <category>JS</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>自检清单</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>swiper在loop模式下获取当前下标</title>
    <url>//post/wv1yf2.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>项目需要根据轮播来改变对应背景和文字，所以需要获取当前轮播的下标。<br>轮播是 水平卡片式轮播，教程在前文 <a href="https://kaleb.top/post/gwcyel">vue 水平卡片式轮播</a></p></blockquote>
<h1 id="loop-下-swiper6-获取当前轮播下标"><a href="#loop-下-swiper6-获取当前轮播下标" class="headerlink" title="loop 下 swiper6 获取当前轮播下标"></a>loop 下 swiper6 获取当前轮播下标</h1><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>获取下标方式： this.activeIndex % length<br>// 当前下标除以数组长度取余</p></blockquote>
<h3 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Swiper</span><span class="token punctuation">(</span><span class="token string">".swiper3"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  direction<span class="token punctuation">:</span> <span class="token string">"horizontal"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//滑动方向，可设置水平(horizontal)或垂直(vertical)。</span>
  loop<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设置为true 则开启loop模式</span>
  slidesPerView<span class="token punctuation">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设置slider容器能够同时显示的slides数量(carousel模式)。类型：number or auto</span>
  centeredSlides<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设定为true时，active slide会居中，而不是默认状态下的居左。</span>
  spaceBetween<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 在slide之间设置距离（单位px）。</span>
  autoplay<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 设置为false，用户操作swiper之后自动切换不会停止</span>
    disableOnInteraction<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  navigation<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    nextEl<span class="token punctuation">:</span> <span class="token string">".swiper-button-next"</span><span class="token punctuation">,</span>
    prevEl<span class="token punctuation">:</span> <span class="token string">".swiper-button-prev"</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  on<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// eslint-disable-next-line space-before-function-paren</span>
    slideChangeTransitionStart<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      state<span class="token punctuation">.</span>swiperIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>activeIndex <span class="token operator">%</span> state<span class="token punctuation">.</span>swiperList<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
      <categories>
        <category>问题记录</category>
      </categories>
      <tags>
        <tag>vue3</tag>
        <tag>swiper6</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx配置</title>
    <url>//post/xu9t5l.html</url>
    <content><![CDATA[<h1 id="服务器-nginx-配置"><a href="#服务器-nginx-配置" class="headerlink" title="服务器 nginx 配置"></a>服务器 nginx 配置</h1><pre class=" language-bash"><code class="language-bash">一般目录地址：
/etc/nginx
</code></pre>
<h2 id="nginx-conf-配置示例"><a href="#nginx-conf-配置示例" class="headerlink" title="nginx.conf 配置示例"></a>nginx.conf 配置示例</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># For more information on configuration, see:</span>
<span class="token comment" spellcheck="true">#   * Official English Documentation: http://nginx.org/en/docs/</span>
<span class="token comment" spellcheck="true">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span>

user www-data<span class="token punctuation">;</span>
worker_processes auto<span class="token punctuation">;</span>
worker_rlimit_nofile 65535<span class="token punctuation">;</span>
error_log /var/log/nginx/error.log<span class="token punctuation">;</span>
pid /run/nginx.pid<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span>
<span class="token comment" spellcheck="true"># include /usr/share/nginx/modules/*.conf;</span>

events <span class="token punctuation">{</span>
    worker_connections 1024<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

http <span class="token punctuation">{</span>

    include             /etc/nginx/mime.types<span class="token punctuation">;</span>
    default_type        application/octet-stream<span class="token punctuation">;</span>

    log_format  main  <span class="token string">'<span class="token variable">$remote_addr</span> - <span class="token variable">$remote_user</span> [<span class="token variable">$time_local</span>] "<span class="token variable">$request</span>" '</span>
                      <span class="token string">'<span class="token variable">$status</span> <span class="token variable">$body_bytes_sent</span> "<span class="token variable">$http_referer</span>" '</span>
                      <span class="token string">'"<span class="token variable">$http_user_agent</span>" "<span class="token variable">$http_x_forwarded_for</span>"'</span><span class="token punctuation">;</span>

    access_log  /var/log/nginx/access.log  main<span class="token punctuation">;</span>

    sendfile            on<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">#tcp_nopush          on;</span>
    tcp_nodelay         on<span class="token punctuation">;</span>
    keepalive_timeout   100<span class="token punctuation">;</span>
    types_hash_max_size 2048<span class="token punctuation">;</span>
    client_max_body_size 100m<span class="token punctuation">;</span>
    underscores_in_headers on<span class="token punctuation">;</span>

    server_names_hash_max_size 1024<span class="token punctuation">;</span>
    server_names_hash_bucket_size 64<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true"># Load modular configuration files from the /etc/nginx/conf.d directory.</span>
    <span class="token comment" spellcheck="true"># See http://nginx.org/en/docs/ngx_core_module.html#include</span>
    <span class="token comment" spellcheck="true"># for more information.</span>
    include /etc/nginx/conf.d/*.conf<span class="token punctuation">;</span>
    include /etc/nginx/sites-enabled/*<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true"># Settings for a TLS enabled server.</span>
<span class="token comment" spellcheck="true">#</span>
<span class="token comment" spellcheck="true">#    server {</span>
<span class="token comment" spellcheck="true">#        listen       443 ssl http2 default_server;</span>
<span class="token comment" spellcheck="true">#        listen       [::]:443 ssl http2 default_server;</span>
<span class="token comment" spellcheck="true">#        server_name  _;</span>
<span class="token comment" spellcheck="true">#        root         /usr/share/nginx/html;</span>
<span class="token comment" spellcheck="true">#</span>
<span class="token comment" spellcheck="true">#        ssl_certificate "/etc/pki/nginx/server.crt";</span>
<span class="token comment" spellcheck="true">#        ssl_certificate_key "/etc/pki/nginx/private/server.key";</span>
<span class="token comment" spellcheck="true">#        ssl_session_cache shared:SSL:1m;</span>
<span class="token comment" spellcheck="true">#        ssl_session_timeout  10m;</span>
<span class="token comment" spellcheck="true">#        ssl_ciphers HIGH:!aNULL:!MD5;</span>
<span class="token comment" spellcheck="true">#        ssl_prefer_server_ciphers on;</span>
<span class="token comment" spellcheck="true">#</span>
<span class="token comment" spellcheck="true">#        # Load configuration files for the default server block.</span>
<span class="token comment" spellcheck="true">#        include /etc/nginx/default.d/*.conf;</span>
<span class="token comment" spellcheck="true">#</span>
<span class="token comment" spellcheck="true">#        location / {</span>
<span class="token comment" spellcheck="true">#        }</span>
<span class="token comment" spellcheck="true">#</span>
<span class="token comment" spellcheck="true">#        error_page 404 /404.html;</span>
<span class="token comment" spellcheck="true">#        location = /404.html {</span>
<span class="token comment" spellcheck="true">#        }</span>
<span class="token comment" spellcheck="true">#</span>
<span class="token comment" spellcheck="true">#        error_page 500 502 503 504 /50x.html;</span>
<span class="token comment" spellcheck="true">#        location = /50x.html {</span>
<span class="token comment" spellcheck="true">#        }</span>
<span class="token comment" spellcheck="true">#    }</span>

<span class="token punctuation">}</span>
</code></pre>
<h2 id="conf-d-文件夹配置示例"><a href="#conf-d-文件夹配置示例" class="headerlink" title="conf.d 文件夹配置示例"></a>conf.d 文件夹配置示例</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 文件名起 xxx.conf</span>
<span class="token comment" spellcheck="true"># 配置示例</span>
</code></pre>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># jenkins.conf 示例</span>
server <span class="token punctuation">{</span>
    listen 80<span class="token punctuation">;</span>
    server_name jenkins.xxx.xxx.xxx<span class="token punctuation">;</span>

    access_log /etc/nginx/logs/jenkins.access.log main<span class="token punctuation">;</span>
    error_log /etc/nginx/logs/jenkins.error.log warn<span class="token punctuation">;</span>

    location / <span class="token punctuation">{</span>
        proxy_pass http://localhost:8080<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 站点配置示例</span>
<span class="token comment" spellcheck="true"># xxx.conf</span>
server <span class="token punctuation">{</span>
    listen 80<span class="token punctuation">;</span>
    server_name ~^<span class="token punctuation">(</span><span class="token punctuation">[</span>a-zA-Z0-9-<span class="token punctuation">]</span>+<span class="token punctuation">)</span>\.pda-dev\.xxx<span class="token punctuation">(</span>域名配置<span class="token punctuation">)</span>\.xxx<span class="token punctuation">(</span>域名配置<span class="token punctuation">)</span>\.xxx<span class="token punctuation">(</span>域名配置<span class="token punctuation">)</span>$<span class="token punctuation">;</span>
    <span class="token keyword">set</span> <span class="token variable">$platform</span> <span class="token variable">$1</span><span class="token punctuation">;</span>

    charset utf-8<span class="token punctuation">;</span>
    access_log /etc/nginx/logs/pda.admin.dev.access.log main<span class="token punctuation">;</span>
    error_log /etc/nginx/logs/pda.admin.dev.error.log error<span class="token punctuation">;</span>

    location @rewrites <span class="token punctuation">{</span>
        rewrite ^.*$ /index.html last<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    location /api <span class="token punctuation">{</span>
        proxy_pass http://api.pda-dev-admin.xxx<span class="token punctuation">(</span>域名配置<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    location / <span class="token punctuation">{</span>
        root /mnt/data/www/frontend_deploy_workspace/dev/pda/<span class="token variable">$platform</span><span class="token punctuation">;</span>
        try_files <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ @rewrites<span class="token punctuation">;</span>
        index index.html<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 叨叨点啥图床改为SM.MS</title>
    <url>//post/xxwo2p.html</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>按照叨叨点啥教程设置使用 7bu 图床，我上传图片的时候很多图片上传不成功<br>所以我就自己修改图床</p>
<p><strong>本文中使用 SM.MS 图床</strong></p></blockquote>
<h1 id="叨叨点啥教程地址"><a href="#叨叨点啥教程地址" class="headerlink" title="叨叨点啥教程地址"></a>叨叨点啥教程地址</h1><p><a href="https://www.heyiki.top/posts/c66dcdf5.html">叨叨点啥教程</a></p>
<h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><h2 id="先注册-SM-MS-账号"><a href="#先注册-SM-MS-账号" class="headerlink" title="先注册 SM.MS 账号"></a>先注册 SM.MS 账号</h2><h2 id="修改-ios-图床地址"><a href="#修改-ios-图床地址" class="headerlink" title="修改 ios 图床地址"></a>修改 ios 图床地址</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>把 7bu 图床的地址换成 SM.MS 的上传地址<br><img src="https://i.loli.net/2021/08/09/gTUSzwoFlI5PDxJ.png#id=ptQRx&originHeight=3584&originWidth=1656&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p></blockquote>
<h2 id="修改请求头和参数"><a href="#修改请求头和参数" class="headerlink" title="修改请求头和参数"></a>修改请求头和参数</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>请求头添加 <strong>Authorization</strong> 后面文本粘贴你的 SM.MS token 值</p>
<p>请求体改为 <strong>smfile</strong><br>改如下图圈起来的地方<br><img src="https://i.loli.net/2021/08/10/XyYAeT8OIb3cv6K.png#id=xTjuF&originHeight=1792&originWidth=828&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p></blockquote>
<h2 id="修改匹配正则表达式"><a href="#修改匹配正则表达式" class="headerlink" title="修改匹配正则表达式"></a>修改匹配正则表达式</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>原匹配参数 (?&lt;=”url”:”).*(?=”/},)</p>
<p>改为 (?&lt;=”url”:”).+?(?=”,”)<br>如下图所示<br><img src="https://i.loli.net/2021/08/10/TIbRjdQrElKs7oz.png#id=ya5zR&originHeight=3584&originWidth=1656&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p></blockquote>
<h1 id="修改完成-可以上传图片了"><a href="#修改完成-可以上传图片了" class="headerlink" title="修改完成 可以上传图片了"></a>修改完成 可以上传图片了</h1>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue双向绑定实现原理</title>
    <url>//post/vue-two-way-binding.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>原文：<a href="https://www.cnblogs.com/canfoo/p/6891868.html">vue 的双向绑定原理及实现</a></p>
<p>使用 vue 也好有一段时间了，虽然对其双向绑定原理也有了解个大概，但也没好好探究下其原理实现，所以这次特意花了几晚时间查阅资料和阅读相关源码，自己也实现一个简单版 vue 的双向绑定版本，先上个成果图来吸引各位：</p>
<p>代码：</p>
<p><img src="https://images2015.cnblogs.com/blog/938664/201705/938664-20170522223732179-2029881767.png" alt="代码"></p>
<p>效果图：</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/5/23/8525a8e9e7ae9d023a6ba07ca7b7350e~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.awebp" alt="效果图"></p>
<p>是不是看起来跟 vue 的使用方式差不多？接下来就来从原理到实现，从简到难一步一步来实现这个 SelfVue。由于本文只是为了学习和分享，所以只是简单实现下原理，并没有考虑太多情况和设计，如果大家有什么建议，欢迎提出来。</p>
<p>本文主要介绍两大内容：</p>
<ol>
<li><p>vue 数据双向绑定的原理。</p>
</li>
<li><p>实现简单版 vue 的过程，主要实现v-model 和事件指令的功能。</p>
</li>
</ol>
<p>相关代码地址：<a href="https://github.com/canfoo/self-vue">github.com/canfoo/self…</a></p>
<h2 id="vue-数据双向绑定原理"><a href="#vue-数据双向绑定原理" class="headerlink" title="vue 数据双向绑定原理"></a><strong>vue 数据双向绑定原理</strong></h2><p>vue 数据双向绑定是通过数据劫持结合发布者-订阅者模式的方式来实现的，那么 vue 是如果进行数据劫持的，我们可以先来看一下通过控制台输出一个定义在 vue 初始化数据上的对象是个什么东西。</p>
<p>代码：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  created<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>结果：</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/5/23/8e1f3bb04492d209e342e0e59a849959~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.awebp" alt="结果"></p>
<p>我们可以看到属性 a 有两个相对应的 get 和 set 方法，为什么会多出这两个方法呢？因为 vue 是通过 Object.defineProperty()来实现数据劫持的。</p>
<p>Object.defineProperty( )是用来做什么的？它可以来控制一个对象属性的一些特有操作，比如读写权、是否可以枚举，这里我们主要先来研究下它对应的两个描述属性 get 和 set，如果还不熟悉其用法，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">请点击这里阅读更多用法</a>。</p>
<p>在平常，我们很容易就可以打印出一个对象的属性数据：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Book <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token string">"vue权威指南"</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Book<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// vue权威指南</span>
</code></pre>
<p>如果想要在执行 console.log(book.name)的同时，直接给书名加个书名号，那要怎么处理呢？或者说要通过什么监听对象 Book 的属性值。这时候 Object.defineProperty( )就派上用场了，代码如下：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Book <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>Book<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    name <span class="token operator">=</span> value<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"你取了一个书名叫做"</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">"《"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"》"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Book<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"vue权威指南"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 你取了一个书名叫做vue权威指南</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Book<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 《vue权威指南》</span>
</code></pre>
<p>我们通过 Object.defineProperty( )设置了对象 Book 的 name 属性，对其 get 和 set 进行重写操作，顾名思义，get 就是在读取 name 属性这个值触发的函数，set 就是在设置 name 属性这个值触发的函数，所以当执行 Book.name = ‘vue 权威指南’ 这个语句时，控制台会打印出 “你取了一个书名叫做 vue 权威指南”，紧接着，当读取这个属性时，就会输出 “《vue 权威指南》”，因为我们在 get 函数里面对该值做了加工了。如果这个时候我们执行下下面的语句，控制台会输出什么？</p>
<pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Book<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>结果：</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/5/23/be5af672add5a90b46d5bac4d22b1862~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.awebp" alt="结果"></p>
<p>乍一看，是不是跟我们在上面打印 vue 数据长得有点类似，说明 vue 确实是通过这种方法来进行数据劫持的。接下来我们通过其原理来实现一个简单版的 mvvm 双向绑定代码。</p>
<h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a><strong>思路分析</strong></h2><p>实现 mvvm 主要包含两个方面，数据变化更新视图，视图变化更新数据：</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/5/23/6187ce83f3cf77f8ec107289ccd28b31~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.awebp" alt="img"></p>
<p>关键点在于 data 如何更新 view，因为 view 更新 data 其实可以通过事件监听即可，比如 input 标签监听 ‘input’ 事件就可以实现了。所以我们着重来分析下，当数据改变，如何更新视图的。</p>
<p>数据更新视图的重点是如何知道数据变了，只要知道数据变了，那么接下去的事都好处理。如何知道数据变了，其实上文我们已经给出答案了，就是通过 Object.defineProperty( )对属性设置一个 set 函数，当数据改变了就会来触发这个函数，所以我们只要将一些需要更新的方法放在这里面就可以实现 data 更新 view 了。</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/5/23/20a8fe96eeee4cba55518ea55fa91135~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.awebp" alt="img"></p>
<p>思路有了，接下去就是实现过程了。</p>
<h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a><strong>实现过程</strong></h2><p>我们已经知道实现数据的双向绑定，首先要对数据进行劫持监听，所以我们需要设置一个监听器 Observer，用来监听所有属性。如果属性发生变化了，就需要告诉订阅者 Watcher 看是否需要更新。因为订阅者是有很多个，所以我们需要有一个消息订阅器 Dep 来专门收集这些订阅者，然后在监听器 Observer 和订阅者 Watcher 之间进行统一管理的。接着，我们还需要有一个指令解析器 Compile，对每个节点元素进行扫描和解析，将相关指令对应初始化成一个订阅者 Watcher，并替换模板数据或者绑定相应的函数，此时当订阅者 Watcher 接收到相应属性的变化，就会执行对应的更新函数，从而更新视图。因此接下去我们执行以下 3 个步骤，实现数据的双向绑定：</p>
<p>1.实现一个监听器 Observer，用来劫持并监听所有属性，如果有变动的，就通知订阅者。</p>
<p>2.实现一个订阅者 Watcher，可以收到属性的变化通知并执行相应的函数，从而更新视图。</p>
<p>3.实现一个解析器 Compile，可以扫描和解析每个节点的相关指令，并根据初始化模板数据以及初始化相应的订阅器。</p>
<p>流程图如下：</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/5/23/04fdcd64ed41f762a7a495f73c0a2f86~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.awebp" alt="img"></p>
<h3 id="1-实现一个-Observer"><a href="#1-实现一个-Observer" class="headerlink" title="1.实现一个 Observer"></a><strong>1.实现一个 Observer</strong></h3><p>Observer 是一个数据监听器，其实现核心方法就是前文所说的 Object.defineProperty( )。如果要对所有属性都进行监听的话，那么可以通过递归方法遍历所有属性值，并对其进行 Object.defineProperty( )处理。如下代码，实现了一个 Observer。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">observe</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 递归遍历所有子属性</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      val <span class="token operator">=</span> newVal<span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
        <span class="token string">"属性"</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">"已经被监听了，现在值为：“"</span> <span class="token operator">+</span> newVal<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"”"</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data <span class="token operator">||</span> <span class="token keyword">typeof</span> data <span class="token operator">!==</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">defineReactive</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> library <span class="token operator">=</span> <span class="token punctuation">{</span>
  book1<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  book2<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">observe</span><span class="token punctuation">(</span>library<span class="token punctuation">)</span><span class="token punctuation">;</span>
library<span class="token punctuation">.</span>book1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"vue权威指南"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 属性name已经被监听了，现在值为：“vue权威指南”</span>
library<span class="token punctuation">.</span>book2 <span class="token operator">=</span> <span class="token string">"没有此书籍"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 属性book2已经被监听了，现在值为：“没有此书籍”</span>
</code></pre>
<p>思路分析中，需要创建一个可以容纳订阅者的消息订阅器 Dep，订阅器 Dep 主要负责收集订阅者，然后再属性变化的时候执行对应订阅者的更新函数。所以显然订阅器需要有一个容器，这个容器就是 list，将上面的 Observer 稍微改造下，植入消息订阅器：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">observe</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 递归遍历所有子属性</span>
  <span class="token keyword">var</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>是否需要添加订阅者<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在这里添加一个订阅者</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">===</span> newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      val <span class="token operator">=</span> newVal<span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
        <span class="token string">"属性"</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">"已经被监听了，现在值为：“"</span> <span class="token operator">+</span> newVal<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"”"</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果数据变化，通知所有订阅者</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Dep<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
  addSub<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>sub<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  notify<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>sub<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      sub<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>从代码上看，我们将订阅器 Dep 添加一个订阅者设计在 getter 里面，这是为了让 Watcher 初始化进行触发，因此需要判断是否要添加订阅者，至于具体设计方案，下文会详细说明的。在 setter 函数里面，如果数据变化，就会去通知所有订阅者，订阅者们就会去执行对应的更新的函数。到此为止，一个比较完整 Observer 已经实现了，接下来我们开始设计 Watcher。</p>
<h3 id="2-实现-Watcher"><a href="#2-实现-Watcher" class="headerlink" title="2.实现 Watcher"></a><strong>2.实现 Watcher</strong></h3><p>订阅者 Watcher 在初始化的时候需要将自己添加进订阅器 Dep 中，那该如何添加呢？我们已经知道监听器 Observer 是在 get 函数执行了添加订阅者 Wather 的操作的，所以我们只要在订阅者 Watcher 初始化的时候出发对应的 get 函数去执行添加订阅者操作即可，那要如何触发 get 的函数，再简单不过了，只要获取对应的属性值就可以触发了，核心原因就是因为我们使用了 Object.defineProperty( )进行数据监听。这里还有一个细节点需要处理，我们只要在订阅者 Watcher 初始化的时候才需要添加订阅者，所以需要做一个判断操作，因此可以在订阅器上做一下手脚：在 Dep.target 上缓存下订阅者，添加成功后再将其去掉就可以了。订阅者 Watcher 的实现如下：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> exp<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">=</span> cb<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>vm <span class="token operator">=</span> vm<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>exp <span class="token operator">=</span> exp<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将自己添加到订阅器的操作</span>
<span class="token punctuation">}</span>

Watcher<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
  update<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  run<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>exp<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> oldVal <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!==</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>cb<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> value<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 缓存自己</span>
    <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>exp<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 强制执行监听器里的get函数</span>
    Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 释放自己</span>
    <span class="token keyword">return</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>这时候，我们需要对监听器 Observer 也做个稍微调整，主要是对应 Watcher 类原型上的 get 函数。需要调整地方在于 defineReactive 函数：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">observe</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 递归遍历所有子属性</span>
  <span class="token keyword">var</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span>  <span class="token comment" spellcheck="true">// 判断是否需要添加订阅者</span>
        dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在这里添加一个订阅者</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">===</span> newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      val <span class="token operator">=</span> newVal<span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'属性'</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">'已经被监听了，现在值为：“'</span> <span class="token operator">+</span> newVal<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'”'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果数据变化，通知所有订阅者</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre>
<p>到此为止，简单版的 Watcher 设计完毕，这时候我们只要将 Observer 和 Watcher 关联起来，就可以实现一个简单的双向绑定数据了。因为这里没有还没有设计解析器 Compile，所以对于模板数据我们都进行写死处理，假设模板上又一个节点，且 id 号为’name’，并且双向绑定的绑定的变量也为’name’，且是通过两个大双括号包起来（这里只是为了掩饰，暂时没什么用处），模板如下：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
</code></pre>
<p>这时候我们需要将 Observer 和 Watcher 关联起来：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SelfVue</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> el<span class="token punctuation">,</span> exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
  <span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>exp<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化模板数据的值</span>
  <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> exp<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>然后在页面上 new 以下 SelfVue 类，就可以实现数据的双向绑定了：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/observer.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/watcher.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">
  <span class="token keyword">var</span> ele <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> selfVue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SelfVue</span><span class="token punctuation">(</span>
    <span class="token punctuation">{</span>
      name<span class="token punctuation">:</span> <span class="token string">"hello world"</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    ele<span class="token punctuation">,</span>
    <span class="token string">"name"</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"name值改变了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    selfVue<span class="token punctuation">.</span>data<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"canfoo"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
</code></pre>
<p>这时候打开页面，可以看到页面刚开始显示了是’hello world’，过了 2s 后就变成’canfoo’了。到这里，总算大功告成一半了，但是还有一个细节问题，我们在赋值的时候是这样的形式 ‘ selfVue.data.name = ‘canfoo’ ‘ 而我们理想的形式是’ selfVue.name = ‘canfoo’ ‘为了实现这样的形式，我们需要在 new SelfVue 的时候做一个代理处理，让访问 selfVue 的属性代理为访问 selfVue.data 的属性，实现原理还是使用 Object.defineProperty( )对属性值再包一层：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SelfVue</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> el<span class="token punctuation">,</span> exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>

  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    self<span class="token punctuation">.</span><span class="token function">proxyKeys</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 绑定代理属性</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>exp<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化模板数据的值</span>
  <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> exp<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

SelfVue<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
  proxyKeys<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      enumerable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">proxyGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">proxySetter</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newVal<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>这下我们就可以直接通过’ selfVue.name = ‘canfoo’ ‘的形式来进行改变模板数据了。如果想要迫切看到现象的童鞋赶快来<a href="https://github.com/canfoo/self-vue/tree/master/v1">获取代码！</a></p>
<h3 id="3-实现-Compile"><a href="#3-实现-Compile" class="headerlink" title="3.实现 Compile"></a><strong>3.实现 Compile</strong></h3><p>虽然上面已经实现了一个双向数据绑定的例子，但是整个过程都没有去解析 dom 节点，而是直接固定某个节点进行替换数据的，所以接下来需要实现一个解析器 Compile 来做解析和绑定工作。解析器 Compile 实现步骤：</p>
<p>1.解析模板指令，并替换模板数据，初始化视图</p>
<p>2.将模板指令对应的节点绑定对应的更新函数，初始化相应的订阅器</p>
<p>为了解析模板，首先需要获取到 dom 元素，然后对含有 dom 元素上含有指令的节点进行处理，因此这个环节需要对 dom 操作比较频繁，所有可以先建一个 fragment 片段，将需要解析的 dom 节点存入 fragment 片段里再进行处理：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">nodeToFragment</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> fragment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> child <span class="token operator">=</span> el<span class="token punctuation">.</span>firstChild<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 将Dom元素移入fragment中</span>
    fragment<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
    child <span class="token operator">=</span> el<span class="token punctuation">.</span>firstChild<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> fragment<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>接下来需要遍历各个节点，对含有相关指定的节点进行特殊处理，这里咱们先处理最简单的情况，只对带有 ‘‘ 这种形式的指令进行处理，先简道难嘛，后面再考虑更多指令情况：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> compileElement <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> childNodes <span class="token operator">=</span> el<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span>
  <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>childNodes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/\{\{(.*)\}\}/</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> text <span class="token operator">=</span> node<span class="token punctuation">.</span>textContent<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token function">isTextNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 判断是否是符合这种形式{{}}的指令</span>
      self<span class="token punctuation">.</span><span class="token function">compileText</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>childNodes <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      self<span class="token punctuation">.</span><span class="token function">compileElement</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 继续递归遍历子节点</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token keyword">function</span> compileText <span class="token punctuation">(</span>node<span class="token punctuation">,</span> exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> initText <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">[</span>exp<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateText</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> initText<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 将初始化的数据初始化到视图中</span>
  <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> exp<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 生成订阅器并绑定更新函数</span>
    self<span class="token punctuation">.</span><span class="token function">updateText</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token keyword">function</span> <span class="token punctuation">(</span>node<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  node<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token keyword">typeof</span> value <span class="token operator">==</span> <span class="token string">'undefined'</span> <span class="token operator">?</span> <span class="token string">''</span> <span class="token punctuation">:</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token template-string"><span class="token string">``</span></span><span class="token template-string"><span class="token string">`

获取到最外层节点后，调用 compileElement 函数，对所有子节点进行判断，如果节点是文本节点且匹配{{}}这种形式指令的节点就开始进行编译处理，编译处理首先需要初始化视图数据，对应上面所说的步骤 1，接下去需要生成一个并绑定更新函数的订阅器，对应上面所说的步骤 2。这样就完成指令的解析、初始化、编译三个过程，一个解析器 Compile 也就可以正常的工作了。为了将解析器 Compile 与监听器 Observer 和订阅者 Watcher 关联起来，我们需要再修改一下类 SelfVue 函数：

`</span></span><span class="token template-string"><span class="token string">``</span></span>js
<span class="token keyword">function</span> <span class="token function">SelfVue</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> options<span class="token punctuation">;</span>

  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    self<span class="token punctuation">.</span><span class="token function">proxyKeys</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">observe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">new</span> <span class="token class-name">Compile</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>更改后，我们就不要像之前通过传入固定的元素值进行双向绑定了，可以随便命名各种变量进行双向绑定了：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/observer.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/watcher.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/compile.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">
  <span class="token keyword">var</span> selfVue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SelfVue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      title<span class="token punctuation">:</span> <span class="token string">"hello world"</span><span class="token punctuation">,</span>
      name<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    selfVue<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"你好"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    selfVue<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"canfoo"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
</code></pre>
<p>如上代码，在页面上可观察到，刚开始 titile 和 name 分别被初始化为 ‘hello world’ 和空，2s 后 title 被替换成 ‘你好’ 3s 后 name 被替换成 ‘canfoo’ 了。废话不多说，再给你们来一个这个版本的代码（v2），<a href="https://github.com/canfoo/self-vue/tree/master/v2">获取代码！</a></p>
<p>到这里，一个数据双向绑定功能已经基本完成了，接下去就是需要完善更多指令的解析编译，在哪里进行更多指令的处理呢？答案很明显，只要在上文说的 compileElement 函数加上对其他指令节点进行判断，然后遍历其所有属性，看是否有匹配的指令的属性，如果有的话，就对其进行解析编译。这里我们再添加一个 v-model 指令和事件指令的解析编译，对于这些节点我们使用函数 compile 进行解析处理：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">compile</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> nodeAttrs <span class="token operator">=</span> node<span class="token punctuation">.</span>attributes<span class="token punctuation">;</span>
  <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>forEach<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>nodeAttrs<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>attr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> attrName <span class="token operator">=</span> attr<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token function">isDirective</span><span class="token punctuation">(</span>attrName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> exp <span class="token operator">=</span> attr<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
      <span class="token keyword">var</span> dir <span class="token operator">=</span> attrName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token function">isEventDirective</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 事件指令</span>
        self<span class="token punctuation">.</span><span class="token function">compileEvent</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> self<span class="token punctuation">.</span>vm<span class="token punctuation">,</span> exp<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// v-model 指令</span>
        self<span class="token punctuation">.</span><span class="token function">compileModel</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> self<span class="token punctuation">.</span>vm<span class="token punctuation">,</span> exp<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      node<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span>attrName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>上面的 compile 函数是挂载 Compile 原型上的，它首先遍历所有节点属性，然后再判断属性是否是指令属性，如果是的话再区分是哪种指令，再进行相应的处理，处理方法相对来说比较简单，这里就不再列出来，想要马上看阅读代码的同学可以马上<a href="https://github.com/canfoo/self-vue/tree/master/v3">点击这里获取。</a></p>
<p>最后我们在稍微改造下类 SelfVue，使它更像 vue 的用法：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SelfVue</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> options<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>methods <span class="token operator">=</span> options<span class="token punctuation">.</span>methods<span class="token punctuation">;</span>

  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    self<span class="token punctuation">.</span><span class="token function">proxyKeys</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">observe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">new</span> <span class="token class-name">Compile</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>el<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  options<span class="token punctuation">.</span>mounted<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 所有事情处理好后执行mounted函数</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这时候我们可以来真正测试了，在页面上设置如下东西：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clickMe<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>click me!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/observer.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/watcher.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/compile.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">
  <span class="token keyword">new</span> <span class="token class-name">SelfVue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      title<span class="token punctuation">:</span> <span class="token string">"hello world"</span><span class="token punctuation">,</span>
      name<span class="token punctuation">:</span> <span class="token string">"canfoo"</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      clickMe<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    mounted<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"你好"</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
</code></pre>
<p>是不是看起来跟 vue 的使用方法一样，哈，真正的大功告成！想要代码，直接<a href="https://github.com/canfoo/self-vue/tree/master/v3">点击这里获取！</a>现象还没描述？直接上图！！！请观赏</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/5/23/8525a8e9e7ae9d023a6ba07ca7b7350e~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.awebp" alt="效果图"></p>
<p><strong>ps：文末附上汇总文章链接<a href="https://kaleb.top/post/self-check-list">《一名【合格】前端工程师的自检清单【自检 ing】》</a></strong></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>自检清单</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>自检清单</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
</search>
